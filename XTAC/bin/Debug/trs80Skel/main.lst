                00001 ;main file for trs-80 shell
                00002  
                00003 *INCLUDE objdefsZ80.asm ; equs
                00004 ;object definitions
                00005 
    = 0000      00006 OFFSCREEN equ 0
    = 0001      00007 PLAYER_ID equ 1
                00008 
    = 00FF      00009 NO_OBJECT equ 255
    = 00FE      00010 ANY_OBJECT equ 254
                00011 
                00012 ;byte 1
    = 0001      00013 PORTABLE_MASK equ 1
    = 0002      00014 EDIBLE_MASK equ 2
    = 0002      00015 BACKDROP_MASK equ 2
    = 0004      00016 DRINKABLE_MASK equ 4
    = 0008      00017 FLAMMABLE_MASK equ 8
    = 0010      00018 LIGHTABLE_MASK equ 16
    = 0020      00019 LIT_MASK equ 32 
    = 0020      00020 EMITTING_LIGHT_MASK equ 32
    = 0040      00021 DOOR_MASK equ 64
    = 0080      00022 UNUSED_MASK equ 128
                00023 
    = 0000      00024 PORTABLE_BIT EQU 0
    = 0001      00025 EDIBLE_BIT EQU 1
    = 0002      00026 DRINKABLE_BIT EQU 2
    = 0003      00027 FLAMMABLE_BIT EQU 3
    = 0004      00028 LIGHTABLE_BIT EQU 4
    = 0005      00029 LIT_BIT  EQU 5
    = 0006      00030 DOOR_BIT EQU 6
    = 0007      00031 UNUSED_BIT EQU 7
                00032 
                00033 ;(PROPERTY_BYTE_2)
    = 0001      00034 SCENERY_MASK equ 1
    = 0002      00035 SUPPORTER_MASK equ 2
    = 0004      00036 CONTAINER_MASK equ 4
    = 0008      00037 TRANSPARENT_MASK equ 8
    = 0010      00038 OPENABLE_MASK equ 16
    = 0020      00039 OPEN_MASK equ 32
    = 0040      00040 LOCKABLE_MASK equ 64
    = 0080      00041 LOCKED_MASK equ 128
    = 0009      00042 OPEN_CONTAINER equ OPEN+CONTAINER 
                00043 
                00044 ;byte 2
    = 0000      00045 SCENERY_BIT EQU 0
    = 0001      00046 SUPPORTER_BIT EQU 1
    = 0002      00047 CONTAINER_BIT EQU 2
    = 0003      00048 TRANSPARENT_BIT EQU 3
    = 0004      00049 OPENABLE_BIT EQU 4
    = 0005      00050 OPEN_BIT EQU 5
    = 0006      00051 LOCKABLE_BIT EQU 6
    = 0007      00052 LOCKED_BIT      EQU 7
                00053 
                00054 ; objdefs.asm
                00055 
    = 0000      00056 OBJ_ID equ 0
    = 0001      00057 HOLDER_ID equ 1
    = 0002      00058 INITIAL_DESC_ID equ  2
    = 0003      00059 DESC_ID equ 3
    = 0004      00060 NORTH equ 4
    = 0005      00061 SOUTH equ 5
    = 0006      00062 EAST equ 6
    = 0007      00063 WEST equ 7
    = 0008      00064 NORTHEAST equ 8
    = 0009      00065 SOUTHEAST equ 9
    = 000A      00066 SOUTHWEST equ 10
    = 000B      00067 NORTHWEST equ 11
    = 000C      00068 UP equ 12
    = 000D      00069 DOWN equ 13
    = 000E      00070 ENTER equ 14
    = 000F      00071 OUT equ 15
    = 0010      00072 MASS equ 16
                00073 
    = 0013      00074 OBJ_ENTRY_SIZE equ 19
    = 0011      00075 PROPERTY_BYTE_1 equ 17
    = 0012      00076 PROPERTY_BYTE_2 equ 18
                00077 ;byte 1
    = 0001      00078 SCENERY equ 1 
    = 0002      00079 SUPPORTER equ 2
                00080 CONTAINER equ 3
    = 0004      00081 TRANSPARENT equ 4
    = 0005      00082 OPENABLE equ 5
                00083 OPEN equ 6
    = 0007      00084 LOCKABLE equ 7
    = 0008      00085 LOCKED equ 8
    = 0009      00086 PORTABLE equ 9
    = 000A      00087 BACKDROP equ 10
    = 000B      00088 DRINKABLE equ 11
    = 000C      00089 FLAMMABLE equ 12
    = 000D      00090 LIGHTABLE equ 13
    = 000E      00091 LIT equ 14
    = 000E      00092 EMITTING_LIGHT equ 14
    = 000F      00093 DOOR equ 15
    = 0010      00094 UNUSED equ 16
                00095 ;byte 2
    = 0001      00096 PORTABLE_MASK equ 1
    = 0002      00097 BACKDROP_MASK equ 2
    = 0004      00098 DRINKABLE_MASK equ 4
    = 0008      00099 FLAMMABLE_MASK equ 8
    = 0010      00100 LIGHTABLE_MASK equ 16
    = 0020      00101 LIT_MASK equ 32 
    = 0020      00102 EMITTING_LIGHT_MASK equ 32
    = 0040      00103 DOOR_MASK equ 64
    = 0080      00104 UNUSED_MASK equ 128
                00105 
                00106  
                00107 ;QINPUT equ 1bb3h               ; ROM ROUTINES
    = 0033      00108 CRTBYTE equ  0033H
    = 41E8      00109 INBUF equ 41e8h
    = 01C9      00110 CLS equ 01c9h
                00111 ;OUTLIN equ 28a7h               ; src str in HL/
                00112 
                00113         ORG 5200H
                00114 START
5200  CDC901    00115                 call CLS
5203  210000    00116                 ld hl,welcome ; print welcome,author,version
main.asm(14): undefined symbol
5206  CD6252    00117                 call OUTLIN
5209  CD0F58    00118                 call printcr
520C  210000    00119                 ld hl,author
main.asm(17): undefined symbol
520F  CD6252    00120                 call OUTLIN
5212  CD0F58    00121                 call printcr
5215  210000    00122                 ld hl,version
main.asm(20): undefined symbol
5218  CD6252    00123                 call OUTLIN
521B  CD0F58    00124                 call printcr
521E  CD0F58    00125                 call printcr
5221  CD6A56    00126                 call look_sub
5224  CD2B52    00127 $inp?   call getcommand
5227  C32452    00128                 jp $inp?
522A  C9        00129                 ret
                00130                 
                00131 getcommand
                00132                 ;call QINPUT
522B  CD4A52    00133                 call getlin
522E  CD9152    00134                 call parse                              ; get the words
5231  3A6256    00135                 ld a,(sentence)
5234  FE00      00136                 cp 0
5236  CA2452    00137                 jp z,$inp?
5239  CD9C54    00138                 call validate_words             ; make sure verb,io,do are in tables
523C  CD1E55    00139                 call encode                             ; try to map words to objects
523F  CD6F54    00140                 call validate_encode    ; make sure it worked
5242  CD3E5A    00141                 call run_sentence
5245  CD4952    00142                 call do_events
5248  C9        00143                 ret
                00144                 
                00145 
                00146 do_events
                00147 *INCLUDE event_jumps_Z80.asm
main.asm(45): unable to include file
5249  C9        00148         ret
                00149         
                00150 *INCLUDE io.asm 
    = 0030      00151 BUFSIZE EQU 48
    = 0040      00152 KEYIN EQU 40H
                00153 
                00154 getlin
524A  C5        00155                 push bc
524B  D5        00156                 push de
524C  E5        00157                 push hl
                00158 ;               call clrbuf
524D  21E841    00159                 ld hl,INBUF
5250  0630      00160                 ld b,BUFSIZE
5252  CD4000    00161                 call KEYIN ; returns len in 'b'
5255  48        00162                 ld c,b
5256  0600      00163                 ld b,0
5258  09        00164                 add hl,bc
5259  3600      00165                 ld (hl),0  ; delete cr
525B  E1        00166                 pop hl
525C  D1        00167                 pop de
525D  C1        00168                 pop bc
525E  CD0F58    00169                 call printcr
5261  C9        00170                 ret
                00171 
                00172 
                00173         ;hl = str
                00174 OUTLIN
5262  F5        00175                 push af
5263  C5        00176                 push bc
5264  D5        00177                 push de
5265  E5        00178                 push hl
5266  DDE5      00179                 push ix
5268  FDE5      00180                 push iy
526A  7E        00181 $lp?    ld a,(hl)
526B  FE00      00182                 cp 0
526D  CA7752    00183                 jp z,$x?
5270  23        00184                 inc hl
5271  CD3300    00185                 call CRTBYTE
5274  C36A52    00186                 jp $lp? 
5277  FDE1      00187 $x?             pop iy
5279  DDE1      00188                 pop ix
527B  E1        00189                 pop hl
527C  D1        00190                 pop de
527D  C1        00191                 pop bc
527E  F1        00192                 pop af
527F  C9        00193                 ret
                00194 
                00195 *MOD
                00196 clrbuf
5280  3EFF      00197                 LD A,255
5282  77        00198                 LD (HL),A
5283  21E841    00199                 LD HL,INBUF
5286  70        00200 $lpA    ld (hl),b
5287  23        00201                 inc hl
5288  3D        00202                 dec a
5289  FE00      00203                 cp 0
528B  C28652    00204                 jp nz,$lpA
528E  EDB0      00205                 LDIR    
5290  C9        00206                 ret
                00207 
                00208 
                00209 ;INBUF DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                00210         
                00211 *INCLUDE parser.asm
                00212 ;z80 parser 
                00213 *MOD
                00214 parse
5291  3E00      00215                 ld a,0  
5293  326056    00216                 ld (hit_end),a          ; clear flag                    ld (word_count),a       ; reset to 0
5296  215C55    00217                 ld hl,word1     
5299  225C56    00218                 ld (copydest),hl        ; set copy dest
529C  3AE841    00219                 ld a,(INBUF)            ; get 1st char? 
529F  FE00      00220                 cp 0            
52A1  CA6E61    00221                 jp z,print_ret_pardon
52A4  CDCB53    00222                 call clear_buffers
52A7  DD21E841  00223                 ld ix,INBUF                ; set ix to input buffer
52AB  FD21E841  00224                 ld iy,INBUF                ; set iy to input buffer
52AF  CDF053    00225                 call move_to_next  ; move to end of 1st word    
52B2  CD5354    00226                 call store_word    ; save word 1        
52B5  CDF053    00227                 call move_to_next       ; try to bracket at 2nd word
52B8  DD7E00    00228                 ld a,(ix) ;hit end? (single verb command)
52BB  FE00      00229                 cp 0 
52BD  CA0253    00230                 jp z,$_xB
52C0  CD7753    00231                 call handle_prep ; compress preposition if needed and go to word 3
52C3  217C55    00232                 ld hl,word2              ; copy direct object   
52C6  225C56    00233                 ld (copydest),hl
52C9  CD0353    00234                 call skip_article       ; skip article if present
52CC  DD7E00    00235                 ld a,(ix) ;hit end? (single verb command)
52CF  FE00      00236                 cp 0 
52D1  CA0253    00237                 jp z,$_xB
52D4  CD5354    00238                 call store_word         ; store direct object
52D7  CD3353    00239                 call find_preposition  ;stores prep
52DA  3A6656    00240                 ld a,(prep_found)
52DD  FE00      00241                 cp 0
52DF  CA0253    00242                 jp z, $_xB ; if no prep, we're done since we already have the d.o.
52E2  00        00243                 nop ; store prep and move past it, then get io 
52E3  DD7E00    00244                 ld a,(ix) ;hit end?
52E6  FE00      00245                 cp 0 
52E8  CA7861    00246                 jp z,print_ret_no_io
52EB  CD0353    00247                 call skip_article
52EE  DD7E00    00248                 ld a,(ix) ;hit end?
52F1  FE00      00249                 cp 0 
52F3  CA7861    00250                 jp z,print_ret_no_io
52F6  FD7700    00251                 ld (iy),a
52F9  21BC55    00252                 ld hl,word4
52FC  225C56    00253                 ld (copydest),hl
52FF  CD5354    00254                 call store_word
5302  C9        00255 $_xB    ret
                00256 
                00257 ;skip_article
                00258 ;moves to the next word, if that word is an article
                00259 ;if it's not the last word
                00260 ;ix must point to the word to look at
                00261 ;ix are positioned at the start of the next word
                00262 *MOD
                00263 skip_article
5303  F5        00264                 push af
5304  D5        00265                 push de
5305  E5        00266                 push hl
5306  FD7E00    00267                 ld a,(iy)       
5309  57        00268                 ld d,a  ;save char (null or space)
530A  3E00      00269                 ld a,0  ;put a null there       
530C  FD7700    00270                 ld (iy),a
530F  FDE5      00271                 push iy 
5311  FD21BD62  00272                 ld iy,article_table ; iy is table to search
5315  CD1F58    00273                 call get_table_index
5318  FDE1      00274                 pop iy
531A  FD7200    00275                 ld (iy),d ;replace null or space
531D  78        00276                 ld a,b
531E  FEFF      00277                 cp 0ffh  ; not found -> take no action
5320  CA2F53    00278                 jp z,$xC                
5323  214755    00279                 ld hl,DbgSA
5326  CD6252    00280                 call OUTLIN
5329  CD0F58    00281                 call printcr
532C  CDF053    00282                 call move_to_next ; move to end of next word
532F  E1        00283 $xC             pop hl
5330  D1        00284                 pop de
5331  F1        00285                 pop af
5332  C9        00286                 ret
                00287 
                00288 ;this subroutin e looks for a preposition
                00289 ;if a prep is found, prep_found is set to 1,
                00290 ;and the prep id is stored in sentence+2
                00291 *MOD
                00292 find_preposition
5333  F5        00293                 push af
5334  C5        00294                 push bc
5335  D5        00295                 push de
5336  E5        00296                 push hl
5337  DD7E00    00297 $lpD    ld a,(ix)
533A  FE00      00298                 cp 0
533C  CA7253    00299                 jp z,$xD
533F  CDF053    00300                 call move_to_next
5342  FD5600    00301                 ld d,(iy)       ; save char we're going to null out
5345  FD360000  00302                 ld (iy),0   ;null out end of word
5349  FDE5      00303                 push iy
534B  FD210000  00304                 ld iy,prep_table
parser.asm(93): undefined symbol
534F  CD1F58    00305                 call get_table_index
5352  FDE1      00306                 pop iy          ;
5354  FD7200    00307                 ld (iy),d       ; restore byte
5357  78        00308                 ld a,b          ; move result to a
5358  FEFF      00309                 cp 0ffh
535A  CA3753    00310                 jp z,$lpD   ; if not prep hit, repeat
535D  00        00311                 nop             ; hit a preposition
535E  219C55    00312                 ld hl,word3
5361  225C56    00313                 ld (copydest),hl
5364  CD5354    00314                 call store_word
5367  326456    00315                 ld (sentence+2),a
536A  3E01      00316                 ld a,1
536C  326656    00317                 ld (prep_found),a 
536F  CDF053    00318                 call move_to_next ; find next word
5372  E1        00319 $xD             pop hl
5373  D1        00320                 pop de
5374  C1        00321                 pop bc
5375  F1        00322                 pop af
5376  C9        00323                 ret
                00324 
                00325 ;if the word between ix and iy is a prep, the 
                00326 ;word is stuck on the end of word 1 and ix,iy
                00327 ;are moved to bracket the next word
                00328 ;and word 2 is zeroed out.
                00329 *MOD
                00330 handle_prep
5377  F5        00331         push af
5378  C5        00332         push bc
5379  D5        00333         push de
537A  E5        00334         push hl
537B  FDE5      00335         push iy
537D  FD5600    00336         ld d,(iy) ; save char at end of word1
5380  FD360000  00337         ld (iy),0 ; null terminate word for string cmp
5384  FD210000  00338         ld iy,prep_table
parser.asm(127): undefined symbol
5388  CD1F58    00339         call get_table_index    
538B  FDE1      00340         pop iy
538D  78        00341         ld a,b
538E  FEFF      00342         cp 0ffh ; found?
5390  CA9F53    00343         jp z,$xE ; exit on not found
                00344 ;       ld hl,DbgPF
                00345 ;       call OUTLIN
5393  CDA753    00346         call move_prep ; doesn't change ix,iy
5396  FD7200    00347         ld (iy),d       ; restore null or space
5399  CDF053    00348         call move_to_next ; move to next word
539C  C3A253    00349         jp $yE
539F  FD7200    00350 $xE     ld (iy),d       ; restore null or space
53A2  E1        00351 $yE     pop hl
53A3  D1        00352         pop de
53A4  C1        00353         pop bc
53A5  F1        00354         pop af
53A6  C9        00355         ret
                00356 
                00357 ;moves word pointed to by ix
                00358 ;to the end of the word1 buffer
                00359 move_prep
53A7  DDE5      00360                 push ix                                 ; 2nd word was a prep
53A9  FDE5      00361                 push iy
53AB  D5        00362                 push de
53AC  3A6056    00363                 ld a,(hit_end)  ; save old flag
53AF  57        00364                 ld d,a
53B0  FD215C55  00365                 ld iy,word1
53B4  CD1D54    00366                 call move_to_end
53B7  3E20      00367                 ld a,20h ; space
53B9  FD7700    00368                 ld (iy),a ; overwrite null with space
53BC  FD23      00369                 inc iy    ;move past space
53BE  CDF158    00370                 call strcpyi
53C1  7A        00371                 ld a,d
53C2  326056    00372                 ld (hit_end),a
53C5  D1        00373                 pop de
53C6  FDE1      00374                 pop iy
53C8  DDE1      00375                 pop ix
53CA  C9        00376                 ret
                00377 
                00378 
                00379                 
                00380 ;clears the variables where the words are stored
                00381 clear_buffers
53CB  3E00      00382                 ld a,0                          ; clear the 
53CD  326656    00383                 ld (prep_found),a
53D0  3EFF      00384                 ld a,0ffh
53D2  326256    00385                 ld (sentence),a
53D5  326356    00386                 ld (sentence+1),a
53D8  326456    00387                 ld (sentence+2),a
53DB  326556    00388                 ld (sentence+3),a
53DE  0600      00389                 ld b, 0
53E0  DD215B56  00390                 ld ix,copydest-1
53E4  DD7000    00391 $lp     ld (ix),b
53E7  DD2B      00392                 dec ix
53E9  3D        00393                 dec a
53EA  FE00      00394                 cp 0
53EC  C2E453    00395                 jp nz,$lp
53EF  C9        00396                 ret
                00397                 
                00398 ;brackets the next word with ix,iy              
                00399 move_to_next
53F0  FDE5      00400         push iy ; move ix to end of last word
53F2  DDE1      00401         pop ix
53F4  DD7E00    00402         ld a,(ix)
53F7  FE00      00403         cp 0  ; null?
53F9  C8        00404         ret z   
53FA  CD0154    00405         call move_to_start ; move to start of text
53FD  CD1D54    00406         call move_to_end ; move to start of text
5400  C9        00407         ret
                00408         
                00409 ;skips over spaces until ix points
                00410 ;to a non space
                00411 ;uses a,ix      
                00412 *MOD
                00413 move_to_start
5401  F5        00414                 push af
5402  DD7E00    00415 $_lp    ld a,(ix)
5405  FE20      00416                 cp 20h          ; space?
5407  CA1254    00417                 jp z,$cntF      ; quit
540A  FE00      00418                 cp 0            ; null?
540C  CA1254    00419                 jp z,$cntF      ; quit
540F  C31754    00420                 jp $xF
5412  DD23      00421 $cntF   inc ix          ;next char
5414  C30254    00422                 jp $_lp         ;repeat
5417  DDE5      00423 $xF             push ix ;copy ix to iy
5419  FDE1      00424                 pop iy  ;iy needs to catch up
541B  F1        00425                 pop af
541C  C9        00426                 ret
                00427 
                00428 ;moves iy to the 1st space or null at the end of 
                00429 ;a word.  Assumes iy is already pointing to the
                00430 ;start of the word
                00431 ;uses iy
                00432 ;if null is hit, hit_end is set to 1
                00433 move_to_end
541D  F5        00434                         push af
541E  FD7E00    00435 $_lpF           ld a,(iy)       ; get char
5421  CD3959    00436                         call atoupper
5424  FD7700    00437                         ld (iy),a
5427  FE20      00438                         cp 20h          ; space?
5429  CA3B54    00439                         jp z, $_x
542C  FE00      00440                         cp 0            ; null
542E  CA3654    00441                         jp z, _heF
5431  FD23      00442                         inc iy
5433  C31E54    00443                         jp $_lpF
5436  3E01      00444 _heF            ld a,1
5438  326056    00445                         ld (hit_end),a
543B  F1        00446 $_x                     pop af
543C  C9        00447                         ret
                00448 ;read do
                00449 *MOD    
                00450 read_dobj
543D  3A6056    00451         ld a,(hit_end)
5440  FE01      00452         cp 1
5442  C8        00453         ret z
                00454         ;       call skip_article  ; call skip_article
5443  217C55    00455         ld hl,word2
5446  225C56    00456         ld (copydest),hl
5449  CD0154    00457         call move_to_start
544C  CD1D54    00458         call move_to_end
544F  CD5354    00459         call store_word
5452  C9        00460         ret
                00461                         
                00462 ;copies from (iy-ix) chars from ix to copydest
                00463 store_word 
5453  C5        00464                 push bc
5454  D5        00465                 push de
5455  E5        00466                 push hl
5456  37        00467                 scf     ;clear the carry flag by setting it...
5457  3F        00468                 ccf ;then flipping it
5458  FDE5      00469                 push iy ; copy iy to hl
545A  E1        00470                 pop hl
545B  DDE5      00471                 push ix ; copy ix to bc
545D  C1        00472                 pop bc
545E  ED42      00473                 sbc hl,bc
5460  E5        00474                 push hl ; byte count to bc
5461  C1        00475                 pop bc
5462  DDE5      00476                 push ix  ; ix->hl       
5464  E1        00477                 pop hl
5465  ED5B5C56  00478                 ld de,(copydest)
5469  EDB0      00479                 ldir            ; (hl)->(de) until bc=0
546B  E1        00480                 pop hl
546C  D1        00481                 pop de
546D  C1        00482                 pop bc
546E  C9        00483                 ret
                00484 
                00485 
                00486 *MOD
                00487 ;Checks to see that io and do were succesfully mapped
                00488 ;to visible objects.  This has to be done because the
                00489 ;parser may recognize a word, but it doesn't refer to
                00490 ;a visible object.
                00491 ;If validate fails, subroutine calls print_ret_dont_see
                00492 ;pops the stack and returns to the parsing loop
                00493 *MOD
                00494 validate_encode
546F  3A7C55    00495                 ld a,(word2) ; is the word blank(null)
5472  FE00      00496                 cp 0
5474  CA8454    00497                 jp z,$w4I
5477  3A6356    00498                 ld a,(sentence+1)
547A  FEFF      00499                 cp 255
547C  C29B54    00500                 jp nz,$xI
547F  33        00501                 inc sp
5480  33        00502                 inc sp
5481  C3C461    00503                 jp print_ret_dont_see
5484  3ABC55    00504 $w4I    ld a,(word4)  ; is there an io?
5487  FE00      00505                 cp 0
5489  CA9B54    00506                 jp z,$xI
548C  3A6356    00507                 ld a,(sentence+1)
548F  FEFF      00508                 cp 255
5491  C29B54    00509                 jp nz,$xI
5494  33        00510                 inc sp
5495  33        00511                 inc sp
5496  33        00512                 inc sp
5497  33        00513                 inc sp
5498  C3C461    00514                 jp print_ret_dont_see   
549B  C9        00515 $xI             ret
                00516                 
                00517 ;validates that the io and do exist in the tables               
                00518 *MOD
                00519 validate_words
549C  3EFF      00520                 ld a,255
549E  326256    00521                 ld (sentence),a
54A1  326856    00522                 ld (doWordId),a
54A4  326956    00523                 ld (ioWordId),a
54A7  00        00524                 nop ; there is always a verb
54A8  CD9758    00525                 call get_verbs_id 
54AB  FEFF      00526                 cp 0ffh
54AD  C2B554    00527                 jp nz,$doJ
54B0  33        00528                 inc sp  ; return from caller
54B1  33        00529                 inc sp
54B2  C38261    00530                 jp print_ret_bad_verb
54B5  326256    00531 $doJ    ld (sentence),a ; store verb
54B8  3A7C55    00532                 ld a,(word2) ; is there a 1st word?
54BB  FE00      00533                 cp 0
54BD  CAFD54    00534                 jp z,$xJ
54C0  DD217C55  00535                 ld ix,word2
54C4  FD210000  00536                 ld iy,dictionary
parser.asm(325): undefined symbol
54C8  CD1F58    00537                 call get_table_index ; result in a
54CB  78        00538                 ld a,b
54CC  326856    00539                 ld (doWordId),a
54CF  FEFF      00540                 cp 0ffh  ; was it found
54D1  C2DB54    00541                 jp nz,$ioJ
54D4  00        00542                 nop ; look up obj and store it in sentence+1
54D5  33        00543                 inc sp
54D6  33        00544                 inc sp
54D7  C39861    00545                 jp print_ret_bad_do ; returns
54DA  00        00546                 nop ; now validate io
54DB  3ABC55    00547 $ioJ    ld a,(word4) ; is there a 1st word
54DE  FE00      00548                 cp 0
54E0  CAFD54    00549                 jp z,$xJ
54E3  DD21BC55  00550                 ld ix,word4
54E7  FD210000  00551                 ld iy,dictionary
parser.asm(340): undefined symbol
54EB  CD1F58    00552                 call get_table_index ; result in a
54EE  78        00553                 ld a,b
54EF  326956    00554                 ld (ioWordId),a
54F2  FEFF      00555                 cp 0ffh  ; was it found
54F4  C2FD54    00556                 jp nz,$xJ
54F7  00        00557                 nop ; look up obj and store it in sentence+1
54F8  33        00558                 inc sp
54F9  33        00559                 inc sp
54FA  C3AE61    00560                 jp print_ret_bad_io ; returns
54FD  C9        00561 $xJ             ret             
                00562 
                00563 ;attempts to find an object that matches the word
                00564 ;entered by the user.  If no visible objects match,
                00565 ;FF is returned.        
                00566 *MOD
                00567 lkp_directobj
54FE  F5        00568                 push af
54FF  C5        00569                 push bc
5500  3A6856    00570                 ld a,(doWordId)
5503  47        00571                 ld b,a
5504  CD4C58    00572                 call get_obj_id ; 'get the object with that word'
5507  78        00573                 ld a,b
5508  326356    00574                 ld (sentence+1),a ; copy of b
550B  C1        00575                 pop bc
550C  F1        00576                 pop af
550D  C9        00577                 ret
                00578                 
                00579                 
                00580 *MOD
                00581 lkp_indirectobj
550E  F5        00582                 push af
550F  C5        00583                 push bc
5510  3A6956    00584                 ld a,(ioWordId)
5513  47        00585                 ld b,a
5514  CD4C58    00586                 call get_obj_id ; 'get the object with that word'
5517  78        00587                 ld a,b
5518  326556    00588                 ld (sentence+3),a ; copy of b
551B  C1        00589                 pop bc
551C  F1        00590                 pop af
551D  C9        00591                 ret
                00592 
                00593 ;
                00594 ;looks at each word in sentence and
                00595 ;tries to convert it to an object or verb id
                00596 encode
551E  F5        00597                 push af
551F  3A7C55    00598                 ld a,(word2) ; is the an d.o?
5522  FE00      00599                 cp 0
5524  CA3655    00600                 jp z,$xL
5527  CDFE54    00601                 call lkp_directobj
552A  00        00602                 nop ; prep is already stored by parser
552B  3ABC55    00603                 ld a,(word4) ; is the an i.o?
552E  FE00      00604                 cp 0
5530  CA3655    00605                 jp z,$xL
5533  CD0E55    00606                 call lkp_indirectobj
5536  F1        00607 $xL             pop af
5537  C9        00608                 ret
                00609         
                00610 
                00611         
5538  4442473A  00612 DbgPF DB "DBG:PREP FOUND",0h            
      50 52 45 50 20 46 4F 55
      4E 44 00               
5547  4442473A  00613 DbgSA DB "DBG:SKIPPING ARTICLE",0h              
      53 4B 49 50 50 49 4E 47
      20 41 52 54 49 43 4C 45
      00                     
                00614                 
555C            00615 word1 DS 32
557C            00616 word2 DS 32
559C            00617 word3 DS 32
55BC            00618 word4 DS 32
55DC            00619 word5 DS 32
55FC            00620 word6 DS 32
561C            00621 word7 DS 32
563C            00622 word8 DS 32
565C  0000      00623 copydest DW 0000h
565E  0000      00624 prepaddr DW 0000h
5660  00        00625 hit_end DB 0
5661  00        00626 word_count DB 0
5662            00627 sentence DS 4
                00628 
5666  00        00629 prep_found DB 0
5667  00        00630 parse_err DB 0
                00631 
5668  FF        00632 doWordId DB 255
5669  FF        00633 ioWordId DB 255
                00634 *INCLUDE look.asm
                00635 ;look.asm
                00636 
                00637 *MOD
                00638 look_sub
566A  C5        00639                 push bc
566B  D5        00640                 push de
566C  E5        00641                 push hl
566D  DDE5      00642                 push ix
566F  111300    00643                 ld de,OBJ_ENTRY_SIZE
5672  00        00644                 nop ; can the player see?
5673  CDF35C    00645                 call get_player_room
5676  CDBB57    00646                 call print_obj_name
5679  CD0F58    00647                 call printcr
567C  47        00648                 ld b,a
567D  CDBA56    00649                 call print_obj_desc
5680  67        00650                 ld h,a
5681  00        00651                 nop ; now print all visible objects
5682  DD210000  00652                 ld ix,obj_table
look.asm(18): undefined symbol
5686  DD7E00    00653 $lpM    ld a,(ix);get id
5689  FE00      00654                 cp 0            ; skip offscreen
568B  CAAF56    00655                 jp z,$cM
568E  FE01      00656                 cp 1            ; skip player
5690  CAAF56    00657                 jp z,$cM
5693  FEFF      00658                 cp 0ffh
5695  CAB456    00659                 jp z,$xM
5698  DDCB1146  00660                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)
569C  C2AF56    00661                 jp nz,$cM
                00662 ;               nop ; is this object in this room?
569F  DD7E01    00663                 ld a,(ix+HOLDER) ; get holder byte
56A2  B8        00664                 cp b
56A3  C2AF56    00665                 jp nz,$cM
56A6  DD7E00    00666                 ld a,(ix) ; reload obj id byte
56A9  C5        00667                 push bc
56AA  47        00668                 ld b,a ; 
56AB  CCD356    00669                 call z,list_object ; look at id 'b'
56AE  C1        00670                 pop bc
56AF  DD19      00671 $cM             add ix,de ; skip object
56B1  C38656    00672                 jp $lpM
56B4  DDE1      00673 $xM             pop ix
56B6  E1        00674                 pop hl
56B7  D1        00675                 pop de
56B8  C1        00676                 pop bc
56B9  C9        00677                 ret
                00678 
                00679 ;prints description of obj in 'b'
                00680 print_obj_desc
56BA  F5        00681         push af
56BB  C5        00682         push bc
56BC  DDE5      00683         push ix
56BE  0E03      00684         ld c,DESC_ID
56C0  CD585C    00685         call get_obj_attr ; res to 'a'
56C3  47        00686         ld b,a
56C4  DD210000  00687         ld ix,string_table
look.asm(53): undefined symbol
56C8  CD8E57    00688         call print_table_entry
56CB  CD0F58    00689         call printcr
56CE  DDE1      00690         pop ix
56D0  C1        00691         pop bc
56D1  F1        00692         pop af
56D2  C9        00693         ret
                00694                 
                00695 ;prints the initial description for object in b
                00696 ;if it has one. Otherwise it defaults to "THERE IS A ____ HERE"
                00697 *MOD
                00698 list_object
56D3  F5        00699         push af
56D4  C5        00700         push bc
56D5  DDE5      00701         push ix
56D7  0E02      00702         ld c,INITIAL_DESC_ID
56D9  CD585C    00703         call get_obj_attr 
56DC  FEFF      00704         cp 0ffh         
56DE  CAEF56    00705         jp z,$nN                        
56E1  47        00706         ld b,a
56E2  DD210000  00707         ld ix,string_table
look.asm(73): undefined symbol
56E6  CD8E57    00708         call print_table_entry ; uses b and ix
56E9  CD0F58    00709         call printcr
56EC  C30457    00710         jp $xN 
56EF  217C57    00711 $nN     ld hl,thereisa
56F2  C5        00712         push bc
56F3  CD6252    00713     call OUTLIN
56F6  C1        00714         pop bc
56F7  78        00715         ld a,b
56F8  CDBB57    00716         call print_obj_name
56FB  218857    00717         ld hl,here
56FE  CD6252    00718         call OUTLIN
5701  CD0F58    00719         call printcr
5704  DDE1      00720 $xN     pop ix
5706  C1        00721         pop bc
5707  F1        00722         pop af
5708  C9        00723         ret
                00724         
                00725 
                00726                 
                00727 ;player has light       
                00728 ;player has light result in 'a'
                00729 *MOD
                00730 player_has_light
                00731                 ;is the room emitting light?
5709  CDF35C    00732                 call get_player_room 
570C  47        00733                 ld b,a
570D  0E0E      00734                 ld c,EMITTING_LIGHT
570F  CD9A5C    00735                 call get_obj_prop
5712  BF        00736                 cp a
5713  CA4B57    00737                 jp z,$yO
5716  211300    00738                 ld hl,OBJ_ENTRY_SIZE
5719  DD210000  00739                 ld ix,obj_table ;loop over every object. if its a child of player
look.asm(105): undefined symbol
571D  DD7E00    00740 $lpO    ld a,(ix) ;and not inside a closed container return true
5720  FEFF      00741                 cp 0ffh ;hit end? jump out
5722  00        00742                 nop ; is it emitting light?
5723  47        00743                 ld b,a  ; put obj id in 'b'
5724  0E0E      00744                 ld c,EMITTING_LIGHT
5726  CD9A5C    00745                 call get_obj_prop
5729  FE00      00746                 cp 0    
572B  CA4657    00747                 jp z,$skpO      ; if it's not 'lit' we don't care about it
572E  F5        00748                 push af ; get player room into 'b'
572F  3A215D    00749                 ld a,(player_room)
5732  47        00750                 ld b,a
5733  F1        00751                 pop af
5734  4F        00752                 ld c,a ; object id
5735  CD015D    00753                 call b_ancestor_of_c ; is it a in same room as player
5738  FE00      00754                 cp 0    
573A  CA4657    00755                 jp z,$skpO      ; if it's not 'lit' we don't care about it
573D  00        00756                 nop ; need to set up args
573E  CD005D    00757                 call inside_closed_container;
5741  FE00      00758                 cp 0
5743  CA4657    00759                 jp z,$skpO      ; inside closed container -> skip it
5746  DD29      00760 $skpO   add ix,hl ; skip to next object
5748  C3E453    00761                 jp $lp  ;repeat
574B  3E01      00762 $yO             ld a,1
574D  C35257    00763                 jp $xO
5750  3E00      00764 $nO             ld a,0          
5752  C9        00765 $xO             ret
                00766 
                00767 *MOD
                00768 count_visible_objects
5753  F5        00769                 push af
5754  DDE5      00770                 push ix
5756  3E00      00771                 ld a,0
5758  FEFF      00772 $lpP    cp 0ffh
575A  CA6057    00773                 jp z,$xP
575D  C3E453    00774                 jp $lp
5760  DDE1      00775 $xP             pop ix
5762  F1        00776                 pop af
5763  C9        00777                 ret
                00778 
                00779 look_at_sub
5764  F5        00780                 push af
5765  3A6356    00781                 ld a,(sentence+1)
5768  47        00782                 ld b,a
5769  0E03      00783                 ld c,DESC_ID
576B  CD585C    00784                 call get_obj_attr
576E  47        00785                 ld b,a
576F  DD210000  00786                 ld ix,string_table
look.asm(152): undefined symbol
5773  CD8E57    00787                 call print_table_entry
5776  CD0F58    00788                 call printcr
5779  F1        00789                 pop af
577A  C9        00790                 ret
                00791                 
577B  00        00792 visobjs DB 0            
577C  54484552  00793 thereisa DB  "THERE IS A ",0h
      45 20 49 53 20 41 20 00
5788  48455245  00794 here DB "HERE.",0h              
      2E 00                  
                00795         
                00796 *INCLUDE tables.asm
                00797 ;z80 table searching routines
                00798 
                00799 
                00800 ;prints an entry in the table
                00801 ;b contains the number of the string to print
                00802 ;ix contains table address
                00803 *MOD
                00804 print_table_entry
578E  F5        00805         push af
578F  C5        00806         push bc
5790  D5        00807         push de
5791  E5        00808         push hl
5792  DDE5      00809         push ix
5794  3E00      00810         ld a,0d ; lp counter 
5796  B8        00811 _lp     cp b    ; compare accumulator to a
5797  C2A557    00812         jp nz,_sk ; skip this entry
579A  DD23      00813         inc ix  ; skip length byte
579C  DDE5      00814         push ix ; move string addr to hl
579E  E1        00815         pop hl
579F  CD6252    00816         call OUTLIN
57A2  C3B457    00817         jp _x
57A5  3C        00818 _sk     inc a           ; increment loop counter
57A6  DD5E00    00819         ld      e,(ix+0) ; load length byte
57A9  1600      00820         ld d,0
57AB  DD19      00821         add ix,de  ; add it to ix (skip string)
57AD  DD23      00822         inc ix     ; add 1 to skip length byte
57AF  DD23      00823         inc ix     ; add 1 to skip null terminator
57B1  C39657    00824         jp _lp
57B4  DDE1      00825 _x      pop ix
57B6  E1        00826         pop hl
57B7  D1        00827         pop de
57B8  C1        00828         pop bc
57B9  F1        00829         pop af
57BA  C9        00830         ret
                00831 
                00832 ;prints the name of the object whose
                00833 ;id is supplied in register 'a'
                00834 *MOD
                00835 print_obj_name
57BB  F5        00836                 push af
57BC  C5        00837                 push bc
57BD  D5        00838                 push de
57BE  DDE5      00839                 push ix
57C0  DD210000  00840                 ld ix,obj_word_table
tables.asm(44): undefined symbol
57C4  110400    00841                 ld de,4         ; step amount through table
57C7  FE00      00842 _lp$    cp 0            ; done?
57C9  CAD257    00843                 jp z,_out$
57CC  DD19      00844                 add ix,de
57CE  3D        00845                 dec a           ; dec loop counter              
57CF  C3C757    00846                 jp _lp$
57D2  DD23      00847 _out$   inc ix          ; skip past the id byte to the words
57D4  0600      00848                 ld b,0
57D6  78        00849 _l2$    ld a,b
57D7  FE03      00850                 cp 3            ; hit 3 word max?
57D9  CAFB57    00851                 jp z,_xR
57DC  DD7E00    00852                 ld a,(ix)       ; get word id
57DF  FEFF      00853                 cp 255d         ; done (empty entry)?
57E1  CAFB57    00854                 jp z,_xR        
57E4  C5        00855                 push bc         ;save loop counter
57E5  47        00856                 ld b,a          ; put word id in b
57E6  DDE5      00857                 push ix         ; save ix
57E8  DD210000  00858                 ld ix,dictionary        
tables.asm(62): undefined symbol
57EC  CD8E57    00859                 call print_table_entry
57EF  CD0158    00860                 call print_space
57F2  DDE1      00861                 pop ix          ; restore ix (our table index)
57F4  DD23      00862                 inc ix          ; move to next word id
57F6  C1        00863                 pop bc          ; restore loop counter
57F7  04        00864                 inc b
57F8  C3D657    00865                 jp _l2$ 
57FB  DDE1      00866 _xR             pop ix
57FD  D1        00867                 pop de
57FE  C1        00868                 pop bc
57FF  F1        00869                 pop af
5800  C9        00870                 ret
                00871         
                00872 ;prints a space (registers are preserved)
                00873 print_space
5801  C5        00874         push bc
5802  D5        00875         push de
5803  FDE5      00876         push iy
5805  3E20      00877         ld a,20h        ; ascii space
5807  CD3300    00878         call CRTBYTE
580A  FDE1      00879         pop iy
580C  D1        00880         pop de
580D  C1        00881         pop bc
580E  C9        00882         ret
                00883 
                00884 ;prints a space (registers are preserved)
                00885 printcr
580F  F5        00886         push af
5810  C5        00887         push bc
5811  D5        00888         push de
5812  FDE5      00889         push iy
5814  3E0D      00890         ld a,0dh ; carriage return
5816  CD3300    00891         call CRTBYTE
5819  FDE1      00892         pop iy
581B  D1        00893         pop de
581C  C1        00894         pop bc
581D  F1        00895         pop af
581E  C9        00896         ret     
                00897 
                00898 ;get table index
                00899 ;returns the table index in the word in b (or ff if not found)
                00900 ;ix contains the address of the word to find
                00901 ;iy contains the address of the table to search
                00902 ;c is clobbered
                00903 *MOD
                00904 get_table_index
581F  D5        00905                 push de
5820  0600      00906                 ld b,0
5822  FD7E00    00907 $_lpS   ld a,(iy)
5825  FEFF      00908                 cp 255 ; hit end
5827  CA4858    00909                 jp z,$_nfS
582A  FD23      00910                 inc     iy ; skip len byte
582C  CD1159    00911                 call streq ; test equality - result in a
582F  FE01      00912                 cp 1    ; done - b contains index
5831  CA4A58    00913                 jp z,$_xS       ;jump if found
5834  04        00914                 inc b           ;update loop counter (index)
5835  FD2B      00915                 dec iy          ;back up an get length byte
5837  1600      00916                 ld d,0
5839  FD5E00    00917                 ld e,(iy)
583C  FD19      00918                 add iy,de       ; skip to next string
583E  FD23      00919                 inc iy          ; skip length byte
5840  FD23      00920                 inc iy          ; skip null
5842  C32258    00921                 jp $_lpS        ;repeat
5845  C34A58    00922                 jp $_xS
5848  06FF      00923 $_nfS   ld b,255                
584A  D1        00924 $_xS    pop de
584B  C9        00925                 ret
                00926         
                00927 ;returns the object id for the object whose
                00928 ;'word' is supplied in b
                00929 ;the value replaces the parameter
                00930 ;only visible objects will be considered
                00931 ;c is clobbered
                00932 *MOD
                00933 get_obj_id
584C  F5        00934                 push af
584D  D5        00935                 push de
584E  DDE5      00936                 push ix
5850  50        00937                 ld d,b ; word id to 'd'
5851  CDF35C    00938                 call get_player_room
5854  47        00939                 ld b,a ; save it in b
5855  DD210000  00940                 ld ix,obj_word_table
tables.asm(144): undefined symbol
5859  DD7E00    00941 $lpT    ld a,(ix)       ; hit end of table?
585C  FEFF      00942                 cp 255
585E  CA9058    00943                 jp z,$nfT
5861  4F        00944                 ld c,a ; the current object
5862  CD015D    00945                 call b_ancestor_of_c  ; reslt->a. Note this should really check visibility
5865  FE00      00946                 cp 0
5867  CA7F58    00947                 jp z,$cT    ; can't see it - go to next obj
586A  DD7E01    00948                 ld a,(ix+1)     ;  get word entry
586D  BA        00949                 cp d            ;  equal to supplied word?
586E  CA8A58    00950                 jp z, $_yT
5871  DD7E02    00951                 ld a,(ix+2)             ; get lp counter
5874  BA        00952                 cp d            ;  equal to supplied word?
5875  CA8A58    00953                 jp z, $_yT
5878  DD7E03    00954                 ld a,(ix+3)     ;get object's word entry
587B  BA        00955                 cp d            ;  equal to supplied word?
587C  CA8A58    00956                 jp z, $_yT
587F  DD23      00957 $cT             inc ix          ; not found. increment ix to next entry
5881  DD23      00958                 inc ix          
5883  DD23      00959                 inc ix          
5885  DD23      00960                 inc ix          
5887  C35958    00961                 jp $lpT ; go to next object
588A  DD4600    00962 $_yT    ld b,(ix)       ; they match! back up put the id in b
588D  C39258    00963                 jp $_xT
5890  06FF      00964 $nfT    ld b,255        ; not found code
5892  DDE1      00965 $_xT    pop ix
5894  D1        00966                 pop de
5895  F1        00967                 pop af
5896  C9        00968                 ret
                00969 
                00970 
                00971 ;get_verb_id
                00972 ;the verb is assumed to be in word1
                00973 ;returns the id # of the verb in a
                00974 *MOD
                00975 get_verbs_id
5897  C5        00976                 push bc
5898  D5        00977                 push de
5899  E5        00978                 push hl
589A  DDE5      00979                 push ix
589C  FDE5      00980                 push iy
589E  FD215C55  00981                 ld iy,word1
58A2  DD210000  00982                 ld ix,verb_table
tables.asm(186): undefined symbol
58A6  DD7E00    00983 $lpU    ld a,(ix)       ;save the id byte
58A9  47        00984                 ld b,a
58AA  FEFF      00985                 cp 0ffh 
58AC  CACB58    00986                 jp z, $xU               ; hit end of table
58AF  1600      00987                 ld d,0                  ; set up de with len
58B1  DD23      00988                 inc ix
58B3  DD5E00    00989                 ld e,(ix)               ; get length byte
58B6  DD23      00990                 inc ix                  ;ix now at text
58B8  CD1159    00991                 call streq
58BB  FE01      00992                 cp 1   
58BD  CACB58    00993                 jp z,$xU
58C0  DDE5      00994                 push ix         ;move ix to hl
58C2  E1        00995                 pop hl
58C3  19        00996                 add hl,de       ; skip text (add length)
58C4  23        00997                 inc hl          ; skip null
58C5  E5        00998                 push hl         ;transfer back to 2
58C6  DDE1      00999                 pop ix  ; ix is always 2 bytes past hl
58C8  C3A658    01000                 jp $lpU
58CB  78        01001 $xU             ld a,b
58CC  FDE1      01002                 pop iy
58CE  DDE1      01003                 pop ix
58D0  E1        01004                 pop hl
58D1  D1        01005                 pop de
58D2  C1        01006                 pop bc
58D3  C9        01007                 ret
                01008                 
                01009 *INCLUDE strings.asm
                01010 ;z80 parser
                01011 ;returns len of str in hl in bc
                01012 *MOD
                01013 strlen
58D4  F5        01014                 push af
58D5  E5        01015                 push hl
58D6  010000    01016                 ld bc,0
58D9  7E        01017 $lpV    ld a,(hl)
58DA  03        01018                 inc bc  ; inc char to copy
58DB  23        01019                 inc hl  ; inc index
58DC  FE00      01020                 cp 0d  ; hit null?
58DE  CAE458    01021                 jp z,$xV
58E1  C3D958    01022                 jp $lpV
58E4  E1        01023 $xV             pop hl
58E5  F1        01024                 pop af
58E6  C9        01025                 ret
                01026  
                01027 ;moves the string from hl to de
                01028 *MOD
                01029 strcpy
58E7  F5        01030         push af
58E8  C5        01031         push bc
58E9  CDD458    01032         call strlen ; puts len in bc
58EC  EDB0      01033         ldir            ; copy bc chars from hl to de
58EE  C1        01034         pop bc
58EF  F1        01035         pop af
58F0  C9        01036         ret
                01037         
                01038 ;copies string in ix
                01039 ;to iy
                01040 strcpyi
58F1  F5        01041         push af
58F2  DDE5      01042         push ix
58F4  FDE5      01043         push iy
58F6  DD7E00    01044 lpW ld a,(ix)
58F9  FD7700    01045         ld (iy),a
58FC  FE00      01046         cp 0            ; null?
58FE  CA0B59    01047         jp z,$_xW
5901  DD23      01048         inc ix
5903  FD23      01049         inc iy
5905  CA0B59    01050         jp z,$_xW
5908  C3F658    01051         jp lpW
590B  FDE1      01052 $_xW    pop iy
590D  DDE1      01053         pop ix
590F  F1        01054         pop af
5910  C9        01055         ret     
                01056 
                01057 ;compares string in ix and iy
                01058 ;returns 1 or 0 in a
                01059 *MOD
                01060 streq
5911  C5        01061         push bc
5912  DDE5      01062         push ix
5914  FDE5      01063         push iy
5916  DD7E00    01064 $lpX ld a,(ix)  ; get a byte
5919  DD23      01065         inc ix
591B  FD4600    01066         ld b,(iy) ; compare it
591E  FD23      01067         inc iy
5920  B8        01068         cp b
5921  C23159    01069         jp nz,$nX
5924  FE00      01070         cp 0; they were equal. hit end$
5926  CA2C59    01071         jp z,$yX
5929  C31659    01072         jp $lpX ; repeat        
592C  3E01      01073 $yX  ld a,1
592E  C33359    01074     jp $xX      
5931  3E00      01075 $nX     ld a,0
5933  FDE1      01076 $xX     pop iy
5935  DDE1      01077         pop ix
5937  C1        01078         pop bc
5938  C9        01079         ret 
                01080 
                01081 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                01082 ;Converts a to upper case
                01083 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                01084 *MOD
                01085 atoupper
5939  FE61      01086         cp 97
593B  FA4559    01087         jp m,$xY
593E  FE7A      01088         cp 122
5940  F24559    01089         jp p,$xY
5943  D620      01090         sub 32
5945  C9        01091 $xY     ret
                01092 
                01093 *INCLUDE checksZ80.asm
                01094 ;check rules for z80 shell
                01095 
    = 0000      01096 ID equ 0
                01097 HOLDER equ 1
    = 0011      01098 OBJ_ATTRS_SIZE equ 17
    = 0013      01099 OBJ_SIZE equ 19
                01100 
                01101 ;returns 1 or 0 in register a
                01102 ;not sure we need this check anympre
                01103 check_see_dobj
                01104 ;       push af
                01105 ;       push bc
                01106 ;       push hl
                01107 ;   call get_player_room
                01108 ;       ld b,a
                01109 ;       ld a,(sentence+1)
                01110 ;       ld c,a
                01111 ;       call b_ancestor_of_c
                01112 ;       cp 1
                01113 ;       jp z,$y?;
                01114 ;       ld hl,nosee
                01115 ;       call OUTLIN
                01116 ;       call printcr
                01117 ;       jp $x?
                01118 ;$y?    pop hl
                01119 ;       pop bc
                01120 ;       pop af
5946  C9        01121         ret
                01122 
                01123 
                01124 ;returns 1 or 0 in register a
                01125 check_see_iobj
5947  C9        01126         ret
                01127 
                01128 check_dobj_supplied
5948  C9        01129         ret
                01130 
                01131 check_iobj_supplied
5949  C9        01132         ret
                01133 
                01134 
                01135 *MOD
                01136 check_dobj_portable
594A  3A6356    01137         ld a,(sentence+1)
594D  47        01138         ld b,a  
594E  0E09      01139         ld c,PORTABLE
5950  CD9A5C    01140         call get_obj_prop
5953  FE01      01141         cp 1
5955  CA6359    01142         jp z,$xZ
5958  21C05E    01143         ld hl,notportable
595B  CD6252    01144         call OUTLIN
595E  CD0F58    01145         call printcr
5961  33        01146         inc sp
5962  33        01147         inc sp
5963  C9        01148 $xZ     ret
                01149         
                01150 *MOD
                01151 check_have_dobj 
5964  0601      01152         ld b,PLAYER_ID
5966  3A6356    01153         ld a,(sentence+1)
5969  4F        01154         ld c,a
596A  CD015D    01155         call b_ancestor_of_c
596D  FE01      01156         cp 1
596F  CA7D59    01157         jp z,$xBA
5972  210862    01158         ld hl,donthave
5975  CD6252    01159         call OUTLIN
5978  CD0F58    01160         call printcr
597B  33        01161         inc sp
597C  33        01162         inc sp
597D  C9        01163 $xBA    ret
                01164 
                01165 *MOD
                01166 check_dont_have_dobj 
597E  0601      01167         ld b,PLAYER_ID
5980  3A6356    01168         ld a,(sentence+1)
5983  4F        01169         ld c,a
5984  CD015D    01170         call b_ancestor_of_c
5987  FE00      01171         cp 0
5989  CA9759    01172         jp z,$xBB
598C  21D85E    01173         ld hl,alreadyhave
598F  CD6252    01174         call OUTLIN
5992  CD0F58    01175         call printcr
5995  33        01176         inc sp
5996  33        01177         inc sp
5997  C9        01178 $xBB    ret
                01179 
                01180 *MOD    
                01181 check_dobj_opnable
5998  3A6356    01182         ld a,(sentence+1)
599B  47        01183         ld b,a  
599C  0E05      01184         ld c,OPENABLE
599E  CD9A5C    01185         call get_obj_prop
59A1  FE01      01186         cp 1
59A3  CAB159    01187         jp z,$xBC
59A6  21435C    01188         ld hl,notopenable
59A9  CD6252    01189         call OUTLIN
59AC  CD0F58    01190         call printcr
59AF  33        01191         inc sp
59B0  33        01192         inc sp
59B1  C9        01193 $xBC    ret
                01194 
                01195 *MOD    
                01196 check_dobj_open
59B2  3A6356    01197         ld a,(sentence+1)
59B5  47        01198         ld b,a  
59B6  0E06      01199         ld c,OPEN
59B8  CD9A5C    01200         call get_obj_prop
59BB  FE01      01201         cp 1
59BD  CACB59    01202         jp z,$xBD
59C0  21DA60    01203         ld hl,closed
59C3  CD6252    01204         call OUTLIN
59C6  CD0F58    01205         call printcr
59C9  33        01206         inc sp
59CA  33        01207         inc sp
59CB  C9        01208 $xBD    ret
                01209 
                01210 
                01211 *MOD
                01212 check_not_locked
59CC  3A6356    01213         ld a,(sentence+1)
59CF  47        01214         ld b,a  
59D0  0E08      01215         ld c,LOCKED
59D2  CD9A5C    01216         call get_obj_prop
59D5  FE00      01217         cp 0
59D7  CAE559    01218         jp z,$xBE
59DA  21F85B    01219         ld hl,itslocked
59DD  CD6252    01220         call OUTLIN
59E0  CD0F58    01221         call printcr
59E3  33        01222         inc sp
59E4  33        01223         inc sp
59E5  C9        01224 $xBE    ret
                01225 
                01226 *MOD
                01227 check_dobj_closed
59E6  3A6356    01228                 ld a,(sentence+1)
59E9  47        01229                 ld b,a  
59EA  0E06      01230                 ld c,OPEN
59EC  CD9A5C    01231                 call get_obj_prop
59EF  FE00      01232                 cp 0
59F1  CAFF59    01233                 jp z,$xBF
59F4  21055C    01234                 ld hl,alreadyopen
59F7  CD6252    01235                 call OUTLIN
59FA  CD0F58    01236                 call printcr
59FD  33        01237                 inc sp
59FE  33        01238                 inc sp
59FF  C9        01239 $xBF            ret
                01240 
                01241 ;checks if the do is a child of the io  
                01242 *MOD
                01243 check_not_self_or_child
                01244 
5A00  C9        01245 $xBG    ret
                01246 
                01247 ;checks if the do is a child of the io  
                01248 ;returns 1 or 0 in 'a'
                01249 ;1 means the containership is invalid
                01250 *MOD
                01251 check_nested_containership
5A01  C5        01252         push bc
5A02  00        01253         nop ; check self
5A03  3A6356    01254         ld a,(sentence+1)
5A06  47        01255         ld b,a
5A07  3A6556    01256         ld a,(sentence+3)
5A0A  B8        01257         cp b
5A0B  CA1C5A    01258         jp z,$nBH
5A0E  00        01259         nop ; check contains
5A0F  CD015D    01260         call b_ancestor_of_c
5A12  FE01      01261         cp 1
5A14  CA1C5A    01262         jp z,$nBH; 
5A17  3E00      01263         ld a,0
5A19  C3275A    01264         jp $xBH
5A1C  214D61    01265 $nBH ld hl,impossible
5A1F  CD6252    01266         call OUTLIN
5A22  CD0F58    01267         call printcr
5A25  3E00      01268         ld a,0
5A27  C1        01269 $xBH    pop bc
5A28  C9        01270         ret
                01271 
                01272 *MOD
                01273 check_prep_supplied
5A29  C9        01274         ret
                01275         
                01276                 
5A2A  594F5520  01277 nosee DB "YOU DON'T SEE THAT.",0h       
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
                01278         
                01279 *INCLUDE sentencesZ80.asm
                01280 ;sentences running routines
                01281 *MOD
                01282 run_sentence
                01283                 ;run checks (these return if not met)           
5A3E  DD210000  01284                 ld ix,check_table
sentencesZ80.asm(5): undefined symbol
5A42  DD7E00    01285 $lpBJ   ld a,(ix)
5A45  FEFF      01286                 cp 255
5A47  CA6B5A    01287                 jp z,$dBJ
5A4A  3A6256    01288                 ld a,(sentence)
5A4D  DDBE00    01289                 cp (ix) ; compare to verb
5A50  C2625A    01290                 jp nz,$cBJ
5A53  DD23      01291                 inc ix
5A55  21605A    01292                 ld hl,$nxtBJ
5A58  E5        01293                 push hl  ; "call" to check rountine
5A59  DD6E00    01294                 ld l,(ix)
5A5C  DD6601    01295                 ld h,(ix+1)
5A5F  E9        01296                 jp (hl)
5A60  DD2B      01297 $nxtBJ  dec ix
5A62  DD23      01298 $cBJ            inc ix  ; skip to next entry
5A64  DD23      01299                 inc ix
5A66  DD23      01300                 inc ix
5A68  C3425A    01301                 jp $lpBJ
5A6B  00        01302 $dBJ            nop;
                01303                 ;return before
5A6C  DD210000  01304                 ld ix,preactions_table
sentencesZ80.asm(25): undefined symbol
5A70  CD8A5A    01305                 call run_actions
                01306                 ;run instead
5A73  DD210000  01307                 ld ix,actions_table
sentencesZ80.asm(28): undefined symbol
5A77  CD8A5A    01308                 call run_actions
5A7A  3AEC5A    01309                 ld a,(action_run)
5A7D  FE01      01310                 cp 1
5A7F  C4ED5A    01311                 call nz,run_default_sentence
                01312                 ;run 'after' actions
5A82  DD210000  01313                 ld ix,postactions_table
sentencesZ80.asm(34): undefined symbol
5A86  CD8A5A    01314                 call run_actions
5A89  C9        01315                 ret
                01316 
                01317 ;actions table in ix
                01318 ;post condition: action_run = 1
                01319 ;if a sentence was run
                01320 *MOD
                01321 run_actions
5A8A  C5        01322                 push bc
5A8B  D5        01323                 push de
5A8C  E5        01324                 push hl
5A8D  FDE5      01325                 push iy 
5A8F  CD205B    01326                 call wildcardize        ; make the wildcard version of the sentence
5A92  3E00      01327                 ld a,0                          ; clear flag
5A94  32EC5A    01328                 ld (action_run),a
5A97  FD216256  01329                 ld iy,sentence
5A9B  110600    01330                 ld de,6         ;size of entry
5A9E  DD7E00    01331 @lpBK   ld a,(ix)       ; load verb from table
5AA1  FEFF      01332                 cp 0ffh         ; hit end of table
5AA3  CAE65A    01333                 jp z,$xBK 
5AA6  FDBE00    01334                 cp (iy)         ; verb match
5AA9  C2E05A    01335                 jp nz,$cBK
5AAC  DD7E01    01336                 ld a,(ix+1)
5AAF  FDBE01    01337                 cp (iy+1)                               
5AB2  C2E05A    01338                 jp nz,$cBK                      ; d.o.'s don't match
5AB5  DD7E02    01339                 ld a,(ix+2)
5AB8  FDBE02    01340                 cp (iy+2)               
5ABB  C2E05A    01341                 jp nz,$cBK                      ; preps don't match
5ABE  DD7E03    01342                 ld a,(ix+3)
5AC1  FDBE03    01343                 cp (iy+3)               
5AC4  C2E05A    01344                 jp nz,$cBK                      ; i.o. 's don't match
5AC7  DDE5      01345                 push ix ; ix -> hl
5AC9  E1        01346                 pop hl
5ACA  23        01347                 inc hl  ; move 4 bytes to sub routine
5ACB  23        01348                 inc hl
5ACC  23        01349                 inc hl
5ACD  23        01350                 inc hl
5ACE  5E        01351                 ld e,(hl)
5ACF  23        01352                 inc hl
5AD0  56        01353                 ld d,(hl)
5AD1  D5        01354                 push de ; de -> hl
5AD2  E1        01355                 pop hl
5AD3  01D85A    01356         ld bc,$nxtBK      ; push return addr on stack
5AD6  C5        01357                 push bc
5AD7  E9        01358                 jp (hl)                 ; return will pop stack
5AD8  3E01      01359 $nxtBK  ld a,1
5ADA  32EC5A    01360                 ld (action_run),a
5ADD  C3E65A    01361                 jp $xBK                         ; done 
5AE0  00        01362 $cBK            nop ; check for wildcard match          
5AE1  DD19      01363                 add ix,de                       ; skip to next entry 
5AE3  C39E5A    01364                 jp @lpBK
5AE6  FDE1      01365 $xBK            pop iy
5AE8  E1        01366                 pop hl
5AE9  D1        01367                 pop de
5AEA  C1        01368                 pop bc
5AEB  C9        01369                 ret
                01370 
5AEC  00        01371 action_run DB 0
                01372 *MOD
                01373 run_default_sentence
5AED  C5        01374                 push bc
5AEE  D5        01375                 push de
5AEF  E5        01376                 push hl
5AF0  DD21CA62  01377                 ld ix,sentence_table
5AF4  110300    01378 $lpBL   ld de,3         ; reload de
5AF7  DD7E00    01379                 ld a,(ix)
5AFA  FEFF      01380                 cp 0ffh ; end?
5AFC  CA1C5B    01381                 jp z,$xBL
5AFF  216256    01382                 ld hl,sentence
5B02  BE        01383                 cp (hl)         ; equal to verb?
5B03  C2175B    01384                 jp nz,$cBL
5B06  DDE5      01385                 push ix ; ix -> hl
5B08  E1        01386                 pop hl
5B09  23        01387                 inc hl          ;skip 1 byte to function address
5B0A  5E        01388                 ld e,(hl)
5B0B  23        01389                 inc hl
5B0C  56        01390                 ld d,(hl)
5B0D  D5        01391                 push de ; de -> hl
5B0E  E1        01392                 pop hl
5B0F  01145B    01393         ld bc,$nxtBL      ; push return addr on stack
5B12  C5        01394                 push bc
5B13  E9        01395                 jp (hl)                 ; return will pop stack
5B14  110300    01396 $nxtBL  ld de,3         ; reload de
5B17  DD19      01397 $cBL            add ix,de               ;skip to next
5B19  C3F45A    01398                 jp $lpBL
5B1C  E1        01399 $xBL            pop hl
5B1D  D1        01400                 pop de
5B1E  C1        01401                 pop bc
5B1F  C9        01402                 ret
                01403 
                01404 ;replaces io and do with 254 (ANY_OBJECT)
                01405 *MOD            
                01406 wildcardize
5B20  3A6256    01407         ld a,(sentence) ; copy verb
5B23  324C5B    01408         ld (wildcards),a
5B26  3A6456    01409         ld a,(sentence+2) ; copy prep
5B29  324E5B    01410         ld (wildcards+2),a
5B2C  3EFF      01411         ld a,255                ;store do
5B2E  326356    01412         ld (sentence+1),a
5B31  FEFF      01413         cp 255                  ;was do blank?
5B33  C20000    01414         jp nz,$nBM
sentencesZ80.asm(135): undefined symbol
5B36  3EFE      01415         ld a,ANY_OBJECT ;no, store '*'
5B38  326356    01416         ld (sentence+1),a
5B3B  00        01417         nop ; repeat for io
5B3C  3EFF      01418         ld a,255                ;store do
5B3E  326556    01419         ld (sentence+3),a
5B41  FEFF      01420         cp 255                  ;was do blank?
5B43  C20000    01421         jp nz,$nBM
sentencesZ80.asm(142): undefined symbol
5B46  3EFE      01422         ld a,ANY_OBJECT ;no, store '*'
5B48  326556    01423         ld (sentence+3),a
5B4B  C9        01424         ret
                01425         
5B4C  00000000  01426 wildcards DB 0,0,0,0
                01427 *INCLUDE movementZ80.asm
                01428 ;movement.asm
                01429 ;puts move dir in a
                01430 
                01431 *MOD
                01432 move_player
5B50  C5        01433                 push bc
5B51  D5        01434                 push de
5B52  DDE5      01435                 push ix
                01436                 ;convert the verb to a direction
5B54  CDF35C    01437                 call get_player_room
5B57  47        01438                 ld b,a ; save room
5B58  CDB95B    01439                 call get_move_dir
5B5B  4F        01440                 ld c,a  ;direction code
5B5C  CD585C    01441                 call get_obj_attr ; dir in 'a'->
5B5F  57        01442                 ld d,a  ; save 'door' for later
5B60  FE80      01443                 cp 128  ; ? is it positive or negative
5B62  FA755B    01444                 jp m,$goBN
5B65  ED44      01445                 neg             ; flip accumulator (2's complement)
5B67  47        01446                 ld b,a
5B68  DD210000  01447                 ld ix,nogo_table
movementZ80.asm(20): undefined symbol
5B6C  CD8E57    01448                 call print_table_entry
5B6F  CD0F58    01449                 call printcr
5B72  C3B35B    01450                 jp $xBN
5B75  00        01451 $goBN   nop ; is 'a' a door?
5B76  5F        01452                 ld e,a
5B77  47        01453                 ld b,a
5B78  0E0F      01454                 ld c,DOOR
5B7A  CD9A5C    01455                 call get_obj_prop
5B7D  FE01      01456                 cp 1 
5B7F  7B        01457                 ld a,e  
5B80  C2A95B    01458                 jp nz,$go2BN   ; not a door- just go
5B83  00        01459                 nop ; is it closed?
5B84  0E06      01460                 ld c,OPEN ; b still contains obj id
5B86  CD9A5C    01461                 call get_obj_prop
5B89  FE01      01462                 cp 1                    
5B8B  C29D5B    01463                 jp nz,$dcBN     ; not closed
5B8E  00        01464                 nop ; load the door's  direction attr into 'a'
5B8F  CDB95B    01465                 call get_move_dir ; dir in 'a'->
5B92  4F        01466                 ld c,a  ; direction
5B93  CD585C    01467                 call get_obj_attr ; dir in 'a'->
5B96  42        01468                 ld b,d   ; door
5B97  CD585C    01469                 call get_obj_attr  ; get dir a leave in 'a'
5B9A  C3A95B    01470                 jp $go2BN
5B9D  21DE5B    01471 $dcBN   ld hl,doorclosed
5BA0  CD6252    01472                 call OUTLIN
5BA3  CD0F58    01473                 call printcr
5BA6  C3B35B    01474                 jp $xBN 
5BA9  0601      01475 $go2BN  ld b,PLAYER_ID          ; move player to location
5BAB  0E01      01476                 ld c,HOLDER_ID
5BAD  CD795C    01477                 call set_obj_attr       
5BB0  CD6A56    01478                 call look_sub
5BB3  DDE1      01479 $xBN            pop ix
5BB5  D1        01480                 pop de
5BB6  C1        01481                 pop bc
5BB7  C9        01482                 ret
                01483 
                01484 enter_sub
5BB8  C9        01485                 ret
                01486         
                01487 ;puts move dir (attr) in a      
                01488 *MOD
                01489 get_move_dir
5BB9  D5        01490                 push de
5BBA  DDE5      01491                 push ix
5BBC  DD21D15B  01492                 ld ix,direction_map
5BC0  3A6256    01493                 ld a,(sentence) ; get verb
5BC3  D600      01494                 sub n_verb_id
movementZ80.asm(67): undefined symbol
5BC5  1600      01495                 ld d,0
5BC7  5F        01496                 ld e,a
5BC8  DD19      01497                 add ix,de
5BCA  DD7E00    01498                 ld a,(ix)       
5BCD  DDE1      01499                 pop ix
5BCF  D1        01500                 pop de
5BD0  C9        01501                 ret
                01502 
                01503 ;direction table
                01504 ;maps direction verb id to the attribute numbers
                01505 direction_map
5BD1  04        01506         DB 4 ; N
5BD2  05        01507         DB 5 ; SOUTH
5BD3  06        01508         DB 6 ; EAST
5BD4  07        01509         DB 7 ; WEST 
5BD5  08        01510         DB 8 ; NORTHEAST 
5BD6  09        01511         DB 9 ; SOUTHEAST 
5BD7  0A        01512         DB 10 ;SOUTHWEST
5BD8  0B        01513         DB 11 ;NORTHWEST
5BD9  0C        01514         DB 12 ;UP 
5BDA  0D        01515         DB 13 ;DOWN 
5BDB  0E        01516         DB 14 ;ENTER 
5BDC  0F        01517         DB 15 ;OUT 
5BDD  FF        01518         DB 0ffh
                01519         
5BDE  54484520  01520 doorclosed DB "THE DOOR IS CLOSED.",0h  
      44 4F 4F 52 20 49 53 20
      43 4C 4F 53 45 44 2E 00
                01521 *INCLUDE containersZ80.asm
                01522 ;container routines
                01523 *MOD
                01524  
                01525                 
5BF2  444F4E45  01526 done DB "DONE.",0h
      2E 00                  
5BF8  49542753  01527 itslocked DB "IT'S LOCKED.",0h
      20 4C 4F 43 4B 45 44 2E
      00                     
5C05  49542753  01528 alreadyopen DB "IT'S ALREADY OPEN.",0h
      20 41 4C 52 45 41 44 59
      20 4F 50 45 4E 2E 00   
5C18  49542753  01529 alreadyclosed DB "IT'S ALREADY CLOSED.",0h
      20 41 4C 52 45 41 44 59
      20 43 4C 4F 53 45 44 2E
      00                     
5C2D  54484154  01530 notcloseable DB "THAT'S NOT CLOSEABLE.",0h
      27 53 20 4E 4F 54 20 43
      4C 4F 53 45 41 42 4C 45
      2E 00                  
5C43  54484154  01531 notopenable DB "THAT'S NOT OPENABLE.",0h
      27 53 20 4E 4F 54 20 4F
      50 45 4E 41 42 4C 45 2E
      00                     
                01532 
                01533 *INCLUDE routinesZ80.asm
                01534 ;z80 routines
                01535 
                01536 ;returns property c of object b in register a
                01537 *MOD
                01538 get_obj_attr
5C58  C5        01539                 push bc
5C59  D5        01540                 push de
5C5A  E5        01541                 push hl
5C5B  DDE5      01542                 push ix
5C5D  61        01543                 ld h,c  ; save attr in h
5C5E  0E13      01544                 ld c,OBJ_ENTRY_SIZE
5C60  CD225D    01545                 call bmulc
5C63  C5        01546                 push bc ; bc->de
5C64  D1        01547                 pop de
5C65  DD210000  01548                 ld ix,obj_table
routinesZ80.asm(15): undefined symbol
5C69  DD19      01549                 add ix,de        ; add attr offset to ix
5C6B  1600      01550                 ld d,0           ; create the attr offset
5C6D  5C        01551                 ld e,h  
5C6E  DD19      01552                 add ix,de        ; add attr offset to ix
5C70  DD7E00    01553                 ld a,(ix)    ; finally get the byte
5C73  DDE1      01554                 pop ix
5C75  E1        01555                 pop hl
5C76  D1        01556                 pop de
5C77  C1        01557                 pop bc
5C78  C9        01558                 ret
                01559 
                01560 *MOD
                01561 ;set property c of object b to register a
                01562 set_obj_attr
5C79  C5        01563                 push bc
5C7A  D5        01564                 push de
5C7B  E5        01565                 push hl
5C7C  DDE5      01566                 push ix
5C7E  61        01567                 ld h,c
5C7F  0E13      01568                 ld c,OBJ_ENTRY_SIZE
5C81  CD225D    01569                 call bmulc
5C84  C5        01570                 push bc
5C85  D1        01571                 pop de
5C86  DD210000  01572                 ld ix,obj_table
routinesZ80.asm(39): undefined symbol
5C8A  DD19      01573                 add ix,de        ; add table offset to ix
5C8C  1600      01574                 ld d,0
5C8E  5C        01575                 ld e,h
5C8F  DD19      01576                 add ix,de        ; move to byte
5C91  DD7700    01577                 ld (ix),a    ; finally get the byte
5C94  DDE1      01578                 pop ix
5C96  E1        01579                 pop hl
5C97  D1        01580                 pop de
5C98  C1        01581                 pop bc
5C99  C9        01582                 ret             
                01583                 
                01584 ;returns property c of object b in register a
                01585 ;the property should be 0-15 inclusive
                01586 *MOD
                01587 get_obj_prop
5C9A  C5        01588                 push bc
5C9B  D5        01589                 push de
5C9C  1611      01590                 ld d,PROPERTY_BYTE_1
5C9E  79        01591                 ld a,c ; get the correct byte
5C9F  59        01592                 ld e,c ; save the prop to get (we need it later) 
5CA0  FE08      01593                 cp 8
5CA2  FAA65C    01594                 jp m,$sBS ;jump on minus
5CA5  14        01595                 inc d   ; property is in the next byte
5CA6  4A        01596 $sBS            ld c,d  ; move byte to get to c
5CA7  CD585C    01597                 call get_obj_attr ; put attr byte 'c' in 'a'
5CAA  43        01598             ld b,e      ; put prop to test in 'b'
5CAB  CDDC5C    01599                 call make_prop_mask ; puts mask from pop 'b' in 'b'
5CAE  A0        01600                 and b ; test the bit in the mask (and leave result in 'a')
5CAF  FE00      01601                 cp 0            ;it it's a zero, leave it
5CB1  CAB65C    01602                 jp z,$xBS
5CB4  3E01      01603                 ld a,1          ;conver non zero value to 1
5CB6  D1        01604 $xBS            pop de
5CB7  C1        01605                 pop bc
5CB8  C9        01606                 ret
                01607 
                01608 ;sets property c of object b to val in register 'a'
                01609 ;the property should be 0-15 inclusive
                01610 *MOD
                01611 set_obj_prop
5CB9  C5        01612                 push bc
5CBA  D5        01613                 push de
5CBB  E5        01614                 push hl
5CBC  6F        01615                 ld l,a ; save val
5CBD  1611      01616                 ld d,PROPERTY_BYTE_1
5CBF  79        01617                 ld a,c ; get the correct byte
5CC0  59        01618                 ld e,c ; save the prop to get (we need it later) 
5CC1  FE08      01619                 cp 8
5CC3  FAC75C    01620                 jp m,$sBT ;jump on minus
5CC6  14        01621                 inc d   ; property is in the next byte
5CC7  4A        01622 $sBT            ld c,d  ; move byte to get to c
5CC8  CD585C    01623                 call get_obj_attr ; put attr byte 'c' in 'a'
5CCB  60        01624                 ld h,b  ; save 'b' (the object)
5CCC  43        01625                 ld b,e  ; put prop to test in 'b'
5CCD  CDDC5C    01626                 call make_prop_mask ; puts mask from pop 'b' in 'b'
5CD0  B0        01627                 or b ; test the bit in the mask (and leave result in 'a')
5CD1  44        01628                 ld b,h          ; put obj in 'b'
                01629                 ;ld a,b         ; now set it back (val->a)
5CD2  3E01      01630                 ld a,1
5CD4  4A        01631                 ld c,d          ;the byte to store
5CD5  CD795C    01632                 call set_obj_attr ;  put a
5CD8  E1        01633 $xBT            pop hl
5CD9  D1        01634                 pop de
5CDA  C1        01635                 pop bc
5CDB  C9        01636                 ret
                01637                 
                01638                 
                01639 ;looks up the mask for the property number in b
                01640 ;mask is returned in 'b'
                01641 ;c is not changed
                01642 make_prop_mask
5CDC  D5        01643         push de
5CDD  E5        01644         push hl
5CDE  FDE5      01645         push iy
5CE0  FD21415D  01646         ld iy,mask_table 
5CE4  1600      01647         ld d,0  
5CE6  58        01648         ld e,b
5CE7  FD19      01649         add iy,de
5CE9  FD2B      01650         dec iy 
5CEB  FD4600    01651         ld b,(iy)       ; load mask from table
5CEE  FDE1      01652         pop iy
5CF0  E1        01653         pop hl
5CF1  D1        01654         pop de
5CF2  C9        01655         ret
                01656 
                01657 ;player room in 'a'
                01658 get_player_room
5CF3  C5        01659                 push bc
5CF4  0601      01660                 ld b,PLAYER_ID  
5CF6  0E01      01661                 ld c,HOLDER_ID
5CF8  CD585C    01662                 call get_obj_attr
5CFB  32215D    01663                 ld (player_room),a
5CFE  C1        01664                 pop bc
5CFF  C9        01665                 ret
                01666 
                01667 inside_closed_container
5D00  C9        01668                 ret
                01669                 
                01670 ;put 1 or 0 in a if b is an ancestor of c               
                01671 *MOD
                01672 b_ancestor_of_c
5D01  C5        01673                 push bc
5D02  D5        01674                 push de
5D03  50        01675                 ld d,b ; save parent
5D04  41        01676                 ld b,c ; child object
5D05  0E01      01677                 ld c,HOLDER_ID
5D07  CD585C    01678 $lpBU   call get_obj_attr ; puts holder in a
5D0A  BA        01679                 cp d            ; ancestor found
5D0B  CA1C5D    01680                 jp z,$yBU
5D0E  FE00      01681                 cp 0            ; hit top level - ancestor not found
5D10  CA175D    01682                 jp z,$nBU
5D13  47        01683                 ld b,a          ; is b's parent (reg a) a descendant of c
5D14  C3075D    01684                 jp $lpBU
5D17  3E00      01685 $nBU            ld a,0
5D19  C31E5D    01686                 jp $xBU
5D1C  3E01      01687 $yBU            ld a,1
5D1E  D1        01688 $xBU            pop de
5D1F  C1        01689                 pop bc
5D20  C9        01690                 ret
                01691                 
5D21  00        01692 player_room DB 0
                01693 
                01694 ;multiple b x c and puts result in bc
                01695 ;registers are preserved
                01696 *MOD
                01697 bmulc 
5D22  F5        01698                 push af
5D23  D5        01699                 push de
5D24  DDE5      01700                 push ix
5D26  1600      01701                 ld d,0 ; add c to b times
5D28  59        01702                 ld e,c
5D29  78        01703                 ld a,b ; use  b and loop counter
5D2A  DD210000  01704                 ld ix,0
5D2E  FE00      01705 $lpBV   cp 0
5D30  CA395D    01706                 jp z,$xBV
5D33  DD19      01707                 add ix,de
5D35  3D        01708                 dec a
5D36  C32E5D    01709                 jp $lpBV
5D39  DDE5      01710 $xBV            push ix ; ld bc,ix
5D3B  C1        01711                 pop bc
5D3C  DDE1      01712                 pop ix
5D3E  D1        01713                 pop de
5D3F  F1        01714                 pop af
5D40  C9        01715                 ret
                01716         
                01717 ;table of mask bytes for looking up
                01718 ;properties of objects          
                01719 mask_table
5D41  01        01720         DB SCENERY_MASK ;equ 1 
5D42  02        01721         DB SUPPORTER_MASK ;equ 2
5D43  04        01722         DB CONTAINER_MASK ;equ 4
5D44  08        01723         DB TRANSPARENT_MASK ;equ 8
5D45  10        01724         DB OPENABLE_MASK ;equ 16
5D46  20        01725         DB OPEN_MASK ;equ 32
5D47  40        01726         DB LOCKABLE_MASK ;equ 64
5D48  80        01727         DB LOCKED_MASK ;equ 128
5D49  01        01728         DB PORTABLE_MASK ;equ 1
5D4A  02        01729         DB BACKDROP_MASK ;equ 2
5D4B  04        01730         DB DRINKABLE_MASK ;equ 4
5D4C  08        01731         DB FLAMMABLE_MASK ;equ 8
5D4D  10        01732         DB LIGHTABLE_MASK ;equ 16
5D4E  20        01733         DB LIT_MASK ;equ 32     
5D4F  40        01734         DB DOOR_MASK ;equ 64
5D50  80        01735         DB UNUSED_MASK ;equ 128
                01736 
                01737                 
                01738 *INCLUDE inventoryZ80.asm
                01739 ;inventory_sub
                01740 *MOD
                01741 inventory_sub
5D51  F5        01742                 push af
5D52  3E01      01743                 ld a,PLAYER_ID
5D54  CDC05D    01744                 call has_contents
5D57  FE01      01745                 cp 1
5D59  C26E5D    01746                 jp nz,$nBW
5D5C  21965E    01747                 ld hl,carrying
5D5F  CD6252    01748             call OUTLIN
5D62  CD0F58    01749                 call printcr
5D65  00        01750                 nop; recurse through child items
5D66  3E01      01751                 ld a,PLAYER_ID
5D68  CD795D    01752                 call print_contents
5D6B  C3775D    01753                 jp $xBW         
5D6E  21805E    01754 $nBW            ld hl,noitems
5D71  CD6252    01755             call OUTLIN
5D74  CD0F58    01756                 call printcr
5D77  F1        01757 $xBW            pop af
5D78  C9        01758                 ret
                01759 
                01760 ;prints contains of obj in 'a'
                01761 *MOD
                01762 print_contents
5D79  C5        01763                 push bc
5D7A  D5        01764                 push de
5D7B  E5        01765                 push hl
5D7C  DDE5      01766                 push ix
5D7E  47        01767                 ld b,a  ; save parent
5D7F  111300    01768                 ld de,OBJ_ENTRY_SIZE
5D82  DD210000  01769                 ld ix,obj_table
inventoryZ80.asm(31): undefined symbol
5D86  DD7E00    01770 $lpBX   ld a,(ix)
5D89  FEFF      01771                 cp 0ffh
5D8B  CAB95D    01772                 jp z,$xBX
5D8E  DD7E01    01773                 ld a,(ix+HOLDER_ID)
5D91  B8        01774                 cp b
5D92  C2B45D    01775                 jp nz,$cBX
5D95  DDCB1146  01776                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)  ; test scenery bit
5D99  C2B45D    01777                 jp nz,$cBX
5D9C  DD7E00    01778                 ld a,(ix)
5D9F  CDBB57    01779                 call print_obj_name
5DA2  CD0F58    01780                 call printcr
5DA5  00        01781                 nop ; need to test container/supporter
5DA6  DDCB1156  01782                 bit CONTAINER_BIT,(ix+PROPERTY_BYTE_1)
5DAA  CC3E5E    01783                 call z,print_container_contents
5DAD  DDCB114E  01784                 bit SUPPORTER_BIT,(ix+PROPERTY_BYTE_1)
5DB1  CC575E    01785                 call z,print_supporter_contents
5DB4  DD19      01786 $cBX            add ix,de
5DB6  C3865D    01787                 jp $lpBX
5DB9  47        01788 $xBX            ld b,a  ; found flag->a
5DBA  DDE1      01789                 pop ix
5DBC  E1        01790                 pop hl
5DBD  D1        01791                 pop de
5DBE  C1        01792                 pop bc          
5DBF  C9        01793                 ret
                01794                 
                01795 ;if 'a' has any visible items
                01796 ;1 is returned in 'a' otherwise 0
                01797 *MOD
                01798 has_contents
5DC0  C5        01799                 push bc
5DC1  D5        01800                 push de
5DC2  E5        01801                 push hl
5DC3  DDE5      01802                 push ix
5DC5  67        01803                 ld h,a
5DC6  0600      01804                 ld b,0  ; found flag
5DC8  111300    01805                 ld de,OBJ_ENTRY_SIZE
5DCB  DD210000  01806                 ld ix,obj_table
inventoryZ80.asm(68): undefined symbol
5DCF  DD7E00    01807 $lpBY   ld a,(ix)
5DD2  FEFF      01808                 cp 0ffh
5DD4  CAEF5D    01809                 jp z,$xBY
5DD7  DD7E01    01810                 ld a,(ix+HOLDER_ID)
5DDA  BC        01811                 cp h
5DDB  C2EA5D    01812                 jp nz,$cBY
5DDE  DDCB1146  01813                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)  ; test scenery bit
5DE2  C2EA5D    01814                 jp nz,$cBY
5DE5  3E01      01815                 ld a,1
5DE7  C3EF5D    01816                 jp $xBY
5DEA  DD19      01817 $cBY            add ix,de
5DEC  C3CF5D    01818                 jp $lpBY
5DEF  47        01819 $xBY            ld b,a  ; found flag->a
5DF0  DDE1      01820                 pop ix
5DF2  E1        01821                 pop hl
5DF3  D1        01822                 pop de
5DF4  C1        01823                 pop bc
5DF5  C9        01824                 ret
                01825 *MOD            
                01826 get_sub
5DF6  F5        01827                 push af
5DF7  C5        01828                 push bc
5DF8  D5        01829                 push de
5DF9  E5        01830                 push hl
5DFA  DDE5      01831                 push ix
5DFC  FDE5      01832                 push iy
                01833 ;               ld a,(sentence+1) ; get dobj
                01834 ;               ld b,a
                01835 ;               ld c,PORTABLE
                01836 ;               call get_obj_prop
                01837 ;               cp 1
                01838 ;               jp z,$y?
                01839 ;               ld hl,notportable
                01840 ;               call OUTLIN
                01841 ;               call printcr
                01842 ;               jp $x? 
                01843 ;$y?            nop ; is it a child of the player already?
                01844 ;               ld a,(sentence+1)
                01845 ;               ld c,a
                01846 ;               ld b,PLAYER_ID
                01847 ;               call b_ancestor_of_c
                01848 ;               cp 0
                01849 ;               jp z,$y1?
                01850 ;               ld hl,alreadyhave
                01851 ;               call OUTLIN
                01852 ;               call printcr
                01853 ;               jp $x?
5DFE  00        01854 $y1BZ   nop; move to player
5DFF  3A6356    01855                 ld a,(sentence+1)  ; get dobj
5E02  47        01856                 ld b,a
5E03  0E01      01857                 ld c,HOLDER_ID
5E05  3E01      01858                 ld a,PLAYER_ID
5E07  CD795C    01859                 call set_obj_attr
5E0A  00        01860                 nop ; clear initial description
5E0B  0E02      01861                 ld c,INITIAL_DESC_ID
5E0D  3EFF      01862                 ld a,255
5E0F  CD795C    01863                 call set_obj_attr               
5E12  21705E    01864                 ld hl,taken
5E15  CD6252    01865                 call OUTLIN
5E18  CD0F58    01866                 call printcr
5E1B  FDE1      01867 $xBZ            pop iy
5E1D  DDE1      01868                 pop ix
5E1F  E1        01869                 pop hl
5E20  D1        01870                 pop de
5E21  C1        01871                 pop bc
5E22  F1        01872                 pop af
5E23  C9        01873                 ret
                01874                 
                01875 *MOD
                01876 drop_sub
5E24  F5        01877                 push af
5E25  C5        01878                 push bc
                01879 ;               nop ; does player have it
                01880 ;               ld a,(sentence+1)
                01881 ;               ld c,a
                01882 ;               ld b,PLAYER_ID
                01883 ;               call b_ancestor_of_c
                01884 ;               cp 1
                01885 ;               jp z,$y?
                01886 ;               ld hl,donthave
                01887 ;               call OUTLIN
                01888 ;               call printcr
                01889 ;               jp $x?
5E26  3A6356    01890 $yCA            ld a,(sentence+1)
5E29  47        01891                 ld b,a
5E2A  0E01      01892                 ld c,HOLDER_ID
5E2C  CDF35C    01893                 call get_player_room
5E2F  CD795C    01894                 call set_obj_attr
5E32  21775E    01895                 ld hl,dropped
5E35  CD6252    01896                 call OUTLIN
5E38  CD0F58    01897                 call printcr
5E3B  C1        01898 $xCA            pop bc
5E3C  F1        01899                 pop af
5E3D  C9        01900                 ret
                01901 
                01902 *MOD            
                01903 ;print contents of container in 'a'
                01904 print_container_contents
5E3E  C5        01905                 push bc
5E3F  E5        01906                 push hl
5E40  CDC05D    01907                 call has_contents
5E43  FE01      01908                 cp 1
5E45  C2545E    01909                 jp nz,$xCB
5E48  21B45E    01910                 ld hl,initis
5E4B  CD6252    01911                 call OUTLIN
5E4E  CD0F58    01912                 call printcr
5E51  CD795D    01913                 call print_contents
5E54  E1        01914 $xCB            pop hl
5E55  C1        01915                 pop bc
5E56  C9        01916                 ret
                01917 
                01918 *MOD            
                01919 ;print contents of container in 'a'
                01920 print_supporter_contents
5E57  C5        01921                 push bc
5E58  E5        01922                 push hl
5E59  CDC05D    01923                 call has_contents
5E5C  FE01      01924                 cp 1
5E5E  C26D5E    01925                 jp nz,$xCC
5E61  21A85E    01926                 ld hl,onitis
5E64  CD6252    01927                 call OUTLIN
5E67  CD0F58    01928                 call printcr
5E6A  CD795D    01929                 call print_contents
5E6D  E1        01930 $xCC            pop hl
5E6E  C1        01931                 pop bc
5E6F  C9        01932                 ret
                01933                 
5E70  54414B45  01934 taken DB "TAKEN.",0h            
      4E 2E 00               
5E77  44524F50  01935 dropped DB "DROPPED.",0h
      50 45 44 2E 00         
5E80  594F5520  01936 noitems DB "YOU ARE EMPTY HANDED.",0h
      41 52 45 20 45 4D 50 54
      59 20 48 41 4E 44 45 44
      2E 00                  
5E96  594F5520  01937 carrying DB "YOU ARE CARRYING:",0h
      41 52 45 20 43 41 52 52
      59 49 4E 47 3A 00      
5EA8  4F4E2049  01938 onitis DB "ON IT IS...",0h;
      54 20 49 53 2E 2E 2E 00
5EB4  494E2049  01939 initis DB "IN IT IS...",0h;
      54 20 49 53 2E 2E 2E 00
5EC0  594F5520  01940 notportable DB "YOU CAN'T PICK THAT UP.",0h
      43 41 4E 27 54 20 50 49
      43 4B 20 54 48 41 54 20
      55 50 2E 00            
5ED8  594F5520  01941 alreadyhave DB "YOU ALREADY HAVE THAT.",0h
      41 4C 52 45 41 44 59 20
      48 41 56 45 20 54 48 41
      54 2E 00               
                01942 
                01943 *INCLUDE open_close.asm
                01944 
                01945 ; machine generate Z80 routine from XML file
                01946 *MOD
                01947 open_sub
5EEF  F5        01948         push af
5EF0  C5        01949         push bc
5EF1  D5        01950         push de
5EF2  DDE5      01951         push ix
5EF4  3A6356    01952         ld a,(sentence+1)
5EF7  47        01953         ld b,a
5EF8  0E13      01954         ld c, 19
5EFA  CD225D    01955         call bmulc
5EFD  DD210000  01956         ld ix,obj_table
open_close.asm(13): undefined symbol
5F01  DD09      01957         add ix,bc ; jump to object
5F03  011100    01958         ld bc,PROPERTY_BYTE_1 ; get prop byte
5F06  DD09      01959         add ix,bc ; jump to the object's byte we need
5F08  DDCB0066  01960         bit OPENABLE_BIT,(ix) ; test openable prop bit
5F0C  CA4E5F    01961         jp z,$aCD
5F0F  DDCB006E  01962         bit OPEN_BIT,(ix) ; test open prop bit
5F13  C23F5F    01963         jp nz,$bCD
5F16  DDCB007E  01964         bit LOCKED_BIT,(ix) ; test locked prop bit
5F1A  C2305F    01965         jp nz,$cCD
5F1D  DD7E00    01966         ld a,(ix)
5F20  DDCB00EE  01967         set OPEN_BIT,(ix)
5F24  21F25B    01968         ld hl,done
5F27  CD6252    01969         call OUTLIN
5F2A  CD0F58    01970         call printcr ; newline
5F2D  C33B5F    01971         jp $dCD ; skip else 
5F30  00        01972 $cCD    nop ; close ($dobj.locked == 0)
5F31  00        01973         nop ; println("IT'S LOCKED.")
5F32  21F85B    01974         ld hl,itslocked
5F35  CD6252    01975         call OUTLIN
5F38  CD0F58    01976         call printcr ; newline
5F3B  00        01977 $dCD    nop ; end else
5F3C  C34A5F    01978         jp $eCD ; skip else 
5F3F  00        01979 $bCD    nop ; close ($dobj.open == 0)
5F40  00        01980         nop ; {  println("IT'S ALREADY OPEN.")
5F41  21055C    01981         ld hl,alreadyopen
5F44  CD6252    01982         call OUTLIN
5F47  CD0F58    01983         call printcr ; newline
5F4A  00        01984 $eCD    nop ; end else
5F4B  C3595F    01985         jp $fCD ; skip else 
5F4E  00        01986 $aCD    nop ; close ($dobj.openable==1)
5F4F  00        01987         nop ; println("THAT'S NOT OPENABLE.")
5F50  21435C    01988         ld hl,notopenable
5F53  CD6252    01989         call OUTLIN
5F56  CD0F58    01990         call printcr ; newline
5F59  00        01991 $fCD    nop ; end else
5F5A  DDE1      01992         pop ix
5F5C  D1        01993         pop de
5F5D  C1        01994         pop bc
5F5E  F1        01995         pop af
5F5F  C9        01996         ret
                01997 
                01998 
                01999 ; machine generate Z80 routine from XML file
                02000 *MOD
                02001 close_sub
5F60  F5        02002         push af
5F61  C5        02003         push bc
5F62  D5        02004         push de
5F63  DDE5      02005         push ix
5F65  3A6356    02006         ld a,(sentence+1)
5F68  47        02007         ld b,a
5F69  0E13      02008         ld c, 19
5F6B  CD225D    02009         call bmulc
5F6E  DD210000  02010         ld ix,obj_table
open_close.asm(67): undefined symbol
5F72  DD09      02011         add ix,bc ; jump to object
5F74  011100    02012         ld bc,PROPERTY_BYTE_1 ; get prop byte
5F77  DD09      02013         add ix,bc ; jump to the object's byte we need
5F79  DDCB0066  02014         bit OPENABLE_BIT,(ix) ; test openable prop bit
5F7D  CAAA5F    02015         jp z,$aCE
5F80  DDCB006E  02016         bit OPEN_BIT,(ix) ; test open prop bit
5F84  CA9B5F    02017         jp z,$bCE
5F87  DDCB00AE  02018         res OPEN_BIT,(ix)
                02019         ;ld a,OPEN_BIT
                02020         ;cpl 
                02021         ;and (ix) ; and (ix) into acc
                02022         ;ld (ix),a
5F8B  21F25B    02023         ld hl,done
5F8E  CD6252    02024         call OUTLIN     
5F91  CD0F58    02025         call printcr ; newline
5F94  C3975F    02026         jp $dCE ; skip else 
5F97  00        02027 $dCE    nop ; end else
5F98  C3A65F    02028         jp $eCE ; skip else 
5F9B  00        02029 $bCE    nop ; close ($dobj.open == 0)
5F9C  00        02030         nop ; {  println("IT'S ALREADY CLOSED.")
5F9D  21185C    02031         ld hl,alreadyclosed
5FA0  CD6252    02032         call OUTLIN
5FA3  CD0F58    02033         call printcr ; newline
5FA6  00        02034 $eCE    nop ; end else
5FA7  C3B55F    02035         jp $fCE ; skip else 
5FAA  00        02036 $aCE    nop ; close ($dobj.openable==1)
5FAB  00        02037         nop ; println("THAT'S NOT CLOSEABLE.")
5FAC  212D5C    02038         ld hl,notcloseable
5FAF  CD6252    02039         call OUTLIN
5FB2  CD0F58    02040         call printcr ; newline
5FB5  00        02041 $fCE    nop ; end else
5FB6  DDE1      02042         pop ix
5FB8  D1        02043         pop de
5FB9  C1        02044         pop bc
5FBA  F1        02045         pop af
5FBB  C9        02046         ret
                02047 
                02048 *MOD
                02049 lock_sub
5FBC  F5        02050                 push af
5FBD  C5        02051                 push bc
5FBE  D5        02052                 push de
5FBF  DDE5      02053                 push ix
5FC1  3A6356    02054                 ld a,(sentence+1)
5FC4  47        02055                 ld b,a
5FC5  0E13      02056                 ld c, 19
5FC7  CD225D    02057                 call bmulc
5FCA  DD210000  02058                 ld ix,obj_table
open_close.asm(115): undefined symbol
5FCE  DD09      02059                 add ix,bc ; jump to object
5FD0  011200    02060                 ld bc,PROPERTY_BYTE_2 ; get prop byte
5FD3  DD09      02061                 add ix,bc ; jump to the object's byte we need
5FD5  DDCB0076  02062                 bit LOCKABLE_BIT,(ix) ; test openable prop bit
5FD9  CAF05F    02063                 jp z,$nlCF
5FDC  DDCB007E  02064                 bit LOCKED_BIT,(ix) ; test open prop bit
5FE0  CAFC5F    02065                 jp z,$alCF
5FE3  DDCB00FE  02066                 set LOCKED_BIT,(ix)
5FE7  21F25B    02067                 ld hl,done
5FEA  CD6252    02068                 call OUTLIN
5FED  CD0F58    02069                 call printcr
5FF0  210C60    02070 $nlCF   ld hl,notlockable
5FF3  CD6252    02071                 call OUTLIN
5FF6  CD0F58    02072                 call printcr
5FF9  C30560    02073                 jp $xCF 
5FFC  212160    02074 $alCF   ld hl,alreadylocked
5FFF  CD6252    02075                 call OUTLIN
6002  CD0F58    02076                 call printcr
6005  DDE1      02077 $xCF            pop ix
6007  D1        02078                 pop de
6008  C1        02079                 pop bc
6009  F1        02080                 pop af
600A  C9        02081                 ret     
                02082 *MOD            
                02083 unlock_sub
600B  C9        02084         ret
                02085 
600C  54484154  02086 notlockable DB "THAT'S NOT LOCKABLE.",0h        
      27 53 20 4E 4F 54 20 4C
      4F 43 4B 41 42 4C 45 2E
      00                     
6021  49542753  02087 alreadylocked DB "IT'S ALREADY LOCKED.",0h
      20 41 4C 52 45 41 44 59
      20 4C 4F 43 4B 45 44 2E
      00                     
                02088 ;alreadyopen DB "IT'S ALREADY OPEN.",0h
                02089 
                02090 *INCLUDE put.asm
                02091 ;put.asm
                02092 
                02093 *MOD
                02094 put_sub
6036  C5        02095                 push bc
6037  D5        02096                 push de
6038  E5        02097                 push hl
6039  DDE5      02098                 push ix
603B  3A6556    02099                 ld a,(sentence+3)
603E  FEFF      02100                 cp 0ffh  ; io supplied
6040  CAA760    02101                 jp z,$bpCH
6043  DD210000  02102                 ld ix,obj_table
put.asm(12): undefined symbol
6047  111100    02103                 ld de,PROPERTY_BYTE_1
604A  3A6356    02104                 ld a,(sentence+1)
604D  47        02105                 ld b,a
604E  0E13      02106                 ld c,OBJ_ENTRY_SIZE
6050  CD225D    02107                 call bmulc
6053  DD09      02108                 add ix,bc
6055  DD19      02109                 add ix,de  ; ix now has container supporter byte
6057  3A6456    02110                 ld a,(sentence+2)
605A  FE00      02111                 cp 0  ; 0=in
605C  CA6760    02112                 jp z,$piCH
605F  FE06      02113                 cp 6  ; 6=on
6061  CA7360    02114                 jp z,$poCH
6064  C3A760    02115                 jp $bpCH
6067  00        02116 $piCH   nop ; is do a container?                
6068  DDCB0056  02117                 bit CONTAINER_BIT,(ix)
606C  CAB360    02118                 jp z,$ncCH
606F  00        02119                 nop ; ? is it closed
6070  C38760    02120                 jp $mvCH
6073  00        02121 $poCH   nop ; is do a supporter?
6074  DDCB004E  02122                 bit SUPPORTER_BIT,(ix)
6078  CACB60    02123                 jp z,$nsCH
607B  C38760    02124                 jp $mvCH
607E  00        02125                 nop ; check nested containership
607F  CD015A    02126                 call check_nested_containership
6082  FE01      02127                 cp 1  ; 1 = invalid (message was printed)
6084  CAD460    02128                 jp z,$xCH
6087  0E01      02129 $mvCH    ld c,HOLDER
6089  3A6556    02130                 ld a,(sentence+3)
608C  CD795C    02131                 call set_obj_attr
608F  21F25B    02132                 ld hl,done
6092  CD6252    02133                 call OUTLIN
6095  CD0F58    02134                 call printcr
6098  C3D460    02135                 jp  $xCH
609B  21E860    02136 $clsdCH  ld hl,badput
609E  CD6252    02137                 call OUTLIN
60A1  CD0F58    02138                 call printcr
60A4  C3D460    02139                 jp $xCH
60A7  21E860    02140 $bpCH   ld hl,badput
60AA  CD6252    02141                 call OUTLIN
60AD  CD0F58    02142                 call printcr
60B0  C3D460    02143                 jp $xCH
60B3  211161    02144 $ncCH   ld hl,notcontainer
60B6  CD6252    02145                 call OUTLIN
60B9  CD0F58    02146                 call printcr            
60BC  C3D460    02147                 jp $xCH
60BF  214D61    02148 $npCH    ld hl,impossible
60C2  CD6252    02149                 call OUTLIN
60C5  CD0F58    02150                 call printcr            
60C8  C3D460    02151                 jp $xCH;                
60CB  212F61    02152 $nsCH   ld hl,notsupporter
60CE  CD6252    02153                 call OUTLIN
60D1  CD0F58    02154                 call printcr            
60D4  DDE1      02155 $xCH            pop ix
60D6  E1        02156                 pop hl
60D7  D1        02157                 pop de
60D8  C1        02158                 pop bc
60D9  C9        02159                 ret
                02160 
60DA  49542049  02161 closed DB "IT IS CLOSED.",0h    
      53 20 43 4C 4F 53 45 44
      2E 00                  
60E8  5452593A  02162 badput DB "TRY: PUT SOMETHING IN/ON SOMETHING ELSE.",0h 
      20 50 55 54 20 53 4F 4D
      45 54 48 49 4E 47 20 49
      4E 2F 4F 4E 20 53 4F 4D
      45 54 48 49 4E 47 20 45
      4C 53 45 2E 00         
6111  594F5520  02163 notcontainer DB "YOU CAN'T PUT THINGS IN THAT.",0h
      43 41 4E 27 54 20 50 55
      54 20 54 48 49 4E 47 53
      20 49 4E 20 54 48 41 54
      2E 00                  
612F  594F5520  02164 notsupporter DB "YOU FIND NO SUITABLE SURFACE.",0h
      46 49 4E 44 20 4E 4F 20
      53 55 49 54 41 42 4C 45
      20 53 55 52 46 41 43 45
      2E 00                  
614D  54484154  02165 impossible DB "THAT'S NOT PHYSICALLY POSSIBLE.",0h
      27 53 20 4E 4F 54 20 50
      48 59 53 49 43 41 4C 4C
      59 20 50 4F 53 53 49 42
      4C 45 2E 00            
                02166 *INCLUDE miscZ80.asm
                02167 
                02168 
                02169                 
                02170 quit_sub
616D  C9        02171                 ret
                02172 *INCLUDE print_rets.asm
                02173 ;z80 - print returns
                02174 ;these are long jumped to, not 'called'
                02175 
                02176 print_ret_pardon
616E  21B262    02177         ld hl,pardon
6171  CD6252    02178         call OUTLIN
6174  CD0F58    02179         call printcr
6177  C9        02180         ret
                02181 
                02182 print_ret_no_io
6178  217562    02183         ld hl,missing_io 
617B  CD6252    02184         call OUTLIN
617E  CD0F58    02185         call printcr
6181  C9        02186         ret
                02187         
                02188         
                02189 print_ret_bad_verb
6182  215D62    02190         ld hl,badverb
6185  CD6252    02191         call OUTLIN
6188  215C55    02192         ld hl,word1
618B  CD6252    02193         call OUTLIN
618E  21BA62    02194         ld hl,period
6191  CD6252    02195         call OUTLIN     
6194  CD0F58    02196         call printcr
6197  C9        02197         ret
                02198 
                02199 print_ret_bad_do
6198  214062    02200         ld hl,badnoun
619B  CD6252    02201         call OUTLIN
619E  217C55    02202         ld hl,word2
61A1  CD6252    02203         call OUTLIN
61A4  21BA62    02204         ld hl,period
61A7  CD6252    02205         call OUTLIN     
61AA  CD0F58    02206         call printcr
61AD  C9        02207         ret
                02208 
                02209 print_ret_bad_io
61AE  214062    02210         ld hl,badnoun
61B1  CD6252    02211         call OUTLIN
61B4  21BC55    02212         ld hl,word4
61B7  CD6252    02213         call OUTLIN
61BA  21BA62    02214         ld hl,period
61BD  CD6252    02215         call OUTLIN     
61C0  CD0F58    02216         call printcr
61C3  C9        02217         ret
                02218 
                02219 print_ret_dont_see
61C4  21F461    02220         ld hl,dontsee
61C7  CD6252    02221         call OUTLIN
61CA  CD0F58    02222         call printcr
61CD  C9        02223         ret     
                02224 
                02225 print_ret_donthave
61CE  210862    02226         ld hl,donthave
61D1  CD6252    02227         call OUTLIN
61D4  CD0F58    02228         call printcr
61D7  C9        02229         ret
                02230 
                02231 print_ret_not_openable
61D8  211D62    02232         ld hl,cantopen
61DB  CD6252    02233         call OUTLIN
61DE  CD0F58    02234         call printcr
61E1  C9        02235         ret
                02236         
                02237         
                02238         
61E2  49542049  02239 pitchdark DB "IT IS PITCH DARK.",0h
      53 20 50 49 54 43 48 20
      44 41 52 4B 2E 00      
61F4  594F5520  02240 dontsee DB "YOU DON'T SEE THAT.",0h
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
6208  594F5520  02241 donthave DB "YOU DON'T HAVE THAT.",0h
      44 4F 4E 27 54 20 48 41
      56 45 20 54 48 41 54 2E
      00                     
621D  54484154  02242 cantopen DB "THAT'S N0T SOMETHING YOU CAN OPEN.",0h
      27 53 20 4E 30 54 20 53
      4F 4D 45 54 48 49 4E 47
      20 59 4F 55 20 43 41 4E
      20 4F 50 45 4E 2E 00   
6240  4920444F  02243 badnoun DB "I DON'T RECOGNIZE THE WORD '",0h ; null     
      4E 27 54 20 52 45 43 4F
      47 4E 49 5A 45 20 54 48
      45 20 57 4F 52 44 20 27
      00                     
625D  4920444F  02244 badverb DB "I DON'T KNOW THE VERB '", 0 ; null  
      4E 27 54 20 4B 4E 4F 57
      20 54 48 45 20 56 45 52
      42 20 27 00            
6275  4954204C  02245 missing_io DB "IT LOOKS LIKE YOU ARE MISSING THE OBJECT OF THE PREPOSITION.", 0h
      4F 4F 4B 53 20 4C 49 4B
      45 20 59 4F 55 20 41 52
      45 20 4D 49 53 53 49 4E
      47 20 54 48 45 20 4F 42
      4A 45 43 54 20 4F 46 20
      54 48 45 20 50 52 45 50
      4F 53 49 54 49 4F 4E 2E
      00                     
62B2  50415244  02246 pardon DB "PARDON",3fh,0 ; null
      4F 4E 3F 00            
62BA  272E00    02247 period DB "'.", 0 ; null
                02248                 
                02249 *INCLUDE EventsZ80.asm
main.asm(63): unable to include file
                02250 *INCLUDE articlesZ80.asm
                02251 ;;;;;;;;;;;;;;;;;;;;;;;
                02252 ;article table
                02253 ;1st byte is length number
                02254 ;;;;;;;;;;;;;;;;;;;;;;;
                02255 article_table
62BD  03        02256         DB 3
62BE  544845    02257         DB "THE"
62C1  00        02258         DB 0
62C2  01        02259         DB 1
62C3  41        02260         DB "A"
62C4  00        02261         DB 0
62C5  02        02262         DB 2
62C6  414E      02263         DB "AN"
62C8  00        02264         DB 0
62C9  FF        02265         DB 255
                02266 *INCLUDE PrepTableZ80.asm
main.asm(65): unable to include file
                02267 *INCLUDE StringTableZ80.asm
main.asm(66): unable to include file
                02268 *INCLUDE DictionaryZ80.asm
main.asm(67): unable to include file
                02269 *INCLUDE VerbTableZ80.asm
main.asm(68): unable to include file
                02270 *INCLUDE ObjectTableZ80.asm
main.asm(69): unable to include file
                02271 *INCLUDE ObjectWordTableZ80.asm
main.asm(70): unable to include file
                02272 *INCLUDE NogoTableZ80.asm
main.asm(71): unable to include file
                02273 *INCLUDE BackDropTableZ80.asm
main.asm(72): unable to include file
                02274 *INCLUDE before_table_Z80.asm
main.asm(73): unable to include file
                02275 *INCLUDE instead_table_Z80.asm
main.asm(74): unable to include file
                02276 *INCLUDE after_table_Z80.asm
main.asm(75): unable to include file
                02277 *INCLUDE CheckRulesZ80.asm
main.asm(76): unable to include file
                02278 *INCLUDE sentence_tableZ80.asm
                02279 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                02280 ;sentence jump table
                02281 ;this is not machine generated
                02282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                02283 sentence_table 
62CA  00        02284         DB look_verb_id
sentence_tableZ80.asm(6): undefined symbol
62CB  6A56      02285         DW look_sub
62CD  00        02286         DB inventory_verb_id
sentence_tableZ80.asm(8): undefined symbol
62CE  515D      02287         DW inventory_sub
62D0  00        02288         DB n_verb_id
sentence_tableZ80.asm(10): undefined symbol
62D1  505B      02289         DW move_player
62D3  00        02290         DB ne_verb_id
sentence_tableZ80.asm(12): undefined symbol
62D4  505B      02291         DW move_player
62D6  00        02292         DB nw_verb_id
sentence_tableZ80.asm(14): undefined symbol
62D7  505B      02293         DW move_player  
62D9  00        02294         DB s_verb_id
sentence_tableZ80.asm(16): undefined symbol
62DA  505B      02295         DW move_player
62DC  00        02296         DB e_verb_id
sentence_tableZ80.asm(18): undefined symbol
62DD  505B      02297         DW move_player
62DF  00        02298         DB w_verb_id
sentence_tableZ80.asm(20): undefined symbol
62E0  505B      02299         DW move_player
62E2  00        02300         DB se_verb_id
sentence_tableZ80.asm(22): undefined symbol
62E3  505B      02301         DW move_player  
62E5  00        02302         DB sw_verb_id
sentence_tableZ80.asm(24): undefined symbol
62E6  505B      02303         DW move_player  
62E8  00        02304         DB up_verb_id
sentence_tableZ80.asm(26): undefined symbol
62E9  505B      02305         DW move_player  
62EB  00        02306         DB down_verb_id
sentence_tableZ80.asm(28): undefined symbol
62EC  505B      02307         DW move_player  
62EE  00        02308         DB get_verb_id
sentence_tableZ80.asm(30): undefined symbol
62EF  F65D      02309         DW get_sub
62F1  00        02310         DB out_verb_id
sentence_tableZ80.asm(32): undefined symbol
62F2  505B      02311         DW move_player  
62F4  00        02312         DB enter_verb_id
sentence_tableZ80.asm(34): undefined symbol
62F5  B85B      02313         DW enter_sub
62F7  00        02314         DB drop_verb_id
sentence_tableZ80.asm(36): undefined symbol
62F8  245E      02315         DW drop_sub
62FA  00        02316         DB examine_verb_id
sentence_tableZ80.asm(38): undefined symbol
62FB  6457      02317         DW look_at_sub
62FD  00        02318         DB put_verb_id
sentence_tableZ80.asm(40): undefined symbol
62FE  3660      02319         DW put_sub
6300  00        02320         DB open_verb_id
sentence_tableZ80.asm(42): undefined symbol
6301  EF5E      02321         DW open_sub
6303  00        02322         DB close_verb_id
sentence_tableZ80.asm(44): undefined symbol
6304  605F      02323         DW close_sub    
6306  00        02324         DB smell_verb_id
sentence_tableZ80.asm(46): undefined symbol
6307  0000      02325         DW smell_sub
sentence_tableZ80.asm(47): undefined symbol
6309  00        02326         DB listen_verb_id
sentence_tableZ80.asm(48): undefined symbol
630A  0000      02327         DW listen_sub
sentence_tableZ80.asm(49): undefined symbol
630C  00        02328         DB enter_verb_id
sentence_tableZ80.asm(50): undefined symbol
630D  B85B      02329         DW enter_sub
630F  00        02330         DB quit_verb_id
sentence_tableZ80.asm(52): undefined symbol
6310  6D61      02331         DW quit_sub
6312  00        02332         DB lock_verb_id
sentence_tableZ80.asm(54): undefined symbol
6313  BC5F      02333         DW lock_sub
6315  00        02334         DB unlock_verb_id
sentence_tableZ80.asm(56): undefined symbol
6316  0B60      02335         DW unlock_sub
6318  FF        02336         DB 255
                02337         
                02338 
                02339 *INCLUDE WelcomeZ80.asm
main.asm(78): unable to include file
                02340 *INCLUDE UserVarsZ80.asm
main.asm(79): unable to include file
6319  00        02341 score DB 0
631A  00        02342 gameOver DB 0
                02343 
                02344         END START


$ACD            5F4E  $ACE            5FAA  $ALCF           5FFC  
$BCD            5F3F  $BCE            5F9B  $BPCH           60A7  
$CBJ            5A62  $CBK            5AE0  $CBL            5B17  
$CBX            5DB4  $CBY            5DEA  $CCD            5F30  
$CLSDCH         609B  $CM             56AF  $CNTF           5412  
$CT             587F  $DBJ            5A6B  $DCBN           5B9D  
$DCD            5F3B  $DCE            5F97  $DOJ            54B5  
$ECD            5F4A  $ECE            5FA6  $FCD            5F59  
$FCE            5FB5  $GO2BN          5BA9  $GOBN           5B75  
$INP?           5224  $IOJ            54DB  $LP             53E4  
$LP?            526A  $LPA            5286  $LPBJ           5A42  
$LPBL           5AF4  $LPBU           5D07  $LPBV           5D2E  
$LPBX           5D86  $LPBY           5DCF  $LPD            5337  
$LPM            5686  $LPO            571D  $LPP            5758  
$LPT            5859  $LPU            58A6  $LPV            58D9  
$LPX            5916  $MVCH           6087  $NBH            5A1C  
$NBM            0000  $NBU            5D17  $NBW            5D6E  
$NCCH           60B3  $NFT            5890  $NLCF           5FF0  
$NN             56EF  $NO             5750  $NPCH           60BF  
$NSCH           60CB  $NX             5931  $NXTBJ          5A60  
$NXTBK          5AD8  $NXTBL          5B14  $PICH           6067  
$POCH           6073  $SBS            5CA6  $SBT            5CC7  
$SKPO           5746  $W4I            5484  $X?             5277  
$XBA            597D  $XBB            5997  $XBC            59B1  
$XBD            59CB  $XBE            59E5  $XBF            59FF  
$XBG            5A00  $XBH            5A27  $XBK            5AE6  
$XBL            5B1C  $XBN            5BB3  $XBS            5CB6  
$XBT            5CD8  $XBU            5D1E  $XBV            5D39  
$XBW            5D77  $XBX            5DB9  $XBY            5DEF  
$XBZ            5E1B  $XC             532F  $XCA            5E3B  
$XCB            5E54  $XCC            5E6D  $XCF            6005  
$XCH            60D4  $XD             5372  $XE             539F  
$XF             5417  $XI             549B  $XJ             54FD  
$XL             5536  $XM             56B4  $XN             5704  
$XO             5752  $XP             5760  $XU             58CB  
$XV             58E4  $XX             5933  $XY             5945  
$XZ             5963  $Y1BZ           5DFE  $YBU            5D1C  
$YCA            5E26  $YE             53A2  $YO             574B  
$YX             592C  $_LP            5402  $_LPF           541E  
$_LPS           5822  $_NFS           5848  $_X             543B  
$_XB            5302  $_XS            584A  $_XT            5892  
$_XW            590B  $_YT            588A  @LPBK           5A9E  
ACTIONS_TABLE   0000  ACTION_RUN      5AEC  ALREADYCLOSED   5C18  
ALREADYHAVE     5ED8  ALREADYLOCKED   6021  ALREADYOPEN     5C05  
ANY_OBJECT      00FE  ARTICLE_TABLE   62BD  ATOUPPER        5939  
AUTHOR          0000  BACKDROP        000A  BACKDROP_MASK   0002  
BADNOUN         6240  BADPUT          60E8  BADVERB         625D  
BMULC           5D22  BUFSIZE         0030  B_ANCESTOR_OF_C 5D01  
CANTOPEN        621D  CARRYING        5E96  CHECK_DOBJ_CLOS 59E6  
CHECK_DOBJ_OPEN 59B2  CHECK_DOBJ_OPNA 5998  CHECK_DOBJ_PORT 594A  
CHECK_DOBJ_SUPP 5948  CHECK_DONT_HAVE 597E  CHECK_HAVE_DOBJ 5964  
CHECK_IOBJ_SUPP 5949  CHECK_NESTED_CO 5A01  CHECK_NOT_LOCKE 59CC  
CHECK_NOT_SELF_ 5A00  CHECK_PREP_SUPP 5A29  CHECK_SEE_DOBJ  5946  
CHECK_SEE_IOBJ  5947  CHECK_TABLE     0000  CLEAR_BUFFERS   53CB  
CLOSED          60DA  CLOSE_SUB       5F60  CLOSE_VERB_ID   0000  
CLRBUF          5280  CLS             01C9  CONTAINER       0003  
CONTAINER_BIT   0002  CONTAINER_MASK  0004  COPYDEST        565C  
COUNT_VISIBLE_O 5753  CRTBYTE         0033  DBGPF           5538  
DBGSA           5547  DESC_ID         0003  DICTIONARY      0000  
DIRECTION_MAP   5BD1  DONE            5BF2  DONTHAVE        6208  
DONTSEE         61F4  DOOR            000F  DOORCLOSED      5BDE  
DOOR_BIT        0006  DOOR_MASK       0040  DOWN            000D  
DOWN_VERB_ID    0000  DOWORDID        5668  DO_EVENTS       5249  
DRINKABLE       000B  DRINKABLE_BIT   0002  DRINKABLE_MASK  0004  
DROPPED         5E77  DROP_SUB        5E24  DROP_VERB_ID    0000  
EAST            0006  EDIBLE_BIT      0001  EDIBLE_MASK     0002  
EMITTING_LIGHT  000E  EMITTING_LIGHT_ 0020  ENCODE          551E  
ENTER           000E  ENTER_SUB       5BB8  ENTER_VERB_ID   0000  
EXAMINE_VERB_ID 0000  E_VERB_ID       0000  FIND_PREPOSITIO 5333  
FLAMMABLE       000C  FLAMMABLE_BIT   0003  FLAMMABLE_MASK  0008  
GAMEOVER        631A  GETCOMMAND      522B  GETLIN          524A  
GET_MOVE_DIR    5BB9  GET_OBJ_ATTR    5C58  GET_OBJ_ID      584C  
GET_OBJ_PROP    5C9A  GET_PLAYER_ROOM 5CF3  GET_SUB         5DF6  
GET_TABLE_INDEX 581F  GET_VERBS_ID    5897  GET_VERB_ID     0000  
HANDLE_PREP     5377  HAS_CONTENTS    5DC0  HERE            5788  
HIT_END         5660  HOLDER          0001  HOLDER_ID       0001  
ID              0000  IMPOSSIBLE      614D  INBUF           41E8  
INITIAL_DESC_ID 0002  INITIS          5EB4  INSIDE_CLOSED_C 5D00  
INVENTORY_SUB   5D51  INVENTORY_VERB_ 0000  IOWORDID        5669  
ITSLOCKED       5BF8  KEYIN           0040  LIGHTABLE       000D  
LIGHTABLE_BIT   0004  LIGHTABLE_MASK  0010  LISTEN_SUB      0000  
LISTEN_VERB_ID  0000  LIST_OBJECT     56D3  LIT             000E  
LIT_BIT         0005  LIT_MASK        0020  LKP_DIRECTOBJ   54FE  
LKP_INDIRECTOBJ 550E  LOCKABLE        0007  LOCKABLE_BIT    0006  
LOCKABLE_MASK   0040  LOCKED          0008  LOCKED_BIT      0007  
LOCKED_MASK     0080  LOCK_SUB        5FBC  LOCK_VERB_ID    0000  
LOOK_AT_SUB     5764  LOOK_SUB        566A  LOOK_VERB_ID    0000  
LPW             58F6  MAKE_PROP_MASK  5CDC  MASK_TABLE      5D41  
MASS            0010  MISSING_IO      6275  MOVE_PLAYER     5B50  
MOVE_PREP       53A7  MOVE_TO_END     541D  MOVE_TO_NEXT    53F0  
MOVE_TO_START   5401  NE_VERB_ID      0000  NOGO_TABLE      0000  
NOITEMS         5E80  NORTH           0004  NORTHEAST       0008  
NORTHWEST       000B  NOSEE           5A2A  NOTCLOSEABLE    5C2D  
NOTCONTAINER    6111  NOTLOCKABLE     600C  NOTOPENABLE     5C43  
NOTPORTABLE     5EC0  NOTSUPPORTER    612F  NO_OBJECT       00FF  
NW_VERB_ID      0000  N_VERB_ID       0000  OBJ_ATTRS_SIZE  0011  
OBJ_ENTRY_SIZE  0013  OBJ_ID          0000  OBJ_SIZE        0013  
OBJ_TABLE       0000  OBJ_WORD_TABLE  0000  OFFSCREEN       0000  
ONITIS          5EA8  OPEN            0006  OPENABLE        0005  
OPENABLE_BIT    0004  OPENABLE_MASK   0010  OPEN_BIT        0005  
OPEN_CONTAINER  0009  OPEN_MASK       0020  OPEN_SUB        5EEF  
OPEN_VERB_ID    0000  OUT             000F  OUTLIN          5262  
OUT_VERB_ID     0000  PARDON          62B2  PARSE           5291  
PARSE_ERR       5667  PERIOD          62BA  PITCHDARK       61E2  
PLAYER_HAS_LIGH 5709  PLAYER_ID       0001  PLAYER_ROOM     5D21  
PORTABLE        0009  PORTABLE_BIT    0000  PORTABLE_MASK   0001  
POSTACTIONS_TAB 0000  PREACTIONS_TABL 0000  PREPADDR        565E  
PREP_FOUND      5666  PREP_TABLE      0000  PRINTCR         580F  
PRINT_CONTAINER 5E3E  PRINT_CONTENTS  5D79  PRINT_OBJ_DESC  56BA  
PRINT_OBJ_NAME  57BB  PRINT_RET_BAD_D 6198  PRINT_RET_BAD_I 61AE  
PRINT_RET_BAD_V 6182  PRINT_RET_DONTH 61CE  PRINT_RET_DONT_ 61C4  
PRINT_RET_NOT_O 61D8  PRINT_RET_NO_IO 6178  PRINT_RET_PARDO 616E  
PRINT_SPACE     5801  PRINT_SUPPORTER 5E57  PRINT_TABLE_ENT 578E  
PROPERTY_BYTE_1 0011  PROPERTY_BYTE_2 0012  PUT_SUB         6036  
PUT_VERB_ID     0000  QUIT_SUB        616D  QUIT_VERB_ID    0000  
READ_DOBJ       543D  RUN_ACTIONS     5A8A  RUN_DEFAULT_SEN 5AED  
RUN_SENTENCE    5A3E  SCENERY         0001  SCENERY_BIT     0000  
SCENERY_MASK    0001  SCORE           6319  SENTENCE        5662  
SENTENCE_TABLE  62CA  SET_OBJ_ATTR    5C79  SET_OBJ_PROP    5CB9  
SE_VERB_ID      0000  SKIP_ARTICLE    5303  SMELL_SUB       0000  
SMELL_VERB_ID   0000  SOUTH           0005  SOUTHEAST       0009  
SOUTHWEST       000A  START           5200  STORE_WORD      5453  
STRCPY          58E7  STRCPYI         58F1  STREQ           5911  
STRING_TABLE    0000  STRLEN          58D4  SUPPORTER       0002  
SUPPORTER_BIT   0001  SUPPORTER_MASK  0002  SW_VERB_ID      0000  
S_VERB_ID       0000  TAKEN           5E70  THEREISA        577C  
TRANSPARENT     0004  TRANSPARENT_BIT 0003  TRANSPARENT_MAS 0008  
UNLOCK_SUB      600B  UNLOCK_VERB_ID  0000  UNUSED          0010  
UNUSED_BIT      0007  UNUSED_MASK     0080  UP              000C  
UP_VERB_ID      0000  VALIDATE_ENCODE 546F  VALIDATE_WORDS  549C  
VERB_TABLE      0000  VERSION         0000  VISOBJS         577B  
WELCOME         0000  WEST            0007  WILDCARDIZE     5B20  
WILDCARDS       5B4C  WORD1           555C  WORD2           557C  
WORD3           559C  WORD4           55BC  WORD5           55DC  
WORD6           55FC  WORD7           561C  WORD8           563C  
WORD_COUNT      5661  W_VERB_ID       0000  _HEF            5436  
_L2$            57D6  _LP             5796  _LP$            57C7  
_OUT$           57D2  _SK             57A5  _X              57B4  
_XR             57FB  
