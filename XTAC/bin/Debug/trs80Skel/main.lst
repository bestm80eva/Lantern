                00001 ;main file for trs-80 shell
                00002  
                00003 *INCLUDE objdefsZ80.asm ; equs
                00004 ;object definitions
                00005 
    = 0000      00006 OFFSCREEN equ 0
    = 0001      00007 PLAYER_ID equ 1
                00008 
    = 00FF      00009 NO_OBJECT equ 255
    = 00FE      00010 ANY_OBJECT equ 254
                00011 
                00012 ;byte 1
    = 0001      00013 PORTABLE_MASK equ 1
    = 0002      00014 EDIBLE_MASK equ 2
    = 0002      00015 BACKDROP_MASK equ 2
    = 0004      00016 DRINKABLE_MASK equ 4
    = 0008      00017 FLAMMABLE_MASK equ 8
    = 0010      00018 LIGHTABLE_MASK equ 16
    = 0020      00019 LIT_MASK equ 32 
    = 0020      00020 EMITTING_LIGHT_MASK equ 32
    = 0040      00021 DOOR_MASK equ 64
    = 0080      00022 UNUSED_MASK equ 128
                00023 
    = 0000      00024 PORTABLE_BIT EQU 0
    = 0001      00025 EDIBLE_BIT EQU 1
    = 0002      00026 DRINKABLE_BIT EQU 2
    = 0003      00027 FLAMMABLE_BIT EQU 3
    = 0004      00028 LIGHTABLE_BIT EQU 4
    = 0005      00029 LIT_BIT  EQU 5
    = 0006      00030 DOOR_BIT EQU 6
    = 0007      00031 UNUSED_BIT EQU 7
                00032 
                00033 ;(PROPERTY_BYTE_2)
    = 0001      00034 SCENERY_MASK equ 1
    = 0002      00035 SUPPORTER_MASK equ 2
    = 0004      00036 CONTAINER_MASK equ 4
    = 0008      00037 TRANSPARENT_MASK equ 8
    = 0010      00038 OPENABLE_MASK equ 16
    = 0020      00039 OPEN_MASK equ 32
    = 0040      00040 LOCKABLE_MASK equ 64
    = 0080      00041 LOCKED_MASK equ 128
    = 0009      00042 OPEN_CONTAINER equ OPEN+CONTAINER 
                00043 
                00044 ;byte 2
    = 0000      00045 SCENERY_BIT EQU 0
    = 0001      00046 SUPPORTER_BIT EQU 1
    = 0002      00047 CONTAINER_BIT EQU 2
    = 0003      00048 TRANSPARENT_BIT EQU 3
    = 0004      00049 OPENABLE_BIT EQU 4
    = 0005      00050 OPEN_BIT EQU 5
    = 0006      00051 LOCKABLE_BIT EQU 6
    = 0007      00052 LOCKED_BIT      EQU 7
                00053 
                00054 ; objdefs.asm
                00055 
    = 0000      00056 OBJ_ID equ 0
    = 0001      00057 HOLDER_ID equ 1
    = 0002      00058 INITIAL_DESC_ID equ  2
    = 0003      00059 DESC_ID equ 3
    = 0004      00060 NORTH equ 4
    = 0005      00061 SOUTH equ 5
    = 0006      00062 EAST equ 6
    = 0007      00063 WEST equ 7
    = 0008      00064 NORTHEAST equ 8
    = 0009      00065 SOUTHEAST equ 9
    = 000A      00066 SOUTHWEST equ 10
    = 000B      00067 NORTHWEST equ 11
    = 000C      00068 UP equ 12
    = 000D      00069 DOWN equ 13
    = 000E      00070 ENTER equ 14
    = 000F      00071 OUT equ 15
    = 0010      00072 MASS equ 16
                00073 
    = 0013      00074 OBJ_ENTRY_SIZE equ 19
    = 0011      00075 PROPERTY_BYTE_1 equ 17
    = 0012      00076 PROPERTY_BYTE_2 equ 18
                00077 ;byte 1
    = 0001      00078 SCENERY equ 1 
    = 0002      00079 SUPPORTER equ 2
                00080 CONTAINER equ 3
    = 0004      00081 TRANSPARENT equ 4
    = 0005      00082 OPENABLE equ 5
                00083 OPEN equ 6
    = 0007      00084 LOCKABLE equ 7
    = 0008      00085 LOCKED equ 8
    = 0009      00086 PORTABLE equ 9
    = 000A      00087 BACKDROP equ 10
    = 000B      00088 DRINKABLE equ 11
    = 000C      00089 FLAMMABLE equ 12
    = 000D      00090 LIGHTABLE equ 13
    = 000E      00091 LIT equ 14
    = 000E      00092 EMITTING_LIGHT equ 14
    = 000F      00093 DOOR equ 15
    = 0010      00094 UNUSED equ 16
                00095 ;byte 2
    = 0001      00096 PORTABLE_MASK equ 1
    = 0002      00097 BACKDROP_MASK equ 2
    = 0004      00098 DRINKABLE_MASK equ 4
    = 0008      00099 FLAMMABLE_MASK equ 8
    = 0010      00100 LIGHTABLE_MASK equ 16
    = 0020      00101 LIT_MASK equ 32 
    = 0020      00102 EMITTING_LIGHT_MASK equ 32
    = 0040      00103 DOOR_MASK equ 64
    = 0080      00104 UNUSED_MASK equ 128
                00105 
                00106  
                00107 ;QINPUT equ 1bb3h               ; ROM ROUTINES
    = 0033      00108 CRTBYTE equ  0033H
    = 41E8      00109 INBUF equ 41e8h
    = 01C9      00110 CLS equ 01c9h
                00111 ;OUTLIN equ 28a7h               ; src str in HL/
                00112 
                00113         ORG 5200H
                00114 START
5200  CDC901    00115                 call CLS
5203  210000    00116                 ld hl,welcome ; print welcome,author,version
main.asm(14): undefined symbol
5206  CD6552    00117                 call OUTLIN
5209  CD6D58    00118                 call printcr
520C  210000    00119                 ld hl,author
main.asm(17): undefined symbol
520F  CD6552    00120                 call OUTLIN
5212  CD6D58    00121                 call printcr
5215  210000    00122                 ld hl,version
main.asm(20): undefined symbol
5218  CD6552    00123                 call OUTLIN
521B  CD6D58    00124                 call printcr
521E  CD6D58    00125                 call printcr
5221  CD6B56    00126                 call look_sub
5224  CD2B52    00127 $inp?   call getcommand
5227  C32452    00128                 jp $inp?
522A  C9        00129                 ret
                00130                 
                00131 getcommand
                00132                 ;call QINPUT
522B  CD4D52    00133                 call getlin
522E  CD9452    00134                 call parse                              ; get the words
5231  3A6356    00135                 ld a,(sentence)
5234  FE00      00136                 cp 0
5236  CA2452    00137                 jp z,$inp?
5239  CD9D54    00138                 call validate_words             ; make sure verb,io,do are in tables
523C  CD1F55    00139                 call encode                             ; try to map words to objects
523F  CD7254    00140                 call validate_encode    ; make sure it worked
5242  CDE15B    00141                 call wildcardize
5245  CDE45A    00142                 call run_sentence
5248  CD4C52    00143                 call do_events
524B  C9        00144                 ret
                00145                 
                00146 
                00147 do_events
                00148 *INCLUDE event_jumps_Z80.asm
main.asm(46): unable to include file
524C  C9        00149         ret
                00150         
                00151 *INCLUDE io.asm 
    = 0030      00152 BUFSIZE EQU 48
    = 0040      00153 KEYIN EQU 40H
                00154 
                00155 getlin
524D  C5        00156                 push bc
524E  D5        00157                 push de
524F  E5        00158                 push hl
                00159 ;               call clrbuf
5250  21E841    00160                 ld hl,INBUF
5253  0630      00161                 ld b,BUFSIZE
5255  CD4000    00162                 call KEYIN ; returns len in 'b'
5258  48        00163                 ld c,b
5259  0600      00164                 ld b,0
525B  09        00165                 add hl,bc
525C  3600      00166                 ld (hl),0  ; delete cr
525E  E1        00167                 pop hl
525F  D1        00168                 pop de
5260  C1        00169                 pop bc
5261  CD6D58    00170                 call printcr
5264  C9        00171                 ret
                00172 
                00173 
                00174         ;hl = str
                00175 OUTLIN
5265  F5        00176                 push af
5266  C5        00177                 push bc
5267  D5        00178                 push de
5268  E5        00179                 push hl
5269  DDE5      00180                 push ix
526B  FDE5      00181                 push iy
526D  7E        00182 $lp?    ld a,(hl)
526E  FE00      00183                 cp 0
5270  CA7A52    00184                 jp z,$x?
5273  23        00185                 inc hl
5274  CD3300    00186                 call CRTBYTE
5277  C36D52    00187                 jp $lp? 
527A  FDE1      00188 $x?             pop iy
527C  DDE1      00189                 pop ix
527E  E1        00190                 pop hl
527F  D1        00191                 pop de
5280  C1        00192                 pop bc
5281  F1        00193                 pop af
5282  C9        00194                 ret
                00195 
                00196 *MOD
                00197 clrbuf
5283  3EFF      00198                 LD A,255
5285  77        00199                 LD (HL),A
5286  21E841    00200                 LD HL,INBUF
5289  70        00201 $lpA    ld (hl),b
528A  23        00202                 inc hl
528B  3D        00203                 dec a
528C  FE00      00204                 cp 0
528E  C28952    00205                 jp nz,$lpA
5291  EDB0      00206                 LDIR    
5293  C9        00207                 ret
                00208 
                00209 
                00210 ;INBUF DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                00211         
                00212 *INCLUDE parser.asm
                00213 ;z80 parser 
                00214 *MOD
                00215 parse
5294  3E00      00216                 ld a,0  
5296  326156    00217                 ld (hit_end),a          ; clear flag                    ld (word_count),a       ; reset to 0
5299  215D55    00218                 ld hl,word1     
529C  225D56    00219                 ld (copydest),hl        ; set copy dest
529F  3AE841    00220                 ld a,(INBUF)            ; get 1st char? 
52A2  FE00      00221                 cp 0            
52A4  CA8962    00222                 jp z,print_ret_pardon
52A7  CDCE53    00223                 call clear_buffers
52AA  DD21E841  00224                 ld ix,INBUF                ; set ix to input buffer
52AE  FD21E841  00225                 ld iy,INBUF                ; set iy to input buffer
52B2  CDF353    00226                 call move_to_next  ; move to end of 1st word    
52B5  CD5654    00227                 call store_word    ; save word 1        
52B8  CDF353    00228                 call move_to_next       ; try to bracket at 2nd word
52BB  DD7E00    00229                 ld a,(ix) ;hit end? (single verb command)
52BE  FE00      00230                 cp 0 
52C0  CA0553    00231                 jp z,$_xB
52C3  CD7A53    00232                 call handle_prep ; compress preposition if needed and go to word 3
52C6  217D55    00233                 ld hl,word2              ; copy direct object   
52C9  225D56    00234                 ld (copydest),hl
52CC  CD0653    00235                 call skip_article       ; skip article if present
52CF  DD7E00    00236                 ld a,(ix) ;hit end? (single verb command)
52D2  FE00      00237                 cp 0 
52D4  CA0553    00238                 jp z,$_xB
52D7  CD5654    00239                 call store_word         ; store direct object
52DA  CD3653    00240                 call find_preposition  ;stores prep
52DD  3A6756    00241                 ld a,(prep_found)
52E0  FE00      00242                 cp 0
52E2  CA0553    00243                 jp z, $_xB ; if no prep, we're done since we already have the d.o.
52E5  00        00244                 nop ; store prep and move past it, then get io 
52E6  DD7E00    00245                 ld a,(ix) ;hit end?
52E9  FE00      00246                 cp 0 
52EB  CA9362    00247                 jp z,print_ret_no_io
52EE  CD0653    00248                 call skip_article
52F1  DD7E00    00249                 ld a,(ix) ;hit end?
52F4  FE00      00250                 cp 0 
52F6  CA9362    00251                 jp z,print_ret_no_io
52F9  FD7700    00252                 ld (iy),a
52FC  21BD55    00253                 ld hl,word4
52FF  225D56    00254                 ld (copydest),hl
5302  CD5654    00255                 call store_word
5305  C9        00256 $_xB    ret
                00257 
                00258 ;skip_article
                00259 ;moves to the next word, if that word is an article
                00260 ;if it's not the last word
                00261 ;ix must point to the word to look at
                00262 ;ix are positioned at the start of the next word
                00263 *MOD
                00264 skip_article
5306  F5        00265                 push af
5307  D5        00266                 push de
5308  E5        00267                 push hl
5309  FD7E00    00268                 ld a,(iy)       
530C  57        00269                 ld d,a  ;save char (null or space)
530D  3E00      00270                 ld a,0  ;put a null there       
530F  FD7700    00271                 ld (iy),a
5312  FDE5      00272                 push iy 
5314  FD21D863  00273                 ld iy,article_table ; iy is table to search
5318  CD7D58    00274                 call get_table_index
531B  FDE1      00275                 pop iy
531D  FD7200    00276                 ld (iy),d ;replace null or space
5320  78        00277                 ld a,b
5321  FEFF      00278                 cp 0ffh  ; not found -> take no action
5323  CA3253    00279                 jp z,$xC                
5326  214855    00280                 ld hl,DbgSA
5329  CD6552    00281                 call OUTLIN
532C  CD6D58    00282                 call printcr
532F  CDF353    00283                 call move_to_next ; move to end of next word
5332  E1        00284 $xC             pop hl
5333  D1        00285                 pop de
5334  F1        00286                 pop af
5335  C9        00287                 ret
                00288 
                00289 ;this subroutin e looks for a preposition
                00290 ;if a prep is found, prep_found is set to 1,
                00291 ;and the prep id is stored in sentence+2
                00292 *MOD
                00293 find_preposition
5336  F5        00294                 push af
5337  C5        00295                 push bc
5338  D5        00296                 push de
5339  E5        00297                 push hl
533A  DD7E00    00298 $lpD    ld a,(ix)
533D  FE00      00299                 cp 0
533F  CA7553    00300                 jp z,$xD
5342  CDF353    00301                 call move_to_next
5345  FD5600    00302                 ld d,(iy)       ; save char we're going to null out
5348  FD360000  00303                 ld (iy),0   ;null out end of word
534C  FDE5      00304                 push iy
534E  FD210000  00305                 ld iy,prep_table
parser.asm(93): undefined symbol
5352  CD7D58    00306                 call get_table_index
5355  FDE1      00307                 pop iy          ;
5357  FD7200    00308                 ld (iy),d       ; restore byte
535A  78        00309                 ld a,b          ; move result to a
535B  FEFF      00310                 cp 0ffh
535D  CA3A53    00311                 jp z,$lpD   ; if not prep hit, repeat
5360  00        00312                 nop             ; hit a preposition
5361  219D55    00313                 ld hl,word3
5364  225D56    00314                 ld (copydest),hl
5367  CD5654    00315                 call store_word
536A  326556    00316                 ld (sentence+2),a
536D  3E01      00317                 ld a,1
536F  326756    00318                 ld (prep_found),a 
5372  CDF353    00319                 call move_to_next ; find next word
5375  E1        00320 $xD             pop hl
5376  D1        00321                 pop de
5377  C1        00322                 pop bc
5378  F1        00323                 pop af
5379  C9        00324                 ret
                00325 
                00326 ;if the word between ix and iy is a prep, the 
                00327 ;word is stuck on the end of word 1 and ix,iy
                00328 ;are moved to bracket the next word
                00329 ;and word 2 is zeroed out.
                00330 *MOD
                00331 handle_prep
537A  F5        00332         push af
537B  C5        00333         push bc
537C  D5        00334         push de
537D  E5        00335         push hl
537E  FDE5      00336         push iy
5380  FD5600    00337         ld d,(iy) ; save char at end of word1
5383  FD360000  00338         ld (iy),0 ; null terminate word for string cmp
5387  FD210000  00339         ld iy,prep_table
parser.asm(127): undefined symbol
538B  CD7D58    00340         call get_table_index    
538E  FDE1      00341         pop iy
5390  78        00342         ld a,b
5391  FEFF      00343         cp 0ffh ; found?
5393  CAA253    00344         jp z,$xE ; exit on not found
                00345 ;       ld hl,DbgPF
                00346 ;       call OUTLIN
5396  CDAA53    00347         call move_prep ; doesn't change ix,iy
5399  FD7200    00348         ld (iy),d       ; restore null or space
539C  CDF353    00349         call move_to_next ; move to next word
539F  C3A553    00350         jp $yE
53A2  FD7200    00351 $xE     ld (iy),d       ; restore null or space
53A5  E1        00352 $yE     pop hl
53A6  D1        00353         pop de
53A7  C1        00354         pop bc
53A8  F1        00355         pop af
53A9  C9        00356         ret
                00357 
                00358 ;moves word pointed to by ix
                00359 ;to the end of the word1 buffer
                00360 move_prep
53AA  DDE5      00361                 push ix                                 ; 2nd word was a prep
53AC  FDE5      00362                 push iy
53AE  D5        00363                 push de
53AF  3A6156    00364                 ld a,(hit_end)  ; save old flag
53B2  57        00365                 ld d,a
53B3  FD215D55  00366                 ld iy,word1
53B7  CD2054    00367                 call move_to_end
53BA  3E20      00368                 ld a,20h ; space
53BC  FD7700    00369                 ld (iy),a ; overwrite null with space
53BF  FD23      00370                 inc iy    ;move past space
53C1  CD4F59    00371                 call strcpyi
53C4  7A        00372                 ld a,d
53C5  326156    00373                 ld (hit_end),a
53C8  D1        00374                 pop de
53C9  FDE1      00375                 pop iy
53CB  DDE1      00376                 pop ix
53CD  C9        00377                 ret
                00378 
                00379 
                00380                 
                00381 ;clears the variables where the words are stored
                00382 clear_buffers
53CE  3E00      00383                 ld a,0                          ; clear the 
53D0  326756    00384                 ld (prep_found),a
53D3  3EFF      00385                 ld a,0ffh
53D5  326356    00386                 ld (sentence),a
53D8  326456    00387                 ld (sentence+1),a
53DB  326556    00388                 ld (sentence+2),a
53DE  326656    00389                 ld (sentence+3),a
53E1  0600      00390                 ld b, 0
53E3  DD215C56  00391                 ld ix,copydest-1
53E7  DD7000    00392 $lp     ld (ix),b
53EA  DD2B      00393                 dec ix
53EC  3D        00394                 dec a
53ED  FE00      00395                 cp 0
53EF  C2E753    00396                 jp nz,$lp
53F2  C9        00397                 ret
                00398                 
                00399 ;brackets the next word with ix,iy              
                00400 move_to_next
53F3  FDE5      00401         push iy ; move ix to end of last word
53F5  DDE1      00402         pop ix
53F7  DD7E00    00403         ld a,(ix)
53FA  FE00      00404         cp 0  ; null?
53FC  C8        00405         ret z   
53FD  CD0454    00406         call move_to_start ; move to start of text
5400  CD2054    00407         call move_to_end ; move to start of text
5403  C9        00408         ret
                00409         
                00410 ;skips over spaces until ix points
                00411 ;to a non space
                00412 ;uses a,ix      
                00413 *MOD
                00414 move_to_start
5404  F5        00415                 push af
5405  DD7E00    00416 $_lp    ld a,(ix)
5408  FE20      00417                 cp 20h          ; space?
540A  CA1554    00418                 jp z,$cntF      ; quit
540D  FE00      00419                 cp 0            ; null?
540F  CA1554    00420                 jp z,$cntF      ; quit
5412  C31A54    00421                 jp $xF
5415  DD23      00422 $cntF   inc ix          ;next char
5417  C30554    00423                 jp $_lp         ;repeat
541A  DDE5      00424 $xF             push ix ;copy ix to iy
541C  FDE1      00425                 pop iy  ;iy needs to catch up
541E  F1        00426                 pop af
541F  C9        00427                 ret
                00428 
                00429 ;moves iy to the 1st space or null at the end of 
                00430 ;a word.  Assumes iy is already pointing to the
                00431 ;start of the word
                00432 ;uses iy
                00433 ;if null is hit, hit_end is set to 1
                00434 move_to_end
5420  F5        00435                         push af
5421  FD7E00    00436 $_lpF           ld a,(iy)       ; get char
5424  CD9759    00437                         call atoupper
5427  FD7700    00438                         ld (iy),a
542A  FE20      00439                         cp 20h          ; space?
542C  CA3E54    00440                         jp z, $_x
542F  FE00      00441                         cp 0            ; null
5431  CA3954    00442                         jp z, _heF
5434  FD23      00443                         inc iy
5436  C32154    00444                         jp $_lpF
5439  3E01      00445 _heF            ld a,1
543B  326156    00446                         ld (hit_end),a
543E  F1        00447 $_x                     pop af
543F  C9        00448                         ret
                00449 ;read do
                00450 *MOD    
                00451 read_dobj
5440  3A6156    00452         ld a,(hit_end)
5443  FE01      00453         cp 1
5445  C8        00454         ret z
                00455         ;       call skip_article  ; call skip_article
5446  217D55    00456         ld hl,word2
5449  225D56    00457         ld (copydest),hl
544C  CD0454    00458         call move_to_start
544F  CD2054    00459         call move_to_end
5452  CD5654    00460         call store_word
5455  C9        00461         ret
                00462                         
                00463 ;copies from (iy-ix) chars from ix to copydest
                00464 store_word 
5456  C5        00465                 push bc
5457  D5        00466                 push de
5458  E5        00467                 push hl
5459  37        00468                 scf     ;clear the carry flag by setting it...
545A  3F        00469                 ccf ;then flipping it
545B  FDE5      00470                 push iy ; copy iy to hl
545D  E1        00471                 pop hl
545E  DDE5      00472                 push ix ; copy ix to bc
5460  C1        00473                 pop bc
5461  ED42      00474                 sbc hl,bc
5463  E5        00475                 push hl ; byte count to bc
5464  C1        00476                 pop bc
5465  DDE5      00477                 push ix  ; ix->hl       
5467  E1        00478                 pop hl
5468  ED5B5D56  00479                 ld de,(copydest)
546C  EDB0      00480                 ldir            ; (hl)->(de) until bc=0
546E  E1        00481                 pop hl
546F  D1        00482                 pop de
5470  C1        00483                 pop bc
5471  C9        00484                 ret
                00485 
                00486 
                00487 *MOD
                00488 ;Checks to see that io and do were succesfully mapped
                00489 ;to visible objects.  This has to be done because the
                00490 ;parser may recognize a word, but it doesn't refer to
                00491 ;a visible object.
                00492 ;If validate fails, subroutine calls print_ret_dont_see
                00493 ;pops the stack and returns to the parsing loop
                00494 *MOD
                00495 validate_encode
5472  3A7D55    00496                 ld a,(word2) ; is the word blank(null)
5475  FE00      00497                 cp 0
5477  CA9C54    00498                 jp z,$xI
547A  3A6456    00499                 ld a,(sentence+1)
547D  FEFF      00500                 cp 255
547F  C28754    00501                 jp nz,$w4I
5482  33        00502                 inc sp
5483  33        00503                 inc sp
5484  C3DF62    00504                 jp print_ret_dont_see
5487  3ABD55    00505 $w4I    ld a,(word4)  ; is there an io?
548A  FE00      00506                 cp 0
548C  CA9C54    00507                 jp z,$xI
548F  3A6656    00508                 ld a,(sentence+3)
5492  FEFF      00509                 cp 255
5494  C29C54    00510                 jp nz,$xI
5497  33        00511                 inc sp
5498  33        00512                 inc sp
5499  C3DF62    00513                 jp print_ret_dont_see   
549C  C9        00514 $xI             ret
                00515                 
                00516 ;validates that the io and do exist in the tables               
                00517 *MOD
                00518 validate_words
549D  3EFF      00519                 ld a,255
549F  326356    00520                 ld (sentence),a
54A2  326956    00521                 ld (doWordId),a
54A5  326A56    00522                 ld (ioWordId),a
54A8  00        00523                 nop ; there is always a verb
54A9  CDF558    00524                 call get_verbs_id 
54AC  FEFF      00525                 cp 0ffh
54AE  C2B654    00526                 jp nz,$doJ
54B1  33        00527                 inc sp  ; return from caller
54B2  33        00528                 inc sp
54B3  C39D62    00529                 jp print_ret_bad_verb
54B6  326356    00530 $doJ    ld (sentence),a ; store verb
54B9  3A7D55    00531                 ld a,(word2) ; is there a 1st word?
54BC  FE00      00532                 cp 0
54BE  CAFE54    00533                 jp z,$xJ
54C1  DD217D55  00534                 ld ix,word2
54C5  FD210000  00535                 ld iy,dictionary
parser.asm(323): undefined symbol
54C9  CD7D58    00536                 call get_table_index ; result in a
54CC  78        00537                 ld a,b
54CD  326956    00538                 ld (doWordId),a
54D0  FEFF      00539                 cp 0ffh  ; was it found
54D2  C2DC54    00540                 jp nz,$ioJ
54D5  00        00541                 nop ; look up obj and store it in sentence+1
54D6  33        00542                 inc sp
54D7  33        00543                 inc sp
54D8  C3B362    00544                 jp print_ret_bad_do ; returns
54DB  00        00545                 nop ; now validate io
54DC  3ABD55    00546 $ioJ    ld a,(word4) ; is there a 1st word
54DF  FE00      00547                 cp 0
54E1  CAFE54    00548                 jp z,$xJ
54E4  DD21BD55  00549                 ld ix,word4
54E8  FD210000  00550                 ld iy,dictionary
parser.asm(338): undefined symbol
54EC  CD7D58    00551                 call get_table_index ; result in a
54EF  78        00552                 ld a,b
54F0  326A56    00553                 ld (ioWordId),a
54F3  FEFF      00554                 cp 0ffh  ; was it found
54F5  C2FE54    00555                 jp nz,$xJ
54F8  00        00556                 nop ; look up obj and store it in sentence+1
54F9  33        00557                 inc sp
54FA  33        00558                 inc sp
54FB  C3C962    00559                 jp print_ret_bad_io ; returns
54FE  C9        00560 $xJ             ret             
                00561 
                00562 ;attempts to find an object that matches the word
                00563 ;entered by the user.  If no visible objects match,
                00564 ;FF is returned.        
                00565 *MOD
                00566 lkp_directobj
54FF  F5        00567                 push af
5500  C5        00568                 push bc
5501  3A6956    00569                 ld a,(doWordId)
5504  47        00570                 ld b,a
5505  CDAA58    00571                 call get_obj_id ; 'get the object with that word'
5508  78        00572                 ld a,b
5509  326456    00573                 ld (sentence+1),a ; copy of b
550C  C1        00574                 pop bc
550D  F1        00575                 pop af
550E  C9        00576                 ret
                00577                 
                00578                 
                00579 *MOD
                00580 lkp_indirectobj
550F  F5        00581                 push af
5510  C5        00582                 push bc
5511  3A6A56    00583                 ld a,(ioWordId)
5514  47        00584                 ld b,a
5515  CDAA58    00585                 call get_obj_id ; 'get the object with that word'
5518  78        00586                 ld a,b
5519  326656    00587                 ld (sentence+3),a ; copy of b
551C  C1        00588                 pop bc
551D  F1        00589                 pop af
551E  C9        00590                 ret
                00591 
                00592 ;
                00593 ;looks at each word in sentence and
                00594 ;tries to convert it to an object or verb id
                00595 encode
551F  F5        00596                 push af
5520  3A7D55    00597                 ld a,(word2) ; is the an d.o?
5523  FE00      00598                 cp 0
5525  CA3755    00599                 jp z,$xL
5528  CDFF54    00600                 call lkp_directobj
552B  00        00601                 nop ; prep is already stored by parser
552C  3ABD55    00602                 ld a,(word4) ; is the an i.o?
552F  FE00      00603                 cp 0
5531  CA3755    00604                 jp z,$xL
5534  CD0F55    00605                 call lkp_indirectobj
5537  F1        00606 $xL             pop af
5538  C9        00607                 ret
                00608         
                00609 
                00610         
5539  4442473A  00611 DbgPF DB "DBG:PREP FOUND",0h            
      50 52 45 50 20 46 4F 55
      4E 44 00               
5548  4442473A  00612 DbgSA DB "DBG:SKIPPING ARTICLE",0h              
      53 4B 49 50 50 49 4E 47
      20 41 52 54 49 43 4C 45
      00                     
                00613                 
555D            00614 word1 DS 32
557D            00615 word2 DS 32
559D            00616 word3 DS 32
55BD            00617 word4 DS 32
55DD            00618 word5 DS 32
55FD            00619 word6 DS 32
561D            00620 word7 DS 32
563D            00621 word8 DS 32
565D  0000      00622 copydest DW 0000h
565F  0000      00623 prepaddr DW 0000h
5661  00        00624 hit_end DB 0
5662  00        00625 word_count DB 0
5663            00626 sentence DS 4
                00627 
5667  00        00628 prep_found DB 0
5668  00        00629 parse_err DB 0
                00630 
5669  FF        00631 doWordId DB 255
566A  FF        00632 ioWordId DB 255
                00633 *INCLUDE look.asm
                00634 ;look.asm
                00635 
                00636 *MOD
                00637 look_sub
566B  C5        00638                 push bc
566C  D5        00639                 push de
566D  E5        00640                 push hl
566E  DDE5      00641                 push ix
5670  111300    00642                 ld de,OBJ_ENTRY_SIZE
5673  00        00643                 nop ; can the player see?
5674  CDBA5D    00644                 call get_player_room
5677  CD1958    00645                 call print_obj_name
567A  CD6D58    00646                 call printcr
567D  47        00647                 ld b,a
567E  CDBB56    00648                 call print_obj_desc
5681  67        00649                 ld h,a
5682  00        00650                 nop ; now print all visible objects
5683  DD210000  00651                 ld ix,obj_table
look.asm(18): undefined symbol
5687  DD7E00    00652 $lpM    ld a,(ix);get id
568A  FE00      00653                 cp 0            ; skip offscreen
568C  CAB056    00654                 jp z,$cM
568F  FE01      00655                 cp 1            ; skip player
5691  CAB056    00656                 jp z,$cM
5694  FEFF      00657                 cp 0ffh
5696  CAB556    00658                 jp z,$xM
5699  DDCB1146  00659                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)
569D  C2B056    00660                 jp nz,$cM
                00661 ;               nop ; is this object in this room?
56A0  DD7E01    00662                 ld a,(ix+HOLDER) ; get holder byte
56A3  B8        00663                 cp b
56A4  C2B056    00664                 jp nz,$cM
56A7  DD7E00    00665                 ld a,(ix) ; reload obj id byte
56AA  C5        00666                 push bc
56AB  47        00667                 ld b,a ; 
56AC  CCD456    00668                 call z,list_object ; look at id 'b'
56AF  C1        00669                 pop bc
56B0  DD19      00670 $cM             add ix,de ; skip object
56B2  C38756    00671                 jp $lpM
56B5  DDE1      00672 $xM             pop ix
56B7  E1        00673                 pop hl
56B8  D1        00674                 pop de
56B9  C1        00675                 pop bc
56BA  C9        00676                 ret
                00677 
                00678 ;prints description of obj in 'b'
                00679 print_obj_desc
56BB  F5        00680         push af
56BC  C5        00681         push bc
56BD  DDE5      00682         push ix
56BF  0E03      00683         ld c,DESC_ID
56C1  CD1F5D    00684         call get_obj_attr ; res to 'a'
56C4  47        00685         ld b,a
56C5  DD210000  00686         ld ix,string_table
look.asm(53): undefined symbol
56C9  CDEC57    00687         call print_table_entry
56CC  CD6D58    00688         call printcr
56CF  DDE1      00689         pop ix
56D1  C1        00690         pop bc
56D2  F1        00691         pop af
56D3  C9        00692         ret
                00693                 
                00694 ;prints the initial description for object in b
                00695 ;if it has one. Otherwise it defaults to "THERE IS A ____ HERE"
                00696 ;the contents of the object are also printed.
                00697 ;ix contains addr of object in table
                00698 *MOD
                00699 list_object
56D4  F5        00700         push af
56D5  C5        00701         push bc
56D6  D5        00702         push de
56D7  DDE5      00703         push ix
56D9  FDE5      00704         push iy
56DB  DDE5      00705         push ix ; put obj addr in iy
56DD  FDE1      00706         pop iy
56DF  50        00707         ld d,b ; save obj
56E0  0E02      00708         ld c,INITIAL_DESC_ID
56E2  CD1F5D    00709         call get_obj_attr 
56E5  FEFF      00710         cp 0ffh         
56E7  CAF856    00711         jp z,$nN                        
56EA  47        00712         ld b,a
56EB  DD210000  00713         ld ix,string_table
look.asm(80): undefined symbol
56EF  CDEC57    00714         call print_table_entry ; uses b and ix
56F2  CD6D58    00715         call printcr
56F5  C30D57    00716         jp $xN 
56F8  21DA57    00717 $nN     ld hl,thereisa
56FB  C5        00718         push bc
56FC  CD6552    00719     call OUTLIN
56FF  C1        00720         pop bc
5700  78        00721         ld a,b
5701  CD1958    00722         call print_obj_name
5704  21E657    00723         ld hl,here
5707  CD6552    00724         call OUTLIN
570A  CD6D58    00725         call printcr
570D  7A        00726 $xN     ld a,d
570E  CD625F    00727     call indent_more
5711  CD9A57    00728         call print_contents_header ;  of object in 'a'
5714  CD405E    00729         call print_contents  ; of object in 'a'
5717  CD6E5F    00730         call indent_less
571A  FDE1      00731         pop iy
571C  DDE1      00732         pop ix
571E  D1        00733         pop de
571F  C1        00734         pop bc
5720  F1        00735         pop af
5721  C9        00736         ret
                00737         
                00738 
                00739                 
                00740 ;player has light       
                00741 ;player has light result in 'a'
                00742 *MOD
                00743 player_has_light
                00744                 ;is the room emitting light?
5722  CDBA5D    00745                 call get_player_room 
5725  47        00746                 ld b,a
5726  0E0E      00747                 ld c,EMITTING_LIGHT
5728  CD615D    00748                 call get_obj_prop
572B  BF        00749                 cp a
572C  CA6457    00750                 jp z,$yO
572F  211300    00751                 ld hl,OBJ_ENTRY_SIZE
5732  DD210000  00752                 ld ix,obj_table ;loop over every object. if its a child of player
look.asm(119): undefined symbol
5736  DD7E00    00753 $lpO    ld a,(ix) ;and not inside a closed container return true
5739  FEFF      00754                 cp 0ffh ;hit end? jump out
573B  00        00755                 nop ; is it emitting light?
573C  47        00756                 ld b,a  ; put obj id in 'b'
573D  0E0E      00757                 ld c,EMITTING_LIGHT
573F  CD615D    00758                 call get_obj_prop
5742  FE00      00759                 cp 0    
5744  CA5F57    00760                 jp z,$skpO      ; if it's not 'lit' we don't care about it
5747  F5        00761                 push af ; get player room into 'b'
5748  3AE85D    00762                 ld a,(player_room)
574B  47        00763                 ld b,a
574C  F1        00764                 pop af
574D  4F        00765                 ld c,a ; object id
574E  CDC85D    00766                 call b_ancestor_of_c ; is it a in same room as player
5751  FE00      00767                 cp 0    
5753  CA5F57    00768                 jp z,$skpO      ; if it's not 'lit' we don't care about it
5756  00        00769                 nop ; need to set up args
5757  CDC75D    00770                 call inside_closed_container;
575A  FE00      00771                 cp 0
575C  CA5F57    00772                 jp z,$skpO      ; inside closed container -> skip it
575F  DD29      00773 $skpO   add ix,hl ; skip to next object
5761  C3E753    00774                 jp $lp  ;repeat
5764  3E01      00775 $yO             ld a,1
5766  C36B57    00776                 jp $xO
5769  3E00      00777 $nO             ld a,0          
576B  C9        00778 $xO             ret
                00779 
                00780 *MOD
                00781 count_visible_objects
576C  F5        00782                 push af
576D  DDE5      00783                 push ix
576F  3E00      00784                 ld a,0
5771  FEFF      00785 $lpP    cp 0ffh
5773  CA7957    00786                 jp z,$xP
5776  C3E753    00787                 jp $lp
5779  DDE1      00788 $xP             pop ix
577B  F1        00789                 pop af
577C  C9        00790                 ret
                00791 
                00792 look_at_sub
577D  F5        00793                 push af
577E  C5        00794                 push bc
577F  DDE5      00795                 push ix
5781  3A6456    00796                 ld a,(sentence+1)
5784  47        00797                 ld b,a
5785  0E03      00798                 ld c,DESC_ID
5787  CD1F5D    00799                 call get_obj_attr
578A  47        00800                 ld b,a
578B  DD210000  00801                 ld ix,string_table
look.asm(168): undefined symbol
578F  CDEC57    00802                 call print_table_entry
5792  CD6D58    00803                 call printcr
5795  DDE1      00804                 pop ix
5797  C1        00805                 pop bc
5798  F1        00806                 pop af
5799  C9        00807                 ret
                00808 
                00809 ;iy contains addr of objects
                00810 *MOD
                00811 print_contents_header
579A  F5        00812         push af
579B  C5        00813         push bc
579C  E5        00814         push hl
579D  FD7E00    00815         ld a,(iy)
57A0  CD8D5E    00816         call has_contents
57A3  FE00      00817         cp 0
57A5  CAD557    00818         jp z,$xQ
57A8  FDCB1156  00819         bit CONTAINER_BIT,(iy+PROPERTY_BYTE_1)
57AC  CAC257    00820         jp z,$sQ ; if not check if supporter
57AF  FDCB116E  00821         bit OPEN_BIT,(iy+PROPERTY_BYTE_1)
57B3  CAD557    00822         jp z,$xQ
57B6  21CB5F    00823         ld hl,initis
57B9  CD6552    00824         call OUTLIN
57BC  CD6D58    00825         call printcr
57BF  C3D557    00826         jp $xQ
57C2  FDCB114E  00827 $sQ     bit SUPPORTER_BIT,(iy+PROPERTY_BYTE_1)
57C6  CAD557    00828         jp z,$xQ
57C9  21BF5F    00829         ld hl,onitis
57CC  CD6552    00830         call OUTLIN
57CF  CD6D58    00831         call printcr    
57D2  C3D557    00832         jp $xQ
57D5  E1        00833 $xQ pop hl
57D6  C1        00834         pop bc
57D7  F1        00835         pop af
57D8  C9        00836         ret
                00837                 
57D9  00        00838 visobjs DB 0            
57DA  54484552  00839 thereisa DB  "THERE IS A ",0h
      45 20 49 53 20 41 20 00
57E6  48455245  00840 here DB "HERE.",0h              
      2E 00                  
                00841         
                00842 *INCLUDE tables.asm
                00843 ;z80 table searching routines
                00844 
                00845 
                00846 ;prints an entry in the table
                00847 ;b contains the number of the string to print
                00848 ;ix contains table address
                00849 *MOD
                00850 print_table_entry
57EC  F5        00851         push af
57ED  C5        00852         push bc
57EE  D5        00853         push de
57EF  E5        00854         push hl
57F0  DDE5      00855         push ix
57F2  3E00      00856         ld a,0d ; lp counter 
57F4  B8        00857 _lp     cp b    ; compare accumulator to a
57F5  C20358    00858         jp nz,_sk ; skip this entry
57F8  DD23      00859         inc ix  ; skip length byte
57FA  DDE5      00860         push ix ; move string addr to hl
57FC  E1        00861         pop hl
57FD  CD6552    00862         call OUTLIN
5800  C31258    00863         jp _x
5803  3C        00864 _sk     inc a           ; increment loop counter
5804  DD5E00    00865         ld      e,(ix+0) ; load length byte
5807  1600      00866         ld d,0
5809  DD19      00867         add ix,de  ; add it to ix (skip string)
580B  DD23      00868         inc ix     ; add 1 to skip length byte
580D  DD23      00869         inc ix     ; add 1 to skip null terminator
580F  C3F457    00870         jp _lp
5812  DDE1      00871 _x      pop ix
5814  E1        00872         pop hl
5815  D1        00873         pop de
5816  C1        00874         pop bc
5817  F1        00875         pop af
5818  C9        00876         ret
                00877 
                00878 ;prints the name of the object whose
                00879 ;id is supplied in register 'a'
                00880 *MOD
                00881 print_obj_name
5819  F5        00882                 push af
581A  C5        00883                 push bc
581B  D5        00884                 push de
581C  DDE5      00885                 push ix
581E  DD210000  00886                 ld ix,obj_word_table
tables.asm(44): undefined symbol
5822  110400    00887                 ld de,4         ; step amount through table
5825  FE00      00888 _lp$    cp 0            ; done?
5827  CA3058    00889                 jp z,_out$
582A  DD19      00890                 add ix,de
582C  3D        00891                 dec a           ; dec loop counter              
582D  C32558    00892                 jp _lp$
5830  DD23      00893 _out$   inc ix          ; skip past the id byte to the words
5832  0600      00894                 ld b,0
5834  78        00895 _l2$    ld a,b
5835  FE03      00896                 cp 3            ; hit 3 word max?
5837  CA5958    00897                 jp z,_xS
583A  DD7E00    00898                 ld a,(ix)       ; get word id
583D  FEFF      00899                 cp 255d         ; done (empty entry)?
583F  CA5958    00900                 jp z,_xS        
5842  C5        00901                 push bc         ;save loop counter
5843  47        00902                 ld b,a          ; put word id in b
5844  DDE5      00903                 push ix         ; save ix
5846  DD210000  00904                 ld ix,dictionary        
tables.asm(62): undefined symbol
584A  CDEC57    00905                 call print_table_entry
584D  CD5F58    00906                 call print_space
5850  DDE1      00907                 pop ix          ; restore ix (our table index)
5852  DD23      00908                 inc ix          ; move to next word id
5854  C1        00909                 pop bc          ; restore loop counter
5855  04        00910                 inc b
5856  C33458    00911                 jp _l2$ 
5859  DDE1      00912 _xS             pop ix
585B  D1        00913                 pop de
585C  C1        00914                 pop bc
585D  F1        00915                 pop af
585E  C9        00916                 ret
                00917         
                00918 ;prints a space (registers are preserved)
                00919 print_space
585F  C5        00920         push bc
5860  D5        00921         push de
5861  FDE5      00922         push iy
5863  3E20      00923         ld a,20h        ; ascii space
5865  CD3300    00924         call CRTBYTE
5868  FDE1      00925         pop iy
586A  D1        00926         pop de
586B  C1        00927         pop bc
586C  C9        00928         ret
                00929 
                00930 ;prints a space (registers are preserved)
                00931 printcr
586D  F5        00932         push af
586E  C5        00933         push bc
586F  D5        00934         push de
5870  FDE5      00935         push iy
5872  3E0D      00936         ld a,0dh ; carriage return
5874  CD3300    00937         call CRTBYTE
5877  FDE1      00938         pop iy
5879  D1        00939         pop de
587A  C1        00940         pop bc
587B  F1        00941         pop af
587C  C9        00942         ret     
                00943 
                00944 ;get table index
                00945 ;returns the table index in the word in b (or ff if not found)
                00946 ;ix contains the address of the word to find
                00947 ;iy contains the address of the table to search
                00948 ;c is clobbered
                00949 *MOD
                00950 get_table_index
587D  D5        00951                 push de
587E  0600      00952                 ld b,0
5880  FD7E00    00953 $_lpT   ld a,(iy)
5883  FEFF      00954                 cp 255 ; hit end
5885  CAA658    00955                 jp z,$_nfT
5888  FD23      00956                 inc     iy ; skip len byte
588A  CD6F59    00957                 call streq ; test equality - result in a
588D  FE01      00958                 cp 1    ; done - b contains index
588F  CAA858    00959                 jp z,$_xT       ;jump if found
5892  04        00960                 inc b           ;update loop counter (index)
5893  FD2B      00961                 dec iy          ;back up an get length byte
5895  1600      00962                 ld d,0
5897  FD5E00    00963                 ld e,(iy)
589A  FD19      00964                 add iy,de       ; skip to next string
589C  FD23      00965                 inc iy          ; skip length byte
589E  FD23      00966                 inc iy          ; skip null
58A0  C38058    00967                 jp $_lpT        ;repeat
58A3  C3A858    00968                 jp $_xT
58A6  06FF      00969 $_nfT   ld b,255                
58A8  D1        00970 $_xT    pop de
58A9  C9        00971                 ret
                00972         
                00973 ;returns the object id for the object whose
                00974 ;'word' is supplied in b
                00975 ;the value replaces the parameter
                00976 ;only visible objects will be considered
                00977 ;c is clobbered
                00978 *MOD
                00979 get_obj_id
58AA  F5        00980                 push af
58AB  D5        00981                 push de
58AC  DDE5      00982                 push ix
58AE  50        00983                 ld d,b ; word id to 'd'
58AF  CDBA5D    00984                 call get_player_room
58B2  47        00985                 ld b,a ; save it in b
58B3  DD210000  00986                 ld ix,obj_word_table
tables.asm(144): undefined symbol
58B7  DD7E00    00987 $lpU    ld a,(ix)       ; hit end of table?
58BA  FEFF      00988                 cp 255
58BC  CAEE58    00989                 jp z,$nfU
58BF  4F        00990                 ld c,a ; the current object
58C0  CDC85D    00991                 call b_ancestor_of_c  ; reslt->a. Note this should really check visibility
58C3  FE00      00992                 cp 0
58C5  CADD58    00993                 jp z,$cU    ; can't see it - go to next obj
58C8  DD7E01    00994                 ld a,(ix+1)     ;  get word entry
58CB  BA        00995                 cp d            ;  equal to supplied word?
58CC  CAE858    00996                 jp z, $_yU
58CF  DD7E02    00997                 ld a,(ix+2)             ; get lp counter
58D2  BA        00998                 cp d            ;  equal to supplied word?
58D3  CAE858    00999                 jp z, $_yU
58D6  DD7E03    01000                 ld a,(ix+3)     ;get object's word entry
58D9  BA        01001                 cp d            ;  equal to supplied word?
58DA  CAE858    01002                 jp z, $_yU
58DD  DD23      01003 $cU             inc ix          ; not found. increment ix to next entry
58DF  DD23      01004                 inc ix          
58E1  DD23      01005                 inc ix          
58E3  DD23      01006                 inc ix          
58E5  C3B758    01007                 jp $lpU ; go to next object
58E8  DD4600    01008 $_yU    ld b,(ix)       ; they match! back up put the id in b
58EB  C3F058    01009                 jp $_xU
58EE  06FF      01010 $nfU    ld b,255        ; not found code
58F0  DDE1      01011 $_xU    pop ix
58F2  D1        01012                 pop de
58F3  F1        01013                 pop af
58F4  C9        01014                 ret
                01015 
                01016 
                01017 ;get_verb_id
                01018 ;the verb is assumed to be in word1
                01019 ;returns the id # of the verb in a
                01020 *MOD
                01021 get_verbs_id
58F5  C5        01022                 push bc
58F6  D5        01023                 push de
58F7  E5        01024                 push hl
58F8  DDE5      01025                 push ix
58FA  FDE5      01026                 push iy
58FC  FD215D55  01027                 ld iy,word1
5900  DD210000  01028                 ld ix,verb_table
tables.asm(186): undefined symbol
5904  DD7E00    01029 $lpV    ld a,(ix)       ;save the id byte
5907  47        01030                 ld b,a
5908  FEFF      01031                 cp 0ffh 
590A  CA2959    01032                 jp z, $xV               ; hit end of table
590D  1600      01033                 ld d,0                  ; set up de with len
590F  DD23      01034                 inc ix
5911  DD5E00    01035                 ld e,(ix)               ; get length byte
5914  DD23      01036                 inc ix                  ;ix now at text
5916  CD6F59    01037                 call streq
5919  FE01      01038                 cp 1   
591B  CA2959    01039                 jp z,$xV
591E  DDE5      01040                 push ix         ;move ix to hl
5920  E1        01041                 pop hl
5921  19        01042                 add hl,de       ; skip text (add length)
5922  23        01043                 inc hl          ; skip null
5923  E5        01044                 push hl         ;transfer back to 2
5924  DDE1      01045                 pop ix  ; ix is always 2 bytes past hl
5926  C30459    01046                 jp $lpV
5929  78        01047 $xV             ld a,b
592A  FDE1      01048                 pop iy
592C  DDE1      01049                 pop ix
592E  E1        01050                 pop hl
592F  D1        01051                 pop de
5930  C1        01052                 pop bc
5931  C9        01053                 ret
                01054                 
                01055 *INCLUDE strings.asm
                01056 ;z80 parser
                01057 ;returns len of str in hl in bc
                01058 *MOD
                01059 strlen
5932  F5        01060                 push af
5933  E5        01061                 push hl
5934  010000    01062                 ld bc,0
5937  7E        01063 $lpW    ld a,(hl)
5938  03        01064                 inc bc  ; inc char to copy
5939  23        01065                 inc hl  ; inc index
593A  FE00      01066                 cp 0d  ; hit null?
593C  CA4259    01067                 jp z,$xW
593F  C33759    01068                 jp $lpW
5942  E1        01069 $xW             pop hl
5943  F1        01070                 pop af
5944  C9        01071                 ret
                01072  
                01073 ;moves the string from hl to de
                01074 *MOD
                01075 strcpy
5945  F5        01076         push af
5946  C5        01077         push bc
5947  CD3259    01078         call strlen ; puts len in bc
594A  EDB0      01079         ldir            ; copy bc chars from hl to de
594C  C1        01080         pop bc
594D  F1        01081         pop af
594E  C9        01082         ret
                01083         
                01084 ;copies string in ix
                01085 ;to iy
                01086 strcpyi
594F  F5        01087         push af
5950  DDE5      01088         push ix
5952  FDE5      01089         push iy
5954  DD7E00    01090 lpX ld a,(ix)
5957  FD7700    01091         ld (iy),a
595A  FE00      01092         cp 0            ; null?
595C  CA6959    01093         jp z,$_xX
595F  DD23      01094         inc ix
5961  FD23      01095         inc iy
5963  CA6959    01096         jp z,$_xX
5966  C35459    01097         jp lpX
5969  FDE1      01098 $_xX    pop iy
596B  DDE1      01099         pop ix
596D  F1        01100         pop af
596E  C9        01101         ret     
                01102 
                01103 ;compares string in ix and iy
                01104 ;returns 1 or 0 in a
                01105 *MOD
                01106 streq
596F  C5        01107         push bc
5970  DDE5      01108         push ix
5972  FDE5      01109         push iy
5974  DD7E00    01110 $lpY ld a,(ix)  ; get a byte
5977  DD23      01111         inc ix
5979  FD4600    01112         ld b,(iy) ; compare it
597C  FD23      01113         inc iy
597E  B8        01114         cp b
597F  C28F59    01115         jp nz,$nY
5982  FE00      01116         cp 0; they were equal. hit end$
5984  CA8A59    01117         jp z,$yY
5987  C37459    01118         jp $lpY ; repeat        
598A  3E01      01119 $yY  ld a,1
598C  C39159    01120     jp $xY      
598F  3E00      01121 $nY     ld a,0
5991  FDE1      01122 $xY     pop iy
5993  DDE1      01123         pop ix
5995  C1        01124         pop bc
5996  C9        01125         ret 
                01126 
                01127 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                01128 ;Converts a to upper case
                01129 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                01130 *MOD
                01131 atoupper
5997  FE61      01132         cp 97
5999  FAA359    01133         jp m,$xZ
599C  FE7A      01134         cp 122
599E  F2A359    01135         jp p,$xZ
59A1  D620      01136         sub 32
59A3  C9        01137 $xZ     ret
                01138 
                01139 *INCLUDE checksZ80.asm
                01140 ;check rules for z80 shell
                01141 
    = 0000      01142 ID equ 0
                01143 HOLDER equ 1
    = 0011      01144 OBJ_ATTRS_SIZE equ 17
    = 0013      01145 OBJ_SIZE equ 19
                01146 
                01147 ;returns 1 or 0 in register a
                01148 ;not sure we need this check anympre
                01149 check_see_dobj
                01150 ;       push af
                01151 ;       push bc
                01152 ;       push hl
                01153 ;   call get_player_room
                01154 ;       ld b,a
                01155 ;       ld a,(sentence+1)
                01156 ;       ld c,a
                01157 ;       call b_ancestor_of_c
                01158 ;       cp 1
                01159 ;       jp z,$y?;
                01160 ;       ld hl,nosee
                01161 ;       call OUTLIN
                01162 ;       call printcr
                01163 ;       jp $x?
                01164 ;$y?    pop hl
                01165 ;       pop bc
                01166 ;       pop af
59A4  C9        01167         ret
                01168 
                01169 
                01170 ;returns 1 or 0 in register a
                01171 check_see_iobj
59A5  C9        01172         ret
                01173 
                01174 check_dobj_supplied
59A6  C9        01175         ret
                01176 
                01177 check_iobj_supplied
59A7  C9        01178         ret
                01179 
                01180 
                01181 *MOD
                01182 check_dobj_portable
59A8  3A6456    01183         ld a,(sentence+1)
59AB  47        01184         ld b,a  
59AC  0E09      01185         ld c,PORTABLE
59AE  CD615D    01186         call get_obj_prop
59B1  FE01      01187         cp 1
59B3  CAC159    01188         jp z,$xBA
59B6  21D75F    01189         ld hl,notportable
59B9  CD6552    01190         call OUTLIN
59BC  CD6D58    01191         call printcr
59BF  33        01192         inc sp
59C0  33        01193         inc sp
59C1  C9        01194 $xBA    ret
                01195         
                01196 *MOD
                01197 check_have_dobj 
59C2  0601      01198         ld b,PLAYER_ID
59C4  3A6456    01199         ld a,(sentence+1)
59C7  4F        01200         ld c,a
59C8  CDC85D    01201         call b_ancestor_of_c
59CB  FE01      01202         cp 1
59CD  CADB59    01203         jp z,$xBB
59D0  212363    01204         ld hl,donthave
59D3  CD6552    01205         call OUTLIN
59D6  CD6D58    01206         call printcr
59D9  33        01207         inc sp
59DA  33        01208         inc sp
59DB  C9        01209 $xBB    ret
                01210 
                01211 *MOD
                01212 check_dont_have_dobj 
59DC  0601      01213         ld b,PLAYER_ID
59DE  3A6456    01214         ld a,(sentence+1)
59E1  4F        01215         ld c,a
59E2  CDC85D    01216         call b_ancestor_of_c
59E5  FE00      01217         cp 0
59E7  CAF559    01218         jp z,$xBC
59EA  21EF5F    01219         ld hl,alreadyhave
59ED  CD6552    01220         call OUTLIN
59F0  CD6D58    01221         call printcr
59F3  33        01222         inc sp
59F4  33        01223         inc sp
59F5  C9        01224 $xBC    ret
                01225 
                01226 *MOD    
                01227 check_dobj_opnable
59F6  3A6456    01228         ld a,(sentence+1)
59F9  47        01229         ld b,a  
59FA  0E05      01230         ld c,OPENABLE
59FC  CD615D    01231         call get_obj_prop
59FF  FE01      01232         cp 1
5A01  CA0F5A    01233         jp z,$xBD
5A04  210A5D    01234         ld hl,notopenable
5A07  CD6552    01235         call OUTLIN
5A0A  CD6D58    01236         call printcr
5A0D  33        01237         inc sp
5A0E  33        01238         inc sp
5A0F  C9        01239 $xBD    ret
                01240 
                01241 *MOD    
                01242 check_dobj_open
5A10  3A6456    01243         ld a,(sentence+1)
5A13  47        01244         ld b,a  
5A14  0E06      01245         ld c,OPEN
5A16  CD615D    01246         call get_obj_prop
5A19  FE01      01247         cp 1
5A1B  CA295A    01248         jp z,$xBE
5A1E  21F561    01249         ld hl,closed
5A21  CD6552    01250         call OUTLIN
5A24  CD6D58    01251         call printcr
5A27  33        01252         inc sp
5A28  33        01253         inc sp
5A29  C9        01254 $xBE    ret
                01255 
                01256 
                01257 *MOD
                01258 check_dobj_unlocked
5A2A  3A6456    01259         ld a,(sentence+1)
5A2D  47        01260         ld b,a  
5A2E  0E08      01261         ld c,LOCKED
5A30  CD615D    01262         call get_obj_prop
5A33  FE00      01263         cp 0
5A35  CA435A    01264         jp z,$xBF
5A38  21BF5C    01265         ld hl,itslocked
5A3B  CD6552    01266         call OUTLIN
5A3E  CD6D58    01267         call printcr
5A41  33        01268         inc sp
5A42  33        01269         inc sp
5A43  C9        01270 $xBF    ret
                01271 
                01272 *MOD
                01273 check_dobj_locked
5A44  3A6456    01274         ld a,(sentence+1)
5A47  47        01275         ld b,a  
5A48  0E08      01276         ld c,LOCKED
5A4A  CD615D    01277         call get_obj_prop
5A4D  FE01      01278         cp 1
5A4F  CA5D5A    01279         jp z,$xBG
5A52  21BC5A    01280         ld hl,notlocked
5A55  CD6552    01281         call OUTLIN
5A58  CD6D58    01282         call printcr
5A5B  33        01283         inc sp
5A5C  33        01284         inc sp
5A5D  C9        01285 $xBG    ret
                01286 
                01287 *MOD
                01288 check_dobj_closed
5A5E  3A6456    01289                 ld a,(sentence+1)
5A61  47        01290                 ld b,a  
5A62  0E06      01291                 ld c,OPEN
5A64  CD615D    01292                 call get_obj_prop
5A67  FE00      01293                 cp 0
5A69  CA775A    01294                 jp z,$xBH
5A6C  21CC5C    01295                 ld hl,alreadyopen
5A6F  CD6552    01296                 call OUTLIN
5A72  CD6D58    01297                 call printcr
5A75  33        01298                 inc sp
5A76  33        01299                 inc sp
5A77  C9        01300 $xBH            ret
                01301 
                01302 ;checks if the do is a child of the io  
                01303 *MOD
                01304 check_not_self_or_child
                01305 
5A78  C9        01306 $xBI    ret
                01307 
                01308 ;checks if the do is a child of the io  
                01309 ;returns 1 or 0 in 'a'
                01310 ;1 means the containership is invalid
                01311 *MOD
                01312 check_nested_containership
5A79  C5        01313         push bc
5A7A  00        01314         nop ; check self
5A7B  3A6456    01315         ld a,(sentence+1)
5A7E  47        01316         ld b,a
5A7F  3A6656    01317         ld a,(sentence+3)
5A82  B8        01318         cp b
5A83  CA945A    01319         jp z,$nBJ
5A86  00        01320         nop ; check contains
5A87  CDC85D    01321         call b_ancestor_of_c
5A8A  FE01      01322         cp 1
5A8C  CA945A    01323         jp z,$nBJ; 
5A8F  3E00      01324         ld a,0
5A91  C39F5A    01325         jp $xBJ
5A94  216862    01326 $nBJ ld hl,impossible
5A97  CD6552    01327         call OUTLIN
5A9A  CD6D58    01328         call printcr
5A9D  3E00      01329         ld a,0
5A9F  C1        01330 $xBJ    pop bc
5AA0  C9        01331         ret
                01332 
                01333 *MOD
                01334 check_prep_supplied
5AA1  C9        01335         ret
                01336 
                01337 
                01338 *MOD
                01339 check_iobj_container
5AA2  3A6656    01340                 ld a,(sentence+3)
5AA5  47        01341                 ld b,a  
5AA6  0E11      01342                 ld c,PROPERTY_BYTE_1
5AA8  CD615D    01343                 call get_obj_prop
5AAB  E606      01344                 and CONTAINER_MASK + SUPPORTER_MASK
5AAD  C2BB5A    01345                 jp nz,$xBL
5AB0  212C62    01346                 ld hl,notcontainer
5AB3  CD6552    01347                 call OUTLIN
5AB6  CD6D58    01348                 call printcr
5AB9  33        01349                 inc sp
5ABA  33        01350                 inc sp
5ABB  C9        01351 $xBL            ret
                01352         
5ABC  594F5520  01353 notlocked DB "YOU DON'T SEE THAT.",0h   
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
5AD0  594F5520  01354 nosee DB "YOU DON'T SEE THAT.",0h       
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
                01355         
                01356 *INCLUDE sentencesZ80.asm
                01357 ;sentences running routines
                01358 *MOD
                01359 run_sentence
                01360                 ;run checks (these return if not met)           
5AE4  DD210000  01361                 ld ix,check_table
sentencesZ80.asm(5): undefined symbol
5AE8  DD7E00    01362 $lpBM   ld a,(ix)
5AEB  FEFF      01363                 cp 255
5AED  CA115B    01364                 jp z,$dBM
5AF0  3A6356    01365                 ld a,(sentence)
5AF3  DDBE00    01366                 cp (ix) ; compare to verb
5AF6  C2085B    01367                 jp nz,$cBM
5AF9  DD23      01368                 inc ix
5AFB  21065B    01369                 ld hl,$nxtBM
5AFE  E5        01370                 push hl  ; "call" to check rountine
5AFF  DD6E00    01371                 ld l,(ix)
5B02  DD6601    01372                 ld h,(ix+1)
5B05  E9        01373                 jp (hl)
5B06  DD2B      01374 $nxtBM  dec ix
5B08  DD23      01375 $cBM            inc ix  ; skip to next entry
5B0A  DD23      01376                 inc ix
5B0C  DD23      01377                 inc ix
5B0E  C3E85A    01378                 jp $lpBM
5B11  00        01379 $dBM            nop;
                01380                 ;return before
5B12  DD210000  01381                 ld ix,preactions_table
sentencesZ80.asm(25): undefined symbol
5B16  CD305B    01382                 call run_actions
                01383                 ;run instead
5B19  DD210000  01384                 ld ix,actions_table
sentencesZ80.asm(28): undefined symbol
5B1D  CD305B    01385                 call run_actions
5B20  3AAD5B    01386                 ld a,(action_run)
5B23  FE01      01387                 cp 1
5B25  C4AE5B    01388                 call nz,run_default_sentence
                01389                 ;run 'after' actions
5B28  DD210000  01390                 ld ix,postactions_table
sentencesZ80.asm(34): undefined symbol
5B2C  CD305B    01391                 call run_actions
5B2F  C9        01392                 ret
                01393 
                01394 ;actions table in ix
                01395 ;post condition: action_run = 1
                01396 ;if a sentence was run
                01397 
                01398 *MOD
                01399 run_actions
5B30  DDE5      01400         push ix
5B32  FDE5      01401         push iy
5B34  FD216356  01402         ld iy,sentence
5B38  CD4F5B    01403         call run_actions_
5B3B  3AAD5B    01404         ld a,(action_run)
5B3E  FE01      01405         cp 1
5B40  CA4A5B    01406         jp z,$xBN
5B43  FD21135C  01407         ld iy,wildcards
5B47  CD4F5B    01408         call run_actions_       
5B4A  FDE1      01409 $xBN    pop iy
5B4C  DDE1      01410         pop ix
5B4E  C9        01411         ret
                01412 
                01413 *MOD
                01414 run_actions_
5B4F  C5        01415                 push bc
5B50  D5        01416                 push de
5B51  E5        01417                 push hl
5B52  DDE5      01418                 push ix 
5B54  FDE5      01419                 push iy 
5B56  3E00      01420                 ld a,0                          ; clear flag
5B58  32AD5B    01421                 ld (action_run),a
                01422 ;               ld iy,sentence
5B5B  110600    01423                 ld de,6         ;size of entry
5B5E  DD7E00    01424 @lpBO   ld a,(ix)       ; load verb from table
5B61  FEFF      01425                 cp 0ffh         ; hit end of table
5B63  CAA55B    01426                 jp z,$xBO 
5B66  FDBE00    01427                 cp (iy)         ; verb match
5B69  C2A05B    01428                 jp nz,$cBO
5B6C  DD7E01    01429                 ld a,(ix+1)
5B6F  FDBE01    01430                 cp (iy+1)                               
5B72  C2A05B    01431                 jp nz,$cBO                      ; d.o.'s don't match
5B75  DD7E02    01432                 ld a,(ix+2)
5B78  FDBE02    01433                 cp (iy+2)               
5B7B  C2A05B    01434                 jp nz,$cBO                      ; preps don't match
5B7E  DD7E03    01435                 ld a,(ix+3)
5B81  FDBE03    01436                 cp (iy+3)               
5B84  C2A05B    01437                 jp nz,$cBO                      ; i.o. 's don't match
5B87  DDE5      01438                 push ix ; ix -> hl
5B89  E1        01439                 pop hl
5B8A  23        01440                 inc hl  ; move 4 bytes to sub routine
5B8B  23        01441                 inc hl
5B8C  23        01442                 inc hl
5B8D  23        01443                 inc hl
5B8E  5E        01444                 ld e,(hl)
5B8F  23        01445                 inc hl
5B90  56        01446                 ld d,(hl)
5B91  D5        01447                 push de ; de -> hl
5B92  E1        01448                 pop hl
5B93  01985B    01449         ld bc,$nxtBO      ; push return addr on stack
5B96  C5        01450                 push bc
5B97  E9        01451                 jp (hl)                 ; return will pop stack
5B98  3E01      01452 $nxtBO  ld a,1
5B9A  32AD5B    01453                 ld (action_run),a
5B9D  C3A55B    01454                 jp $xBO                         ; done 
5BA0  DD19      01455 $cBO            add ix,de                       ; skip to next entry 
5BA2  C35E5B    01456                 jp @lpBO
5BA5  FDE1      01457 $xBO            pop iy
5BA7  DDE1      01458                 pop ix
5BA9  E1        01459                 pop hl
5BAA  D1        01460                 pop de
5BAB  C1        01461                 pop bc
5BAC  C9        01462                 ret
                01463 
5BAD  00        01464 action_run DB 0
                01465 *MOD
                01466 run_default_sentence
5BAE  C5        01467                 push bc
5BAF  D5        01468                 push de
5BB0  E5        01469                 push hl
5BB1  DD21E563  01470                 ld ix,sentence_table
5BB5  110300    01471 $lpBP   ld de,3         ; reload de
5BB8  DD7E00    01472                 ld a,(ix)
5BBB  FEFF      01473                 cp 0ffh ; end?
5BBD  CADD5B    01474                 jp z,$xBP
5BC0  216356    01475                 ld hl,sentence
5BC3  BE        01476                 cp (hl)         ; equal to verb?
5BC4  C2D85B    01477                 jp nz,$cBP
5BC7  DDE5      01478                 push ix ; ix -> hl
5BC9  E1        01479                 pop hl
5BCA  23        01480                 inc hl          ;skip 1 byte to function address
5BCB  5E        01481                 ld e,(hl)
5BCC  23        01482                 inc hl
5BCD  56        01483                 ld d,(hl)
5BCE  D5        01484                 push de ; de -> hl
5BCF  E1        01485                 pop hl
5BD0  01D55B    01486         ld bc,$nxtBP      ; push return addr on stack
5BD3  C5        01487                 push bc
5BD4  E9        01488                 jp (hl)                 ; return will pop stack
5BD5  110300    01489 $nxtBP  ld de,3         ; reload de
5BD8  DD19      01490 $cBP            add ix,de               ;skip to next
5BDA  C3B55B    01491                 jp $lpBP
5BDD  E1        01492 $xBP            pop hl
5BDE  D1        01493                 pop de
5BDF  C1        01494                 pop bc
5BE0  C9        01495                 ret
                01496 
                01497 ;replaces io and do with 254 (ANY_OBJECT)
                01498 *MOD            
                01499 wildcardize
5BE1  3A6356    01500         ld a,(sentence) ; copy verb
5BE4  32135C    01501         ld (wildcards),a
5BE7  3A6556    01502         ld a,(sentence+2) ; copy prep
5BEA  32155C    01503         ld (wildcards+2),a
5BED  3EFF      01504         ld a,255                ;store do
5BEF  32145C    01505         ld (wildcards+1),a
5BF2  3A6456    01506         ld a,(sentence+1)
5BF5  FEFF      01507         cp 255                  ;was do blank?
5BF7  CAFF5B    01508         jp z,$nBQ
5BFA  3EFE      01509         ld a,ANY_OBJECT ;no, store '*'
5BFC  32145C    01510         ld (wildcards+1),a
5BFF  00        01511 $nBQ    nop ; repeat for io
5C00  3EFF      01512         ld a,255                ;store io
5C02  32165C    01513         ld (wildcards+3),a
5C05  3A6656    01514         ld a,(sentence+3)
5C08  FEFF      01515         cp 255                  ;was do blank?
5C0A  CA125C    01516         jp z,$oBQ
5C0D  3EFE      01517         ld a,ANY_OBJECT ;no, store '*'
5C0F  32165C    01518         ld (wildcards+3),a
5C12  C9        01519 $oBQ    ret
                01520         
5C13  00000000  01521 wildcards DB 0,0,0,0
                01522 *INCLUDE movementZ80.asm
                01523 ;movement.asm
                01524 ;puts move dir in a
                01525 
                01526 *MOD
                01527 move_player
5C17  C5        01528                 push bc
5C18  D5        01529                 push de
5C19  DDE5      01530                 push ix
                01531                 ;convert the verb to a direction
5C1B  CDBA5D    01532                 call get_player_room
5C1E  47        01533                 ld b,a ; save room
5C1F  CD805C    01534                 call get_move_dir
5C22  4F        01535                 ld c,a  ;direction code
5C23  CD1F5D    01536                 call get_obj_attr ; dir in 'a'->
5C26  57        01537                 ld d,a  ; save 'door' for later
5C27  FE80      01538                 cp 128  ; ? is it positive or negative
5C29  FA3C5C    01539                 jp m,$goBR
5C2C  ED44      01540                 neg             ; flip accumulator (2's complement)
5C2E  47        01541                 ld b,a
5C2F  DD210000  01542                 ld ix,nogo_table
movementZ80.asm(20): undefined symbol
5C33  CDEC57    01543                 call print_table_entry
5C36  CD6D58    01544                 call printcr
5C39  C37A5C    01545                 jp $xBR
5C3C  00        01546 $goBR   nop ; is 'a' a door?
5C3D  5F        01547                 ld e,a
5C3E  47        01548                 ld b,a
5C3F  0E0F      01549                 ld c,DOOR
5C41  CD615D    01550                 call get_obj_prop
5C44  FE01      01551                 cp 1 
5C46  7B        01552                 ld a,e  
5C47  C2705C    01553                 jp nz,$go2BR   ; not a door- just go
5C4A  00        01554                 nop ; is it closed?
5C4B  0E06      01555                 ld c,OPEN ; b still contains obj id
5C4D  CD615D    01556                 call get_obj_prop
5C50  FE01      01557                 cp 1                    
5C52  C2645C    01558                 jp nz,$dcBR     ; not closed
5C55  00        01559                 nop ; load the door's  direction attr into 'a'
5C56  CD805C    01560                 call get_move_dir ; dir in 'a'->
5C59  4F        01561                 ld c,a  ; direction
5C5A  CD1F5D    01562                 call get_obj_attr ; dir in 'a'->
5C5D  42        01563                 ld b,d   ; door
5C5E  CD1F5D    01564                 call get_obj_attr  ; get dir a leave in 'a'
5C61  C3705C    01565                 jp $go2BR
5C64  21A55C    01566 $dcBR   ld hl,doorclosed
5C67  CD6552    01567                 call OUTLIN
5C6A  CD6D58    01568                 call printcr
5C6D  C37A5C    01569                 jp $xBR 
5C70  0601      01570 $go2BR  ld b,PLAYER_ID          ; move player to location
5C72  0E01      01571                 ld c,HOLDER_ID
5C74  CD405D    01572                 call set_obj_attr       
5C77  CD6B56    01573                 call look_sub
5C7A  DDE1      01574 $xBR            pop ix
5C7C  D1        01575                 pop de
5C7D  C1        01576                 pop bc
5C7E  C9        01577                 ret
                01578 
                01579 enter_sub
5C7F  C9        01580                 ret
                01581         
                01582 ;puts move dir (attr) in a      
                01583 *MOD
                01584 get_move_dir
5C80  D5        01585                 push de
5C81  DDE5      01586                 push ix
5C83  DD21985C  01587                 ld ix,direction_map
5C87  3A6356    01588                 ld a,(sentence) ; get verb
5C8A  D600      01589                 sub n_verb_id
movementZ80.asm(67): undefined symbol
5C8C  1600      01590                 ld d,0
5C8E  5F        01591                 ld e,a
5C8F  DD19      01592                 add ix,de
5C91  DD7E00    01593                 ld a,(ix)       
5C94  DDE1      01594                 pop ix
5C96  D1        01595                 pop de
5C97  C9        01596                 ret
                01597 
                01598 ;direction table
                01599 ;maps direction verb id to the attribute numbers
                01600 direction_map
5C98  04        01601         DB 4 ; N
5C99  05        01602         DB 5 ; SOUTH
5C9A  06        01603         DB 6 ; EAST
5C9B  07        01604         DB 7 ; WEST 
5C9C  08        01605         DB 8 ; NORTHEAST 
5C9D  09        01606         DB 9 ; SOUTHEAST 
5C9E  0A        01607         DB 10 ;SOUTHWEST
5C9F  0B        01608         DB 11 ;NORTHWEST
5CA0  0C        01609         DB 12 ;UP 
5CA1  0D        01610         DB 13 ;DOWN 
5CA2  0E        01611         DB 14 ;ENTER 
5CA3  0F        01612         DB 15 ;OUT 
5CA4  FF        01613         DB 0ffh
                01614         
5CA5  54484520  01615 doorclosed DB "THE DOOR IS CLOSED.",0h  
      44 4F 4F 52 20 49 53 20
      43 4C 4F 53 45 44 2E 00
                01616 *INCLUDE containersZ80.asm
                01617 ;container routines
                01618 *MOD
                01619  
                01620                 
5CB9  444F4E45  01621 done DB "DONE.",0h
      2E 00                  
5CBF  49542753  01622 itslocked DB "IT'S LOCKED.",0h
      20 4C 4F 43 4B 45 44 2E
      00                     
5CCC  49542753  01623 alreadyopen DB "IT'S ALREADY OPEN.",0h
      20 41 4C 52 45 41 44 59
      20 4F 50 45 4E 2E 00   
5CDF  49542753  01624 alreadyclosed DB "IT'S ALREADY CLOSED.",0h
      20 41 4C 52 45 41 44 59
      20 43 4C 4F 53 45 44 2E
      00                     
5CF4  54484154  01625 notcloseable DB "THAT'S NOT CLOSEABLE.",0h
      27 53 20 4E 4F 54 20 43
      4C 4F 53 45 41 42 4C 45
      2E 00                  
5D0A  54484154  01626 notopenable DB "THAT'S NOT OPENABLE.",0h
      27 53 20 4E 4F 54 20 4F
      50 45 4E 41 42 4C 45 2E
      00                     
                01627 
                01628 *INCLUDE routinesZ80.asm
                01629 ;z80 routines
                01630 
                01631 ;returns property c of object b in register a
                01632 *MOD
                01633 get_obj_attr
5D1F  C5        01634                 push bc
5D20  D5        01635                 push de
5D21  E5        01636                 push hl
5D22  DDE5      01637                 push ix
5D24  61        01638                 ld h,c  ; save attr in h
5D25  0E13      01639                 ld c,OBJ_ENTRY_SIZE
5D27  CDE95D    01640                 call bmulc
5D2A  C5        01641                 push bc ; bc->de
5D2B  D1        01642                 pop de
5D2C  DD210000  01643                 ld ix,obj_table
routinesZ80.asm(15): undefined symbol
5D30  DD19      01644                 add ix,de        ; add attr offset to ix
5D32  1600      01645                 ld d,0           ; create the attr offset
5D34  5C        01646                 ld e,h  
5D35  DD19      01647                 add ix,de        ; add attr offset to ix
5D37  DD7E00    01648                 ld a,(ix)    ; finally get the byte
5D3A  DDE1      01649                 pop ix
5D3C  E1        01650                 pop hl
5D3D  D1        01651                 pop de
5D3E  C1        01652                 pop bc
5D3F  C9        01653                 ret
                01654 
                01655 *MOD
                01656 ;set property c of object b to register a
                01657 set_obj_attr
5D40  C5        01658                 push bc
5D41  D5        01659                 push de
5D42  E5        01660                 push hl
5D43  DDE5      01661                 push ix
5D45  61        01662                 ld h,c
5D46  0E13      01663                 ld c,OBJ_ENTRY_SIZE
5D48  CDE95D    01664                 call bmulc
5D4B  C5        01665                 push bc
5D4C  D1        01666                 pop de
5D4D  DD210000  01667                 ld ix,obj_table
routinesZ80.asm(39): undefined symbol
5D51  DD19      01668                 add ix,de        ; add table offset to ix
5D53  1600      01669                 ld d,0
5D55  5C        01670                 ld e,h
5D56  DD19      01671                 add ix,de        ; move to byte
5D58  DD7700    01672                 ld (ix),a    ; finally get the byte
5D5B  DDE1      01673                 pop ix
5D5D  E1        01674                 pop hl
5D5E  D1        01675                 pop de
5D5F  C1        01676                 pop bc
5D60  C9        01677                 ret             
                01678                 
                01679 ;returns property c of object b in register a
                01680 ;the property should be 0-15 inclusive
                01681 *MOD
                01682 get_obj_prop
5D61  C5        01683                 push bc
5D62  D5        01684                 push de
5D63  1611      01685                 ld d,PROPERTY_BYTE_1
5D65  79        01686                 ld a,c ; get the correct byte
5D66  59        01687                 ld e,c ; save the prop to get (we need it later) 
5D67  FE08      01688                 cp 8
5D69  FA6D5D    01689                 jp m,$sBW ;jump on minus
5D6C  14        01690                 inc d   ; property is in the next byte
5D6D  4A        01691 $sBW            ld c,d  ; move byte to get to c
5D6E  CD1F5D    01692                 call get_obj_attr ; put attr byte 'c' in 'a'
5D71  43        01693             ld b,e      ; put prop to test in 'b'
5D72  CDA35D    01694                 call make_prop_mask ; puts mask from pop 'b' in 'b'
5D75  A0        01695                 and b ; test the bit in the mask (and leave result in 'a')
5D76  FE00      01696                 cp 0            ;it it's a zero, leave it
5D78  CA7D5D    01697                 jp z,$xBW
5D7B  3E01      01698                 ld a,1          ;conver non zero value to 1
5D7D  D1        01699 $xBW            pop de
5D7E  C1        01700                 pop bc
5D7F  C9        01701                 ret
                01702 
                01703 ;sets property c of object b to val in register 'a'
                01704 ;the property should be 0-15 inclusive
                01705 *MOD
                01706 set_obj_prop
5D80  C5        01707                 push bc
5D81  D5        01708                 push de
5D82  E5        01709                 push hl
5D83  6F        01710                 ld l,a ; save val
5D84  1611      01711                 ld d,PROPERTY_BYTE_1
5D86  79        01712                 ld a,c ; get the correct byte
5D87  59        01713                 ld e,c ; save the prop to get (we need it later) 
5D88  FE08      01714                 cp 8
5D8A  FA8E5D    01715                 jp m,$sBX ;jump on minus
5D8D  14        01716                 inc d   ; property is in the next byte
5D8E  4A        01717 $sBX            ld c,d  ; move byte to get to c
5D8F  CD1F5D    01718                 call get_obj_attr ; put attr byte 'c' in 'a'
5D92  60        01719                 ld h,b  ; save 'b' (the object)
5D93  43        01720                 ld b,e  ; put prop to test in 'b'
5D94  CDA35D    01721                 call make_prop_mask ; puts mask from pop 'b' in 'b'
5D97  B0        01722                 or b ; test the bit in the mask (and leave result in 'a')
5D98  44        01723                 ld b,h          ; put obj in 'b'
                01724                 ;ld a,b         ; now set it back (val->a)
5D99  3E01      01725                 ld a,1
5D9B  4A        01726                 ld c,d          ;the byte to store
5D9C  CD405D    01727                 call set_obj_attr ;  put a
5D9F  E1        01728 $xBX            pop hl
5DA0  D1        01729                 pop de
5DA1  C1        01730                 pop bc
5DA2  C9        01731                 ret
                01732                 
                01733                 
                01734 ;looks up the mask for the property number in b
                01735 ;mask is returned in 'b'
                01736 ;c is not changed
                01737 make_prop_mask
5DA3  D5        01738         push de
5DA4  E5        01739         push hl
5DA5  FDE5      01740         push iy
5DA7  FD21085E  01741         ld iy,mask_table 
5DAB  1600      01742         ld d,0  
5DAD  58        01743         ld e,b
5DAE  FD19      01744         add iy,de
5DB0  FD2B      01745         dec iy 
5DB2  FD4600    01746         ld b,(iy)       ; load mask from table
5DB5  FDE1      01747         pop iy
5DB7  E1        01748         pop hl
5DB8  D1        01749         pop de
5DB9  C9        01750         ret
                01751 
                01752 ;player room in 'a'
                01753 get_player_room
5DBA  C5        01754                 push bc
5DBB  0601      01755                 ld b,PLAYER_ID  
5DBD  0E01      01756                 ld c,HOLDER_ID
5DBF  CD1F5D    01757                 call get_obj_attr
5DC2  32E85D    01758                 ld (player_room),a
5DC5  C1        01759                 pop bc
5DC6  C9        01760                 ret
                01761 
                01762 inside_closed_container
5DC7  C9        01763                 ret
                01764                 
                01765 ;put 1 or 0 in a if b is an ancestor of c               
                01766 *MOD
                01767 b_ancestor_of_c
5DC8  C5        01768                 push bc
5DC9  D5        01769                 push de
5DCA  50        01770                 ld d,b ; save parent
5DCB  41        01771                 ld b,c ; child object
5DCC  0E01      01772                 ld c,HOLDER_ID
5DCE  CD1F5D    01773 $lpBY   call get_obj_attr ; puts holder in a
5DD1  BA        01774                 cp d            ; ancestor found
5DD2  CAE35D    01775                 jp z,$yBY
5DD5  FE00      01776                 cp 0            ; hit top level - ancestor not found
5DD7  CADE5D    01777                 jp z,$nBY
5DDA  47        01778                 ld b,a          ; is b's parent (reg a) a descendant of c
5DDB  C3CE5D    01779                 jp $lpBY
5DDE  3E00      01780 $nBY            ld a,0
5DE0  C3E55D    01781                 jp $xBY
5DE3  3E01      01782 $yBY            ld a,1
5DE5  D1        01783 $xBY            pop de
5DE6  C1        01784                 pop bc
5DE7  C9        01785                 ret
                01786                 
5DE8  00        01787 player_room DB 0
                01788 
                01789 ;multiple b x c and puts result in bc
                01790 ;registers are preserved
                01791 *MOD
                01792 bmulc 
5DE9  F5        01793                 push af
5DEA  D5        01794                 push de
5DEB  DDE5      01795                 push ix
5DED  1600      01796                 ld d,0 ; add c to b times
5DEF  59        01797                 ld e,c
5DF0  78        01798                 ld a,b ; use  b and loop counter
5DF1  DD210000  01799                 ld ix,0
5DF5  FE00      01800 $lpBZ   cp 0
5DF7  CA005E    01801                 jp z,$xBZ
5DFA  DD19      01802                 add ix,de
5DFC  3D        01803                 dec a
5DFD  C3F55D    01804                 jp $lpBZ
5E00  DDE5      01805 $xBZ            push ix ; ld bc,ix
5E02  C1        01806                 pop bc
5E03  DDE1      01807                 pop ix
5E05  D1        01808                 pop de
5E06  F1        01809                 pop af
5E07  C9        01810                 ret
                01811         
                01812 ;table of mask bytes for looking up
                01813 ;properties of objects          
                01814 mask_table
5E08  01        01815         DB SCENERY_MASK ;equ 1 
5E09  02        01816         DB SUPPORTER_MASK ;equ 2
5E0A  04        01817         DB CONTAINER_MASK ;equ 4
5E0B  08        01818         DB TRANSPARENT_MASK ;equ 8
5E0C  10        01819         DB OPENABLE_MASK ;equ 16
5E0D  20        01820         DB OPEN_MASK ;equ 32
5E0E  40        01821         DB LOCKABLE_MASK ;equ 64
5E0F  80        01822         DB LOCKED_MASK ;equ 128
5E10  01        01823         DB PORTABLE_MASK ;equ 1
5E11  02        01824         DB BACKDROP_MASK ;equ 2
5E12  04        01825         DB DRINKABLE_MASK ;equ 4
5E13  08        01826         DB FLAMMABLE_MASK ;equ 8
5E14  10        01827         DB LIGHTABLE_MASK ;equ 16
5E15  20        01828         DB LIT_MASK ;equ 32     
5E16  40        01829         DB DOOR_MASK ;equ 64
5E17  80        01830         DB UNUSED_MASK ;equ 128
                01831 
                01832                 
                01833 *INCLUDE inventoryZ80.asm
                01834 ;inventory_sub
                01835 *MOD
                01836 inventory_sub
5E18  F5        01837                 push af
5E19  3E01      01838                 ld a,PLAYER_ID
5E1B  CD8D5E    01839                 call has_contents
5E1E  FE01      01840                 cp 1
5E20  C2355E    01841                 jp nz,$nCA
5E23  21AD5F    01842                 ld hl,carrying
5E26  CD6552    01843             call OUTLIN
5E29  CD6D58    01844                 call printcr
5E2C  00        01845                 nop; recurse through child items
5E2D  3E01      01846                 ld a,PLAYER_ID
5E2F  CD405E    01847                 call print_contents
5E32  C33E5E    01848                 jp $xCA         
5E35  21975F    01849 $nCA            ld hl,noitems
5E38  CD6552    01850             call OUTLIN
5E3B  CD6D58    01851                 call printcr
5E3E  F1        01852 $xCA            pop af
5E3F  C9        01853                 ret
                01854 
                01855 ;prints name of a and it's contents of obj in 'a'
                01856 *MOD
                01857 print_contents
5E40  C5        01858                 push bc
5E41  D5        01859                 push de
5E42  E5        01860                 push hl
5E43  DDE5      01861                 push ix
5E45  47        01862                 ld b,a  ; save parent
5E46  111300    01863                 ld de,OBJ_ENTRY_SIZE
5E49  DD210000  01864                 ld ix,obj_table
inventoryZ80.asm(31): undefined symbol
5E4D  DD7E00    01865 $lpCB   ld a,(ix)
5E50  FEFF      01866                 cp 0ffh
5E52  CA865E    01867                 jp z,$xCB
5E55  DD7E01    01868                 ld a,(ix+HOLDER_ID)
5E58  B8        01869                 cp b
5E59  C2815E    01870                 jp nz,$cCB
5E5C  DDCB1146  01871                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)  ; test scenery bit
5E60  C2815E    01872                 jp nz,$cCB
5E63  DD7E00    01873                 ld a,(ix)
5E66  CD4D5F    01874                 call indent
5E69  CD7A5F    01875                 call printa
5E6C  CD1958    01876                 call print_obj_name
5E6F  CD6D58    01877                 call printcr
5E72  00        01878                 nop ; need to test container/supporter
5E73  DDCB1156  01879                 bit CONTAINER_BIT,(ix+PROPERTY_BYTE_1)
5E77  C40B5F    01880                 call nz,print_container_contents
5E7A  DDCB114E  01881                 bit SUPPORTER_BIT,(ix+PROPERTY_BYTE_1)
5E7E  C42C5F    01882                 call nz,print_supporter_contents
5E81  DD19      01883 $cCB            add ix,de
5E83  C34D5E    01884                 jp $lpCB
5E86  47        01885 $xCB            ld b,a  ; found flag->a
5E87  DDE1      01886                 pop ix
5E89  E1        01887                 pop hl
5E8A  D1        01888                 pop de
5E8B  C1        01889                 pop bc          
5E8C  C9        01890                 ret
                01891                 
                01892 ;if 'a' has any visible items
                01893 ;1 is returned in 'a' otherwise 0
                01894 *MOD
                01895 has_contents
5E8D  C5        01896                 push bc
5E8E  D5        01897                 push de
5E8F  E5        01898                 push hl
5E90  DDE5      01899                 push ix
5E92  67        01900                 ld h,a
5E93  0600      01901                 ld b,0  ; found flag
5E95  111300    01902                 ld de,OBJ_ENTRY_SIZE
5E98  DD210000  01903                 ld ix,obj_table
inventoryZ80.asm(70): undefined symbol
5E9C  DD7E00    01904 $lpCC   ld a,(ix)
5E9F  FEFF      01905                 cp 0ffh
5EA1  CABC5E    01906                 jp z,$xCC
5EA4  DD7E01    01907                 ld a,(ix+HOLDER_ID)
5EA7  BC        01908                 cp h
5EA8  C2B75E    01909                 jp nz,$cCC
5EAB  DDCB1146  01910                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)  ; test scenery bit
5EAF  C2B75E    01911                 jp nz,$cCC
5EB2  0601      01912                 ld b,1  ; set found flag
5EB4  C3BC5E    01913                 jp $xCC
5EB7  DD19      01914 $cCC            add ix,de
5EB9  C39C5E    01915                 jp $lpCC
5EBC  78        01916 $xCC            ld a,b  ; found flag->a
5EBD  DDE1      01917                 pop ix
5EBF  E1        01918                 pop hl
5EC0  D1        01919                 pop de
5EC1  C1        01920                 pop bc
5EC2  C9        01921                 ret
                01922 *MOD            
                01923 get_sub
5EC3  F5        01924                 push af
5EC4  C5        01925                 push bc
5EC5  D5        01926                 push de
5EC6  E5        01927                 push hl
5EC7  DDE5      01928                 push ix
5EC9  FDE5      01929                 push iy
                01930 ;               ld a,(sentence+1) ; get dobj
                01931 ;               ld b,a
                01932 ;               ld c,PORTABLE
                01933 ;               call get_obj_prop
                01934 ;               cp 1
                01935 ;               jp z,$y?
                01936 ;               ld hl,notportable
                01937 ;               call OUTLIN
                01938 ;               call printcr
                01939 ;               jp $x? 
                01940 ;$y?            nop ; is it a child of the player already?
                01941 ;               ld a,(sentence+1)
                01942 ;               ld c,a
                01943 ;               ld b,PLAYER_ID
                01944 ;               call b_ancestor_of_c
                01945 ;               cp 0
                01946 ;               jp z,$y1?
                01947 ;               ld hl,alreadyhave
                01948 ;               call OUTLIN
                01949 ;               call printcr
                01950 ;               jp $x?
5ECB  00        01951 $y1CD   nop; move to player
5ECC  3A6456    01952                 ld a,(sentence+1)  ; get dobj
5ECF  47        01953                 ld b,a
5ED0  0E01      01954                 ld c,HOLDER_ID
5ED2  3E01      01955                 ld a,PLAYER_ID
5ED4  CD405D    01956                 call set_obj_attr
5ED7  00        01957                 nop ; clear initial description
5ED8  0E02      01958                 ld c,INITIAL_DESC_ID
5EDA  3EFF      01959                 ld a,255
5EDC  CD405D    01960                 call set_obj_attr               
5EDF  21875F    01961                 ld hl,taken
5EE2  CD6552    01962                 call OUTLIN
5EE5  CD6D58    01963                 call printcr
5EE8  FDE1      01964 $xCD            pop iy
5EEA  DDE1      01965                 pop ix
5EEC  E1        01966                 pop hl
5EED  D1        01967                 pop de
5EEE  C1        01968                 pop bc
5EEF  F1        01969                 pop af
5EF0  C9        01970                 ret
                01971                 
                01972 *MOD
                01973 drop_sub
5EF1  F5        01974                 push af
5EF2  C5        01975                 push bc
                01976 ;               nop ; does player have it
                01977 ;               ld a,(sentence+1)
                01978 ;               ld c,a
                01979 ;               ld b,PLAYER_ID
                01980 ;               call b_ancestor_of_c
                01981 ;               cp 1
                01982 ;               jp z,$y?
                01983 ;               ld hl,donthave
                01984 ;               call OUTLIN
                01985 ;               call printcr
                01986 ;               jp $x?
5EF3  3A6456    01987 $yCE            ld a,(sentence+1)
5EF6  47        01988                 ld b,a
5EF7  0E01      01989                 ld c,HOLDER_ID
5EF9  CDBA5D    01990                 call get_player_room
5EFC  CD405D    01991                 call set_obj_attr
5EFF  218E5F    01992                 ld hl,dropped
5F02  CD6552    01993                 call OUTLIN
5F05  CD6D58    01994                 call printcr
5F08  C1        01995 $xCE            pop bc
5F09  F1        01996                 pop af
5F0A  C9        01997                 ret
                01998 
                01999 *MOD            
                02000 ;print contents of container in 'a'
                02001 print_container_contents
5F0B  C5        02002                 push bc
5F0C  E5        02003                 push hl
5F0D  47        02004                 ld b,a
5F0E  CD8D5E    02005                 call has_contents
5F11  FE01      02006                 cp 1
5F13  78        02007                 ld a,b
5F14  C2295F    02008                 jp nz,$xCF
5F17  21CB5F    02009                 ld hl,initis
5F1A  CD6552    02010                 call OUTLIN
5F1D  CD6D58    02011                 call printcr
5F20  CD625F    02012                 call indent_more
5F23  CD405E    02013                 call print_contents
5F26  CD6E5F    02014                 call indent_less
5F29  E1        02015 $xCF            pop hl
5F2A  C1        02016                 pop bc
5F2B  C9        02017                 ret
                02018 
                02019 *MOD            
                02020 ;print contents of container in 'a'
                02021 print_supporter_contents
5F2C  C5        02022                 push bc
5F2D  E5        02023                 push hl
5F2E  47        02024                 ld b,a
5F2F  CD8D5E    02025                 call has_contents
5F32  FE01      02026                 cp 1
5F34  78        02027                 ld a,b
5F35  C24A5F    02028                 jp nz,$xCG
5F38  21BF5F    02029                 ld hl,onitis
5F3B  CD6552    02030                 call OUTLIN
5F3E  CD6D58    02031                 call printcr
5F41  CD625F    02032                 call indent_more
5F44  CD405E    02033                 call print_contents
5F47  CD6E5F    02034                 call indent_less
5F4A  E1        02035 $xCG            pop hl
5F4B  C1        02036                 pop bc
5F4C  C9        02037                 ret
                02038 
                02039 *MOD    
                02040 indent
5F4D  F5        02041                 push af
5F4E  C5        02042                 push bc
5F4F  3A835F    02043                 ld a,(indentAmt)
5F52  47        02044                 ld b,a
5F53  FE00      02045                 cp 0
5F55  CA5F5F    02046                 jp z,$xCH
5F58  3E20      02047                 ld a,32 ; space
5F5A  CD3300    02048 $lpCH   call CRTBYTE
5F5D  10FB      02049                 djnz $lpCH
5F5F  C1        02050 $xCH            pop bc
5F60  F1        02051                 pop af
5F61  C9        02052                 ret
                02053 
                02054 indent_more
5F62  F5        02055                 push af
5F63  3A835F    02056                 ld a,(indentAmt)
5F66  3C        02057                 inc a
5F67  3C        02058                 inc a
5F68  3C        02059                 inc a
5F69  32835F    02060                 ld (indentAmt),a
5F6C  F1        02061                 pop af
5F6D  C9        02062                 ret
                02063                 
                02064 indent_less
5F6E  F5        02065                 push af
5F6F  3A835F    02066                 ld a,(indentAmt)
5F72  3D        02067                 dec a
5F73  3D        02068                 dec a
5F74  3D        02069                 dec a
5F75  32835F    02070                 ld (indentAmt),a
5F78  F1        02071                 pop af
5F79  C9        02072                 ret
                02073 
                02074 
                02075 printa
5F7A  E5        02076                 push hl
5F7B  21845F    02077                 ld hl,leadinga
5F7E  CD6552    02078                 call OUTLIN
5F81  E1        02079                 pop hl
5F82  C9        02080                 ret
                02081                 
5F83  00        02082 indentAmt DB 0          
5F84  412000    02083 leadinga DB "A ",0h
5F87  54414B45  02084 taken DB "TAKEN.",0h            
      4E 2E 00               
5F8E  44524F50  02085 dropped DB "DROPPED.",0h
      50 45 44 2E 00         
5F97  594F5520  02086 noitems DB "YOU ARE EMPTY HANDED.",0h
      41 52 45 20 45 4D 50 54
      59 20 48 41 4E 44 45 44
      2E 00                  
5FAD  594F5520  02087 carrying DB "YOU ARE CARRYING:",0h
      41 52 45 20 43 41 52 52
      59 49 4E 47 3A 00      
5FBF  4F4E2049  02088 onitis DB "ON IT IS...",0h;
      54 20 49 53 2E 2E 2E 00
5FCB  494E2049  02089 initis DB "IN IT IS...",0h;
      54 20 49 53 2E 2E 2E 00
5FD7  594F5520  02090 notportable DB "YOU CAN'T PICK THAT UP.",0h
      43 41 4E 27 54 20 50 49
      43 4B 20 54 48 41 54 20
      55 50 2E 00            
5FEF  594F5520  02091 alreadyhave DB "YOU ALREADY HAVE THAT.",0h
      41 4C 52 45 41 44 59 20
      48 41 56 45 20 54 48 41
      54 2E 00               
                02092 
                02093 *INCLUDE open_close.asm
                02094 
                02095 ; machine generate Z80 routine from XML file
                02096 *MOD
                02097 open_sub
6006  F5        02098         push af
6007  C5        02099         push bc
6008  D5        02100         push de
6009  DDE5      02101         push ix
600B  3A6456    02102         ld a,(sentence+1)
600E  47        02103         ld b,a
600F  0E13      02104         ld c, 19
6011  CDE95D    02105         call bmulc
6014  DD210000  02106         ld ix,obj_table
open_close.asm(13): undefined symbol
6018  DD09      02107         add ix,bc ; jump to object
601A  011100    02108         ld bc,PROPERTY_BYTE_1 ; get prop byte
601D  DD09      02109         add ix,bc ; jump to the object's byte we need
601F  DDCB0066  02110         bit OPENABLE_BIT,(ix) ; test openable prop bit
6023  CA6560    02111         jp z,$aCI
6026  DDCB006E  02112         bit OPEN_BIT,(ix) ; test open prop bit
602A  C25660    02113         jp nz,$bCI
602D  DDCB007E  02114         bit LOCKED_BIT,(ix) ; test locked prop bit
6031  C24760    02115         jp nz,$cCI
6034  DD7E00    02116         ld a,(ix)
6037  DDCB00EE  02117         set OPEN_BIT,(ix)
603B  21B95C    02118         ld hl,done
603E  CD6552    02119         call OUTLIN
6041  CD6D58    02120         call printcr ; newline
6044  C35260    02121         jp $dCI ; skip else 
6047  00        02122 $cCI    nop ; close ($dobj.locked == 0)
6048  00        02123         nop ; println("IT'S LOCKED.")
6049  21BF5C    02124         ld hl,itslocked
604C  CD6552    02125         call OUTLIN
604F  CD6D58    02126         call printcr ; newline
6052  00        02127 $dCI    nop ; end else
6053  C36160    02128         jp $eCI ; skip else 
6056  00        02129 $bCI    nop ; close ($dobj.open == 0)
6057  00        02130         nop ; {  println("IT'S ALREADY OPEN.")
6058  21CC5C    02131         ld hl,alreadyopen
605B  CD6552    02132         call OUTLIN
605E  CD6D58    02133         call printcr ; newline
6061  00        02134 $eCI    nop ; end else
6062  C37060    02135         jp $fCI ; skip else 
6065  00        02136 $aCI    nop ; close ($dobj.openable==1)
6066  00        02137         nop ; println("THAT'S NOT OPENABLE.")
6067  210A5D    02138         ld hl,notopenable
606A  CD6552    02139         call OUTLIN
606D  CD6D58    02140         call printcr ; newline
6070  00        02141 $fCI    nop ; end else
6071  DDE1      02142         pop ix
6073  D1        02143         pop de
6074  C1        02144         pop bc
6075  F1        02145         pop af
6076  C9        02146         ret
                02147 
                02148 
                02149 ; machine generate Z80 routine from XML file
                02150 *MOD
                02151 close_sub
6077  F5        02152         push af
6078  C5        02153         push bc
6079  D5        02154         push de
607A  DDE5      02155         push ix
607C  3A6456    02156         ld a,(sentence+1)
607F  47        02157         ld b,a
6080  0E13      02158         ld c, 19
6082  CDE95D    02159         call bmulc
6085  DD210000  02160         ld ix,obj_table
open_close.asm(67): undefined symbol
6089  DD09      02161         add ix,bc ; jump to object
608B  011100    02162         ld bc,PROPERTY_BYTE_1 ; get prop byte
608E  DD09      02163         add ix,bc ; jump to the object's byte we need
6090  DDCB0066  02164         bit OPENABLE_BIT,(ix) ; test openable prop bit
6094  CAC160    02165         jp z,$aCJ
6097  DDCB006E  02166         bit OPEN_BIT,(ix) ; test open prop bit
609B  CAB260    02167         jp z,$bCJ
609E  DDCB00AE  02168         res OPEN_BIT,(ix)
                02169         ;ld a,OPEN_BIT
                02170         ;cpl 
                02171         ;and (ix) ; and (ix) into acc
                02172         ;ld (ix),a
60A2  21B95C    02173         ld hl,done
60A5  CD6552    02174         call OUTLIN     
60A8  CD6D58    02175         call printcr ; newline
60AB  C3AE60    02176         jp $dCJ ; skip else 
60AE  00        02177 $dCJ    nop ; end else
60AF  C3BD60    02178         jp $eCJ ; skip else 
60B2  00        02179 $bCJ    nop ; close ($dobj.open == 0)
60B3  00        02180         nop ; {  println("IT'S ALREADY CLOSED.")
60B4  21DF5C    02181         ld hl,alreadyclosed
60B7  CD6552    02182         call OUTLIN
60BA  CD6D58    02183         call printcr ; newline
60BD  00        02184 $eCJ    nop ; end else
60BE  C3CC60    02185         jp $fCJ ; skip else 
60C1  00        02186 $aCJ    nop ; close ($dobj.openable==1)
60C2  00        02187         nop ; println("THAT'S NOT CLOSEABLE.")
60C3  21F45C    02188         ld hl,notcloseable
60C6  CD6552    02189         call OUTLIN
60C9  CD6D58    02190         call printcr ; newline
60CC  00        02191 $fCJ    nop ; end else
60CD  DDE1      02192         pop ix
60CF  D1        02193         pop de
60D0  C1        02194         pop bc
60D1  F1        02195         pop af
60D2  C9        02196         ret
                02197 
                02198 *MOD
                02199 lock_sub
60D3  F5        02200                 push af
60D4  C5        02201                 push bc
60D5  D5        02202                 push de
60D6  DDE5      02203                 push ix
60D8  3A6456    02204                 ld a,(sentence+1)
60DB  47        02205                 ld b,a
60DC  0E13      02206                 ld c, 19
60DE  CDE95D    02207                 call bmulc
60E1  DD210000  02208                 ld ix,obj_table
open_close.asm(115): undefined symbol
60E5  DD09      02209                 add ix,bc ; jump to object
60E7  011200    02210                 ld bc,PROPERTY_BYTE_2 ; get prop byte
60EA  DD09      02211                 add ix,bc ; jump to the object's byte we need
60EC  DDCB0076  02212                 bit LOCKABLE_BIT,(ix) ; test openable prop bit
60F0  CA0761    02213                 jp z,$nlCK
60F3  DDCB007E  02214                 bit LOCKED_BIT,(ix) ; test open prop bit
60F7  CA1361    02215                 jp z,$alCK
60FA  DDCB00FE  02216                 set LOCKED_BIT,(ix)
60FE  21B95C    02217                 ld hl,done
6101  CD6552    02218                 call OUTLIN
6104  CD6D58    02219                 call printcr
6107  212361    02220 $nlCK   ld hl,notlockable
610A  CD6552    02221                 call OUTLIN
610D  CD6D58    02222                 call printcr
6110  C31C61    02223                 jp $xCK 
6113  213861    02224 $alCK   ld hl,alreadylocked
6116  CD6552    02225                 call OUTLIN
6119  CD6D58    02226                 call printcr
611C  DDE1      02227 $xCK            pop ix
611E  D1        02228                 pop de
611F  C1        02229                 pop bc
6120  F1        02230                 pop af
6121  C9        02231                 ret     
                02232 *MOD            
                02233 unlock_sub
6122  C9        02234         ret
                02235 
6123  54484154  02236 notlockable DB "THAT'S NOT LOCKABLE.",0h        
      27 53 20 4E 4F 54 20 4C
      4F 43 4B 41 42 4C 45 2E
      00                     
6138  49542753  02237 alreadylocked DB "IT'S ALREADY LOCKED.",0h
      20 41 4C 52 45 41 44 59
      20 4C 4F 43 4B 45 44 2E
      00                     
                02238 ;alreadyopen DB "IT'S ALREADY OPEN.",0h
                02239 
                02240 *INCLUDE put.asm
                02241 ;put.asm
                02242 
                02243 *MOD
                02244 put_sub
614D  C5        02245                 push bc
614E  D5        02246                 push de
614F  E5        02247                 push hl
6150  DDE5      02248                 push ix
6152  3A6656    02249                 ld a,(sentence+3)
6155  FEFF      02250                 cp 0ffh  ; io supplied
6157  CAC261    02251                 jp z,$bpCM
615A  DD210000  02252                 ld ix,obj_table
put.asm(12): undefined symbol
615E  111100    02253                 ld de,PROPERTY_BYTE_1
6161  3A6656    02254                 ld a,(sentence+3)
6164  47        02255                 ld b,a
6165  0E13      02256                 ld c,OBJ_ENTRY_SIZE
6167  CDE95D    02257                 call bmulc
616A  DD09      02258                 add ix,bc
616C  DD19      02259                 add ix,de  ; ix now has container supporter byte
616E  3A6556    02260                 ld a,(sentence+2)
6171  FE00      02261                 cp 0  ; 0=in
6173  CA7E61    02262                 jp z,$piCM
6176  FE06      02263                 cp 6  ; 6=on
6178  CA8A61    02264                 jp z,$poCM
617B  C3C261    02265                 jp $bpCM
617E  00        02266 $piCM   nop ; is do a container?                
617F  DDCB0056  02267                 bit CONTAINER_BIT,(ix)
6183  CACE61    02268                 jp z,$ncCM
6186  00        02269                 nop ; ? is it closed
6187  C39E61    02270                 jp $mvCM
618A  00        02271 $poCM   nop ; is do a supporter?
618B  DDCB004E  02272                 bit SUPPORTER_BIT,(ix)
618F  CAE661    02273                 jp z,$nsCM
6192  C39E61    02274                 jp $mvCM
6195  00        02275                 nop ; check nested containership
6196  CD795A    02276                 call check_nested_containership
6199  FE01      02277                 cp 1  ; 1 = invalid (message was printed)
619B  CAEF61    02278                 jp z,$xCM
619E  3A6456    02279 $mvCM    ld a,(sentence+1)
61A1  47        02280                 ld b,a
61A2  0E01      02281                 ld c,HOLDER
61A4  3A6656    02282                 ld a,(sentence+3)
61A7  CD405D    02283                 call set_obj_attr
61AA  21B95C    02284                 ld hl,done
61AD  CD6552    02285                 call OUTLIN
61B0  CD6D58    02286                 call printcr
61B3  C3EF61    02287                 jp  $xCM
61B6  210362    02288 $clsdCM  ld hl,badput
61B9  CD6552    02289                 call OUTLIN
61BC  CD6D58    02290                 call printcr
61BF  C3EF61    02291                 jp $xCM
61C2  210362    02292 $bpCM   ld hl,badput
61C5  CD6552    02293                 call OUTLIN
61C8  CD6D58    02294                 call printcr
61CB  C3EF61    02295                 jp $xCM
61CE  212C62    02296 $ncCM   ld hl,notcontainer
61D1  CD6552    02297                 call OUTLIN
61D4  CD6D58    02298                 call printcr            
61D7  C3EF61    02299                 jp $xCM
61DA  216862    02300 $npCM    ld hl,impossible
61DD  CD6552    02301                 call OUTLIN
61E0  CD6D58    02302                 call printcr            
61E3  C3EF61    02303                 jp $xCM;                
61E6  214A62    02304 $nsCM   ld hl,notsupporter
61E9  CD6552    02305                 call OUTLIN
61EC  CD6D58    02306                 call printcr            
61EF  DDE1      02307 $xCM            pop ix
61F1  E1        02308                 pop hl
61F2  D1        02309                 pop de
61F3  C1        02310                 pop bc
61F4  C9        02311                 ret
                02312 
61F5  49542049  02313 closed DB "IT IS CLOSED.",0h    
      53 20 43 4C 4F 53 45 44
      2E 00                  
6203  5452593A  02314 badput DB "TRY: PUT SOMETHING IN/ON SOMETHING ELSE.",0h 
      20 50 55 54 20 53 4F 4D
      45 54 48 49 4E 47 20 49
      4E 2F 4F 4E 20 53 4F 4D
      45 54 48 49 4E 47 20 45
      4C 53 45 2E 00         
622C  594F5520  02315 notcontainer DB "YOU CAN'T PUT THINGS IN THAT.",0h
      43 41 4E 27 54 20 50 55
      54 20 54 48 49 4E 47 53
      20 49 4E 20 54 48 41 54
      2E 00                  
624A  594F5520  02316 notsupporter DB "YOU FIND NO SUITABLE SURFACE.",0h
      46 49 4E 44 20 4E 4F 20
      53 55 49 54 41 42 4C 45
      20 53 55 52 46 41 43 45
      2E 00                  
6268  54484154  02317 impossible DB "THAT'S NOT PHYSICALLY POSSIBLE.",0h
      27 53 20 4E 4F 54 20 50
      48 59 53 49 43 41 4C 4C
      59 20 50 4F 53 53 49 42
      4C 45 2E 00            
                02318 *INCLUDE miscZ80.asm
                02319 
                02320 
                02321                 
                02322 quit_sub
6288  C9        02323                 ret
                02324 *INCLUDE print_rets.asm
                02325 ;z80 - print returns
                02326 ;these are long jumped to, not 'called'
                02327 
                02328 print_ret_pardon
6289  21CD63    02329         ld hl,pardon
628C  CD6552    02330         call OUTLIN
628F  CD6D58    02331         call printcr
6292  C9        02332         ret
                02333 
                02334 print_ret_no_io
6293  219063    02335         ld hl,missing_io 
6296  CD6552    02336         call OUTLIN
6299  CD6D58    02337         call printcr
629C  C9        02338         ret
                02339         
                02340         
                02341 print_ret_bad_verb
629D  217863    02342         ld hl,badverb
62A0  CD6552    02343         call OUTLIN
62A3  215D55    02344         ld hl,word1
62A6  CD6552    02345         call OUTLIN
62A9  21D563    02346         ld hl,period
62AC  CD6552    02347         call OUTLIN     
62AF  CD6D58    02348         call printcr
62B2  C9        02349         ret
                02350 
                02351 print_ret_bad_do
62B3  215B63    02352         ld hl,badnoun
62B6  CD6552    02353         call OUTLIN
62B9  217D55    02354         ld hl,word2
62BC  CD6552    02355         call OUTLIN
62BF  21D563    02356         ld hl,period
62C2  CD6552    02357         call OUTLIN     
62C5  CD6D58    02358         call printcr
62C8  C9        02359         ret
                02360 
                02361 print_ret_bad_io
62C9  215B63    02362         ld hl,badnoun
62CC  CD6552    02363         call OUTLIN
62CF  21BD55    02364         ld hl,word4
62D2  CD6552    02365         call OUTLIN
62D5  21D563    02366         ld hl,period
62D8  CD6552    02367         call OUTLIN     
62DB  CD6D58    02368         call printcr
62DE  C9        02369         ret
                02370 
                02371 print_ret_dont_see
62DF  210F63    02372         ld hl,dontsee
62E2  CD6552    02373         call OUTLIN
62E5  CD6D58    02374         call printcr
62E8  C9        02375         ret     
                02376 
                02377 print_ret_donthave
62E9  212363    02378         ld hl,donthave
62EC  CD6552    02379         call OUTLIN
62EF  CD6D58    02380         call printcr
62F2  C9        02381         ret
                02382 
                02383 print_ret_not_openable
62F3  213863    02384         ld hl,cantopen
62F6  CD6552    02385         call OUTLIN
62F9  CD6D58    02386         call printcr
62FC  C9        02387         ret
                02388         
                02389         
                02390         
62FD  49542049  02391 pitchdark DB "IT IS PITCH DARK.",0h
      53 20 50 49 54 43 48 20
      44 41 52 4B 2E 00      
630F  594F5520  02392 dontsee DB "YOU DON'T SEE THAT.",0h
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
6323  594F5520  02393 donthave DB "YOU DON'T HAVE THAT.",0h
      44 4F 4E 27 54 20 48 41
      56 45 20 54 48 41 54 2E
      00                     
6338  54484154  02394 cantopen DB "THAT'S N0T SOMETHING YOU CAN OPEN.",0h
      27 53 20 4E 30 54 20 53
      4F 4D 45 54 48 49 4E 47
      20 59 4F 55 20 43 41 4E
      20 4F 50 45 4E 2E 00   
635B  4920444F  02395 badnoun DB "I DON'T RECOGNIZE THE WORD '",0h ; null     
      4E 27 54 20 52 45 43 4F
      47 4E 49 5A 45 20 54 48
      45 20 57 4F 52 44 20 27
      00                     
6378  4920444F  02396 badverb DB "I DON'T KNOW THE VERB '", 0 ; null  
      4E 27 54 20 4B 4E 4F 57
      20 54 48 45 20 56 45 52
      42 20 27 00            
6390  4954204C  02397 missing_io DB "IT LOOKS LIKE YOU ARE MISSING THE OBJECT OF THE PREPOSITION.", 0h
      4F 4F 4B 53 20 4C 49 4B
      45 20 59 4F 55 20 41 52
      45 20 4D 49 53 53 49 4E
      47 20 54 48 45 20 4F 42
      4A 45 43 54 20 4F 46 20
      54 48 45 20 50 52 45 50
      4F 53 49 54 49 4F 4E 2E
      00                     
63CD  50415244  02398 pardon DB "PARDON",3fh,0 ; null
      4F 4E 3F 00            
63D5  272E00    02399 period DB "'.", 0 ; null
                02400                 
                02401 *INCLUDE EventsZ80.asm
main.asm(64): unable to include file
                02402 *INCLUDE articlesZ80.asm
                02403 ;;;;;;;;;;;;;;;;;;;;;;;
                02404 ;article table
                02405 ;1st byte is length number
                02406 ;;;;;;;;;;;;;;;;;;;;;;;
                02407 article_table
63D8  03        02408         DB 3
63D9  544845    02409         DB "THE"
63DC  00        02410         DB 0
63DD  01        02411         DB 1
63DE  41        02412         DB "A"
63DF  00        02413         DB 0
63E0  02        02414         DB 2
63E1  414E      02415         DB "AN"
63E3  00        02416         DB 0
63E4  FF        02417         DB 255
                02418 *INCLUDE PrepTableZ80.asm
main.asm(66): unable to include file
                02419 *INCLUDE StringTableZ80.asm
main.asm(67): unable to include file
                02420 *INCLUDE DictionaryZ80.asm
main.asm(68): unable to include file
                02421 *INCLUDE VerbTableZ80.asm
main.asm(69): unable to include file
                02422 *INCLUDE ObjectTableZ80.asm
main.asm(70): unable to include file
                02423 *INCLUDE ObjectWordTableZ80.asm
main.asm(71): unable to include file
                02424 *INCLUDE NogoTableZ80.asm
main.asm(72): unable to include file
                02425 *INCLUDE BackDropTableZ80.asm
main.asm(73): unable to include file
                02426 *INCLUDE before_table_Z80.asm
main.asm(74): unable to include file
                02427 *INCLUDE instead_table_Z80.asm
main.asm(75): unable to include file
                02428 *INCLUDE after_table_Z80.asm
main.asm(76): unable to include file
                02429 *INCLUDE CheckRulesZ80.asm
main.asm(77): unable to include file
                02430 *INCLUDE sentence_tableZ80.asm
                02431 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                02432 ;sentence jump table
                02433 ;this is not machine generated
                02434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                02435 sentence_table 
63E5  00        02436         DB look_verb_id
sentence_tableZ80.asm(6): undefined symbol
63E6  6B56      02437         DW look_sub
63E8  00        02438         DB inventory_verb_id
sentence_tableZ80.asm(8): undefined symbol
63E9  185E      02439         DW inventory_sub
63EB  00        02440         DB n_verb_id
sentence_tableZ80.asm(10): undefined symbol
63EC  175C      02441         DW move_player
63EE  00        02442         DB ne_verb_id
sentence_tableZ80.asm(12): undefined symbol
63EF  175C      02443         DW move_player
63F1  00        02444         DB nw_verb_id
sentence_tableZ80.asm(14): undefined symbol
63F2  175C      02445         DW move_player  
63F4  00        02446         DB s_verb_id
sentence_tableZ80.asm(16): undefined symbol
63F5  175C      02447         DW move_player
63F7  00        02448         DB e_verb_id
sentence_tableZ80.asm(18): undefined symbol
63F8  175C      02449         DW move_player
63FA  00        02450         DB w_verb_id
sentence_tableZ80.asm(20): undefined symbol
63FB  175C      02451         DW move_player
63FD  00        02452         DB se_verb_id
sentence_tableZ80.asm(22): undefined symbol
63FE  175C      02453         DW move_player  
6400  00        02454         DB sw_verb_id
sentence_tableZ80.asm(24): undefined symbol
6401  175C      02455         DW move_player  
6403  00        02456         DB up_verb_id
sentence_tableZ80.asm(26): undefined symbol
6404  175C      02457         DW move_player  
6406  00        02458         DB down_verb_id
sentence_tableZ80.asm(28): undefined symbol
6407  175C      02459         DW move_player  
6409  00        02460         DB get_verb_id
sentence_tableZ80.asm(30): undefined symbol
640A  C35E      02461         DW get_sub
640C  00        02462         DB out_verb_id
sentence_tableZ80.asm(32): undefined symbol
640D  175C      02463         DW move_player  
640F  00        02464         DB enter_verb_id
sentence_tableZ80.asm(34): undefined symbol
6410  7F5C      02465         DW enter_sub
6412  00        02466         DB drop_verb_id
sentence_tableZ80.asm(36): undefined symbol
6413  F15E      02467         DW drop_sub
6415  00        02468         DB examine_verb_id
sentence_tableZ80.asm(38): undefined symbol
6416  7D57      02469         DW look_at_sub
6418  00        02470         DB put_verb_id
sentence_tableZ80.asm(40): undefined symbol
6419  4D61      02471         DW put_sub
641B  00        02472         DB open_verb_id
sentence_tableZ80.asm(42): undefined symbol
641C  0660      02473         DW open_sub
641E  00        02474         DB close_verb_id
sentence_tableZ80.asm(44): undefined symbol
641F  7760      02475         DW close_sub    
6421  00        02476         DB smell_verb_id
sentence_tableZ80.asm(46): undefined symbol
6422  0000      02477         DW smell_sub
sentence_tableZ80.asm(47): undefined symbol
6424  00        02478         DB listen_verb_id
sentence_tableZ80.asm(48): undefined symbol
6425  0000      02479         DW listen_sub
sentence_tableZ80.asm(49): undefined symbol
6427  00        02480         DB enter_verb_id
sentence_tableZ80.asm(50): undefined symbol
6428  7F5C      02481         DW enter_sub
642A  00        02482         DB quit_verb_id
sentence_tableZ80.asm(52): undefined symbol
642B  8862      02483         DW quit_sub
642D  00        02484         DB lock_verb_id
sentence_tableZ80.asm(54): undefined symbol
642E  D360      02485         DW lock_sub
6430  00        02486         DB unlock_verb_id
sentence_tableZ80.asm(56): undefined symbol
6431  2261      02487         DW unlock_sub
6433  FF        02488         DB 255
                02489         
                02490 
                02491 *INCLUDE WelcomeZ80.asm
main.asm(79): unable to include file
                02492 *INCLUDE UserVarsZ80.asm
main.asm(80): unable to include file
6434  00        02493 score DB 0
6435  00        02494 gameOver DB 0
                02495 
                02496         END START


$ACI            6065  $ACJ            60C1  $ALCK           6113  
$BCI            6056  $BCJ            60B2  $BPCM           61C2  
$CBM            5B08  $CBO            5BA0  $CBP            5BD8  
$CCB            5E81  $CCC            5EB7  $CCI            6047  
$CLSDCM         61B6  $CM             56B0  $CNTF           5415  
$CU             58DD  $DBM            5B11  $DCBR           5C64  
$DCI            6052  $DCJ            60AE  $DOJ            54B6  
$ECI            6061  $ECJ            60BD  $FCI            6070  
$FCJ            60CC  $GO2BR          5C70  $GOBR           5C3C  
$INP?           5224  $IOJ            54DC  $LP             53E7  
$LP?            526D  $LPA            5289  $LPBM           5AE8  
$LPBP           5BB5  $LPBY           5DCE  $LPBZ           5DF5  
$LPCB           5E4D  $LPCC           5E9C  $LPCH           5F5A  
$LPD            533A  $LPM            5687  $LPO            5736  
$LPP            5771  $LPU            58B7  $LPV            5904  
$LPW            5937  $LPY            5974  $MVCM           619E  
$NBJ            5A94  $NBQ            5BFF  $NBY            5DDE  
$NCA            5E35  $NCCM           61CE  $NFU            58EE  
$NLCK           6107  $NN             56F8  $NO             5769  
$NPCM           61DA  $NSCM           61E6  $NXTBM          5B06  
$NXTBO          5B98  $NXTBP          5BD5  $NY             598F  
$OBQ            5C12  $PICM           617E  $POCM           618A  
$SBW            5D6D  $SBX            5D8E  $SKPO           575F  
$SQ             57C2  $W4I            5487  $X?             527A  
$XBA            59C1  $XBB            59DB  $XBC            59F5  
$XBD            5A0F  $XBE            5A29  $XBF            5A43  
$XBG            5A5D  $XBH            5A77  $XBI            5A78  
$XBJ            5A9F  $XBL            5ABB  $XBN            5B4A  
$XBO            5BA5  $XBP            5BDD  $XBR            5C7A  
$XBW            5D7D  $XBX            5D9F  $XBY            5DE5  
$XBZ            5E00  $XC             5332  $XCA            5E3E  
$XCB            5E86  $XCC            5EBC  $XCD            5EE8  
$XCE            5F08  $XCF            5F29  $XCG            5F4A  
$XCH            5F5F  $XCK            611C  $XCM            61EF  
$XD             5375  $XE             53A2  $XF             541A  
$XI             549C  $XJ             54FE  $XL             5537  
$XM             56B5  $XN             570D  $XO             576B  
$XP             5779  $XQ             57D5  $XV             5929  
$XW             5942  $XY             5991  $XZ             59A3  
$Y1CD           5ECB  $YBY            5DE3  $YCE            5EF3  
$YE             53A5  $YO             5764  $YY             598A  
$_LP            5405  $_LPF           5421  $_LPT           5880  
$_NFT           58A6  $_X             543E  $_XB            5305  
$_XT            58A8  $_XU            58F0  $_XX            5969  
$_YU            58E8  @LPBO           5B5E  ACTIONS_TABLE   0000  
ACTION_RUN      5BAD  ALREADYCLOSED   5CDF  ALREADYHAVE     5FEF  
ALREADYLOCKED   6138  ALREADYOPEN     5CCC  ANY_OBJECT      00FE  
ARTICLE_TABLE   63D8  ATOUPPER        5997  AUTHOR          0000  
BACKDROP        000A  BACKDROP_MASK   0002  BADNOUN         635B  
BADPUT          6203  BADVERB         6378  BMULC           5DE9  
BUFSIZE         0030  B_ANCESTOR_OF_C 5DC8  CANTOPEN        6338  
CARRYING        5FAD  CHECK_DOBJ_CLOS 5A5E  CHECK_DOBJ_LOCK 5A44  
CHECK_DOBJ_OPEN 5A10  CHECK_DOBJ_OPNA 59F6  CHECK_DOBJ_PORT 59A8  
CHECK_DOBJ_SUPP 59A6  CHECK_DOBJ_UNLO 5A2A  CHECK_DONT_HAVE 59DC  
CHECK_HAVE_DOBJ 59C2  CHECK_IOBJ_CONT 5AA2  CHECK_IOBJ_SUPP 59A7  
CHECK_NESTED_CO 5A79  CHECK_NOT_SELF_ 5A78  CHECK_PREP_SUPP 5AA1  
CHECK_SEE_DOBJ  59A4  CHECK_SEE_IOBJ  59A5  CHECK_TABLE     0000  
CLEAR_BUFFERS   53CE  CLOSED          61F5  CLOSE_SUB       6077  
CLOSE_VERB_ID   0000  CLRBUF          5283  CLS             01C9  
CONTAINER       0003  CONTAINER_BIT   0002  CONTAINER_MASK  0004  
COPYDEST        565D  COUNT_VISIBLE_O 576C  CRTBYTE         0033  
DBGPF           5539  DBGSA           5548  DESC_ID         0003  
DICTIONARY      0000  DIRECTION_MAP   5C98  DONE            5CB9  
DONTHAVE        6323  DONTSEE         630F  DOOR            000F  
DOORCLOSED      5CA5  DOOR_BIT        0006  DOOR_MASK       0040  
DOWN            000D  DOWN_VERB_ID    0000  DOWORDID        5669  
DO_EVENTS       524C  DRINKABLE       000B  DRINKABLE_BIT   0002  
DRINKABLE_MASK  0004  DROPPED         5F8E  DROP_SUB        5EF1  
DROP_VERB_ID    0000  EAST            0006  EDIBLE_BIT      0001  
EDIBLE_MASK     0002  EMITTING_LIGHT  000E  EMITTING_LIGHT_ 0020  
ENCODE          551F  ENTER           000E  ENTER_SUB       5C7F  
ENTER_VERB_ID   0000  EXAMINE_VERB_ID 0000  E_VERB_ID       0000  
FIND_PREPOSITIO 5336  FLAMMABLE       000C  FLAMMABLE_BIT   0003  
FLAMMABLE_MASK  0008  GAMEOVER        6435  GETCOMMAND      522B  
GETLIN          524D  GET_MOVE_DIR    5C80  GET_OBJ_ATTR    5D1F  
GET_OBJ_ID      58AA  GET_OBJ_PROP    5D61  GET_PLAYER_ROOM 5DBA  
GET_SUB         5EC3  GET_TABLE_INDEX 587D  GET_VERBS_ID    58F5  
GET_VERB_ID     0000  HANDLE_PREP     537A  HAS_CONTENTS    5E8D  
HERE            57E6  HIT_END         5661  HOLDER          0001  
HOLDER_ID       0001  ID              0000  IMPOSSIBLE      6268  
INBUF           41E8  INDENT          5F4D  INDENTAMT       5F83  
INDENT_LESS     5F6E  INDENT_MORE     5F62  INITIAL_DESC_ID 0002  
INITIS          5FCB  INSIDE_CLOSED_C 5DC7  INVENTORY_SUB   5E18  
INVENTORY_VERB_ 0000  IOWORDID        566A  ITSLOCKED       5CBF  
KEYIN           0040  LEADINGA        5F84  LIGHTABLE       000D  
LIGHTABLE_BIT   0004  LIGHTABLE_MASK  0010  LISTEN_SUB      0000  
LISTEN_VERB_ID  0000  LIST_OBJECT     56D4  LIT             000E  
LIT_BIT         0005  LIT_MASK        0020  LKP_DIRECTOBJ   54FF  
LKP_INDIRECTOBJ 550F  LOCKABLE        0007  LOCKABLE_BIT    0006  
LOCKABLE_MASK   0040  LOCKED          0008  LOCKED_BIT      0007  
LOCKED_MASK     0080  LOCK_SUB        60D3  LOCK_VERB_ID    0000  
LOOK_AT_SUB     577D  LOOK_SUB        566B  LOOK_VERB_ID    0000  
LPX             5954  MAKE_PROP_MASK  5DA3  MASK_TABLE      5E08  
MASS            0010  MISSING_IO      6390  MOVE_PLAYER     5C17  
MOVE_PREP       53AA  MOVE_TO_END     5420  MOVE_TO_NEXT    53F3  
MOVE_TO_START   5404  NE_VERB_ID      0000  NOGO_TABLE      0000  
NOITEMS         5F97  NORTH           0004  NORTHEAST       0008  
NORTHWEST       000B  NOSEE           5AD0  NOTCLOSEABLE    5CF4  
NOTCONTAINER    622C  NOTLOCKABLE     6123  NOTLOCKED       5ABC  
NOTOPENABLE     5D0A  NOTPORTABLE     5FD7  NOTSUPPORTER    624A  
NO_OBJECT       00FF  NW_VERB_ID      0000  N_VERB_ID       0000  
OBJ_ATTRS_SIZE  0011  OBJ_ENTRY_SIZE  0013  OBJ_ID          0000  
OBJ_SIZE        0013  OBJ_TABLE       0000  OBJ_WORD_TABLE  0000  
OFFSCREEN       0000  ONITIS          5FBF  OPEN            0006  
OPENABLE        0005  OPENABLE_BIT    0004  OPENABLE_MASK   0010  
OPEN_BIT        0005  OPEN_CONTAINER  0009  OPEN_MASK       0020  
OPEN_SUB        6006  OPEN_VERB_ID    0000  OUT             000F  
OUTLIN          5265  OUT_VERB_ID     0000  PARDON          63CD  
PARSE           5294  PARSE_ERR       5668  PERIOD          63D5  
PITCHDARK       62FD  PLAYER_HAS_LIGH 5722  PLAYER_ID       0001  
PLAYER_ROOM     5DE8  PORTABLE        0009  PORTABLE_BIT    0000  
PORTABLE_MASK   0001  POSTACTIONS_TAB 0000  PREACTIONS_TABL 0000  
PREPADDR        565F  PREP_FOUND      5667  PREP_TABLE      0000  
PRINTA          5F7A  PRINTCR         586D  PRINT_CONTAINER 5F0B  
PRINT_CONTENTS  5E40  PRINT_CONTENTS_ 579A  PRINT_OBJ_DESC  56BB  
PRINT_OBJ_NAME  5819  PRINT_RET_BAD_D 62B3  PRINT_RET_BAD_I 62C9  
PRINT_RET_BAD_V 629D  PRINT_RET_DONTH 62E9  PRINT_RET_DONT_ 62DF  
PRINT_RET_NOT_O 62F3  PRINT_RET_NO_IO 6293  PRINT_RET_PARDO 6289  
PRINT_SPACE     585F  PRINT_SUPPORTER 5F2C  PRINT_TABLE_ENT 57EC  
PROPERTY_BYTE_1 0011  PROPERTY_BYTE_2 0012  PUT_SUB         614D  
PUT_VERB_ID     0000  QUIT_SUB        6288  QUIT_VERB_ID    0000  
READ_DOBJ       5440  RUN_ACTIONS     5B30  RUN_ACTIONS_    5B4F  
RUN_DEFAULT_SEN 5BAE  RUN_SENTENCE    5AE4  SCENERY         0001  
SCENERY_BIT     0000  SCENERY_MASK    0001  SCORE           6434  
SENTENCE        5663  SENTENCE_TABLE  63E5  SET_OBJ_ATTR    5D40  
SET_OBJ_PROP    5D80  SE_VERB_ID      0000  SKIP_ARTICLE    5306  
SMELL_SUB       0000  SMELL_VERB_ID   0000  SOUTH           0005  
SOUTHEAST       0009  SOUTHWEST       000A  START           5200  
STORE_WORD      5456  STRCPY          5945  STRCPYI         594F  
STREQ           596F  STRING_TABLE    0000  STRLEN          5932  
SUPPORTER       0002  SUPPORTER_BIT   0001  SUPPORTER_MASK  0002  
SW_VERB_ID      0000  S_VERB_ID       0000  TAKEN           5F87  
THEREISA        57DA  TRANSPARENT     0004  TRANSPARENT_BIT 0003  
TRANSPARENT_MAS 0008  UNLOCK_SUB      6122  UNLOCK_VERB_ID  0000  
UNUSED          0010  UNUSED_BIT      0007  UNUSED_MASK     0080  
UP              000C  UP_VERB_ID      0000  VALIDATE_ENCODE 5472  
VALIDATE_WORDS  549D  VERB_TABLE      0000  VERSION         0000  
VISOBJS         57D9  WELCOME         0000  WEST            0007  
WILDCARDIZE     5BE1  WILDCARDS       5C13  WORD1           555D  
WORD2           557D  WORD3           559D  WORD4           55BD  
WORD5           55DD  WORD6           55FD  WORD7           561D  
WORD8           563D  WORD_COUNT      5662  W_VERB_ID       0000  
_HEF            5439  _L2$            5834  _LP             57F4  
_LP$            5825  _OUT$           5830  _SK             5803  
_X              5812  _XS             5859  
