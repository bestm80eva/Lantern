                00001 ;main file for trs-80 shell
                00002  
                00003 *INCLUDE objdefsZ80.asm ; equs
                00004 ;object definitions
                00005 
    = 0000      00006 OFFSCREEN equ 0
    = 0001      00007 PLAYER_ID equ 1
                00008 
    = 00FF      00009 NO_OBJECT equ 255
    = 00FE      00010 ANY_OBJECT equ 254
                00011 
                00012 ;byte 1
    = 0001      00013 PORTABLE_MASK equ 1
    = 0002      00014 EDIBLE_MASK equ 2
    = 0002      00015 BACKDROP_MASK equ 2
    = 0004      00016 DRINKABLE_MASK equ 4
    = 0008      00017 FLAMMABLE_MASK equ 8
    = 0010      00018 LIGHTABLE_MASK equ 16
    = 0020      00019 LIT_MASK equ 32 
    = 0020      00020 EMITTING_LIGHT_MASK equ 32
    = 0040      00021 DOOR_MASK equ 64
    = 0080      00022 UNUSED_MASK equ 128
                00023 
    = 0000      00024 PORTABLE_BIT EQU 0
    = 0001      00025 EDIBLE_BIT EQU 1
    = 0002      00026 DRINKABLE_BIT EQU 2
    = 0003      00027 FLAMMABLE_BIT EQU 3
    = 0004      00028 LIGHTABLE_BIT EQU 4
    = 0005      00029 LIT_BIT  EQU 5
    = 0006      00030 DOOR_BIT EQU 6
    = 0007      00031 UNUSED_BIT EQU 7
                00032 
                00033 ;(PROPERTY_BYTE_2)
    = 0001      00034 SCENERY_MASK equ 1
    = 0002      00035 SUPPORTER_MASK equ 2
    = 0004      00036 CONTAINER_MASK equ 4
    = 0008      00037 TRANSPARENT_MASK equ 8
    = 0010      00038 OPENABLE_MASK equ 16
    = 0020      00039 OPEN_MASK equ 32
    = 0040      00040 LOCKABLE_MASK equ 64
    = 0080      00041 LOCKED_MASK equ 128
    = 0009      00042 OPEN_CONTAINER equ OPEN+CONTAINER 
                00043 
                00044 ;byte 2
    = 0000      00045 SCENERY_BIT EQU 0
    = 0001      00046 SUPPORTER_BIT EQU 1
    = 0002      00047 CONTAINER_BIT EQU 2
    = 0003      00048 TRANSPARENT_BIT EQU 3
    = 0004      00049 OPENABLE_BIT EQU 4
    = 0005      00050 OPEN_BIT EQU 5
    = 0006      00051 LOCKABLE_BIT EQU 6
    = 0007      00052 LOCKED_BIT      EQU 7
                00053 
                00054 ; objdefs.asm
                00055 
    = 0000      00056 OBJ_ID equ 0
    = 0001      00057 HOLDER_ID equ 1
    = 0002      00058 INITIAL_DESC_ID equ  2
    = 0003      00059 DESC_ID equ 3
    = 0004      00060 NORTH equ 4
    = 0005      00061 SOUTH equ 5
    = 0006      00062 EAST equ 6
    = 0007      00063 WEST equ 7
    = 0008      00064 NORTHEAST equ 8
    = 0009      00065 SOUTHEAST equ 9
    = 000A      00066 SOUTHWEST equ 10
    = 000B      00067 NORTHWEST equ 11
    = 000C      00068 UP equ 12
    = 000D      00069 DOWN equ 13
    = 000E      00070 ENTER equ 14
    = 000F      00071 OUT equ 15
    = 0010      00072 MASS equ 16
                00073 
    = 0013      00074 OBJ_ENTRY_SIZE equ 19
    = 0011      00075 PROPERTY_BYTE_1 equ 17
    = 0012      00076 PROPERTY_BYTE_2 equ 18
                00077 ;byte 1
    = 0001      00078 SCENERY equ 1 
    = 0002      00079 SUPPORTER equ 2
                00080 CONTAINER equ 3
    = 0004      00081 TRANSPARENT equ 4
    = 0005      00082 OPENABLE equ 5
                00083 OPEN equ 6
    = 0007      00084 LOCKABLE equ 7
    = 0008      00085 LOCKED equ 8
    = 0009      00086 PORTABLE equ 9
    = 000A      00087 BACKDROP equ 10
    = 000B      00088 DRINKABLE equ 11
    = 000C      00089 FLAMMABLE equ 12
    = 000D      00090 LIGHTABLE equ 13
    = 000E      00091 LIT equ 14
    = 000E      00092 EMITTING_LIGHT equ 14
    = 000F      00093 DOOR equ 15
    = 0010      00094 UNUSED equ 16
                00095 ;byte 2
    = 0001      00096 PORTABLE_MASK equ 1
    = 0002      00097 BACKDROP_MASK equ 2
    = 0004      00098 DRINKABLE_MASK equ 4
    = 0008      00099 FLAMMABLE_MASK equ 8
    = 0010      00100 LIGHTABLE_MASK equ 16
    = 0020      00101 LIT_MASK equ 32 
    = 0020      00102 EMITTING_LIGHT_MASK equ 32
    = 0040      00103 DOOR_MASK equ 64
    = 0080      00104 UNUSED_MASK equ 128
                00105 
                00106  
                00107 ;QINPUT equ 1bb3h               ; ROM ROUTINES
    = 0033      00108 CRTBYTE equ  0033H
    = 41E8      00109 INBUF equ 41e8h
    = 01C9      00110 CLS equ 01c9h
                00111 ;OUTLIN equ 28a7h               ; src str in HL/
                00112 
                00113         ORG 5200H
                00114 START
5200  CDC901    00115                 call CLS
5203  210000    00116                 ld hl,welcome ; print welcome,author,version
main.asm(14): undefined symbol
5206  CD7C52    00117                 call OUTLIN
5209  CD0E59    00118                 call printcr
520C  210000    00119                 ld hl,author
main.asm(17): undefined symbol
520F  CD7C52    00120                 call OUTLIN
5212  CD0E59    00121                 call printcr
5215  210000    00122                 ld hl,version
main.asm(20): undefined symbol
5218  CD7C52    00123                 call OUTLIN
521B  CD0E59    00124                 call printcr
521E  CD0E59    00125                 call printcr
5221  CDA356    00126                 call look_sub
5224  CD2B52    00127 $inp?   call getcommand
5227  C32452    00128                 jp $inp?
522A  C9        00129                 ret
                00130                 
                00131 getcommand
                00132                 ;call QINPUT
522B  CD6452    00133                 call getlin
522E  CDCC52    00134                 call parse                              ; get the words
5231  3A9B56    00135                 ld a,(sentence)
5234  FE00      00136                 cp 0
5236  CA2452    00137                 jp z,$inp?
5239  CDD554    00138                 call validate_words             ; make sure verb,io,do are in tables
523C  CD5755    00139                 call encode                             ; try to map words to objects
523F  CDAA54    00140                 call validate_encode    ; make sure it worked
5242  CD965C    00141                 call wildcardize
5245  CD995B    00142                 call run_sentence
5248  CD4C52    00143                 call do_events
524B  C9        00144                 ret
                00145                 
                00146 *MOD
                00147 do_events
                00148 *INCLUDE event_jumps_Z80.asm
main.asm(46): unable to include file
524C  CD6B57    00149         call player_has_light
524F  FE01      00150         cp 1
5251  CA5E52    00151         jp z,$yA
5254  3A6A65    00152         ld a,(turns_without_light)
5257  3C        00153         inc a
5258  326A65    00154         ld (turns_without_light),a
525B  C36352    00155         jp $xA
525E  3E00      00156 $yA     ld a,0
5260  326A65    00157         ld (turns_without_light),a
5263  C9        00158 $xA     ret
                00159         
                00160 *INCLUDE io.asm 
    = 0030      00161 BUFSIZE EQU 48
    = 0040      00162 KEYIN EQU 40H
                00163 
                00164 *MOD
                00165 getlin
5264  C5        00166                 push bc
5265  D5        00167                 push de
5266  E5        00168                 push hl
                00169 ;               call clrbuf
5267  21E841    00170                 ld hl,INBUF
526A  0630      00171                 ld b,BUFSIZE
526C  CD4000    00172                 call KEYIN ; returns len in 'b'
526F  48        00173                 ld c,b
5270  0600      00174                 ld b,0
5272  09        00175                 add hl,bc
5273  3600      00176                 ld (hl),0  ; delete cr
5275  E1        00177                 pop hl
5276  D1        00178                 pop de
5277  C1        00179                 pop bc
5278  CD0E59    00180                 call printcr
527B  C9        00181                 ret
                00182 
                00183 
                00184         ;hl = str
                00185 OUTLIN
527C  F5        00186                 push af
527D  C5        00187                 push bc
527E  D5        00188                 push de
527F  E5        00189                 push hl
5280  DDE5      00190                 push ix
5282  FDE5      00191                 push iy
5284  7E        00192 $lpB    ld a,(hl)
5285  FE00      00193                 cp 0
5287  CA9152    00194                 jp z,$xB
528A  23        00195                 inc hl
528B  CD3300    00196                 call CRTBYTE
528E  C38452    00197                 jp $lpB 
5291  FDE1      00198 $xB             pop iy
5293  DDE1      00199                 pop ix
5295  E1        00200                 pop hl
5296  D1        00201                 pop de
5297  C1        00202                 pop bc
5298  F1        00203                 pop af
5299  C9        00204                 ret
                00205                 
                00206 *MOD
                00207 OUTLINCR
529A  F5        00208                 push af
529B  C5        00209                 push bc
529C  D5        00210                 push de
529D  E5        00211                 push hl
529E  DDE5      00212                 push ix
52A0  FDE5      00213                 push iy
52A2  7E        00214 $lpC    ld a,(hl)
52A3  FE00      00215                 cp 0
52A5  CAAF52    00216                 jp z,$xC
52A8  23        00217                 inc hl
52A9  CD3300    00218                 call CRTBYTE
52AC  C3A252    00219                 jp $lpC 
52AF  CD0E59    00220 $xC             call printcr
52B2  FDE1      00221                 pop iy
52B4  DDE1      00222                 pop ix
52B6  E1        00223                 pop hl
52B7  D1        00224                 pop de
52B8  C1        00225                 pop bc
52B9  F1        00226                 pop af
52BA  C9        00227                 ret
                00228 
                00229                 
                00230                 
                00231 *MOD
                00232 clrbuf
52BB  3EFF      00233                 LD A,255
52BD  77        00234                 LD (HL),A
52BE  21E841    00235                 LD HL,INBUF
52C1  70        00236 $lpD    ld (hl),b
52C2  23        00237                 inc hl
52C3  3D        00238                 dec a
52C4  FE00      00239                 cp 0
52C6  C2C152    00240                 jp nz,$lpD
52C9  EDB0      00241                 LDIR    
52CB  C9        00242                 ret
                00243 
                00244 
                00245 ;INBUF DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                00246         
                00247 *INCLUDE parser.asm
                00248 ;z80 parser 
                00249 *MOD
                00250 parse
52CC  3E00      00251                 ld a,0  
52CE  329956    00252                 ld (hit_end),a          ; clear flag                    ld (word_count),a       ; reset to 0
52D1  219555    00253                 ld hl,word1     
52D4  229556    00254                 ld (copydest),hl        ; set copy dest
52D7  3AE841    00255                 ld a,(INBUF)            ; get 1st char? 
52DA  FE00      00256                 cp 0            
52DC  CABF63    00257                 jp z,print_ret_pardon
52DF  CD0654    00258                 call clear_buffers
52E2  DD21E841  00259                 ld ix,INBUF                ; set ix to input buffer
52E6  FD21E841  00260                 ld iy,INBUF                ; set iy to input buffer
52EA  CD2B54    00261                 call move_to_next  ; move to end of 1st word    
52ED  CD8E54    00262                 call store_word    ; save word 1        
52F0  CD2B54    00263                 call move_to_next       ; try to bracket at 2nd word
52F3  DD7E00    00264                 ld a,(ix) ;hit end? (single verb command)
52F6  FE00      00265                 cp 0 
52F8  CA3D53    00266                 jp z,$_xE
52FB  CDB253    00267                 call handle_prep ; compress preposition if needed and go to word 3
52FE  21B555    00268                 ld hl,word2              ; copy direct object   
5301  229556    00269                 ld (copydest),hl
5304  CD3E53    00270                 call skip_article       ; skip article if present
5307  DD7E00    00271                 ld a,(ix) ;hit end? (single verb command)
530A  FE00      00272                 cp 0 
530C  CA3D53    00273                 jp z,$_xE
530F  CD8E54    00274                 call store_word         ; store direct object
5312  CD6E53    00275                 call find_preposition  ;stores prep
5315  3A9F56    00276                 ld a,(prep_found)
5318  FE00      00277                 cp 0
531A  CA3D53    00278                 jp z, $_xE ; if no prep, we're done since we already have the d.o.
531D  00        00279                 nop ; store prep and move past it, then get io 
531E  DD7E00    00280                 ld a,(ix) ;hit end?
5321  FE00      00281                 cp 0 
5323  CAC963    00282                 jp z,print_ret_no_io
5326  CD3E53    00283                 call skip_article
5329  DD7E00    00284                 ld a,(ix) ;hit end?
532C  FE00      00285                 cp 0 
532E  CAC963    00286                 jp z,print_ret_no_io
5331  FD7700    00287                 ld (iy),a
5334  21F555    00288                 ld hl,word4
5337  229556    00289                 ld (copydest),hl
533A  CD8E54    00290                 call store_word
533D  C9        00291 $_xE    ret
                00292 
                00293 ;skip_article
                00294 ;moves to the next word, if that word is an article
                00295 ;if it's not the last word
                00296 ;ix must point to the word to look at
                00297 ;ix are positioned at the start of the next word
                00298 *MOD
                00299 skip_article
533E  F5        00300                 push af
533F  D5        00301                 push de
5340  E5        00302                 push hl
5341  FD7E00    00303                 ld a,(iy)       
5344  57        00304                 ld d,a  ;save char (null or space)
5345  3E00      00305                 ld a,0  ;put a null there       
5347  FD7700    00306                 ld (iy),a
534A  FDE5      00307                 push iy 
534C  FD210E65  00308                 ld iy,article_table ; iy is table to search
5350  CD1E59    00309                 call get_table_index
5353  FDE1      00310                 pop iy
5355  FD7200    00311                 ld (iy),d ;replace null or space
5358  78        00312                 ld a,b
5359  FEFF      00313                 cp 0ffh  ; not found -> take no action
535B  CA6A53    00314                 jp z,$xF                
535E  218055    00315                 ld hl,DbgSA
5361  CD7C52    00316                 call OUTLIN
5364  CD0E59    00317                 call printcr
5367  CD2B54    00318                 call move_to_next ; move to end of next word
536A  E1        00319 $xF             pop hl
536B  D1        00320                 pop de
536C  F1        00321                 pop af
536D  C9        00322                 ret
                00323 
                00324 ;this subroutin e looks for a preposition
                00325 ;if a prep is found, prep_found is set to 1,
                00326 ;and the prep id is stored in sentence+2
                00327 *MOD
                00328 find_preposition
536E  F5        00329                 push af
536F  C5        00330                 push bc
5370  D5        00331                 push de
5371  E5        00332                 push hl
5372  DD7E00    00333 $lpG    ld a,(ix)
5375  FE00      00334                 cp 0
5377  CAAD53    00335                 jp z,$xG
537A  CD2B54    00336                 call move_to_next
537D  FD5600    00337                 ld d,(iy)       ; save char we're going to null out
5380  FD360000  00338                 ld (iy),0   ;null out end of word
5384  FDE5      00339                 push iy
5386  FD210000  00340                 ld iy,prep_table
parser.asm(93): undefined symbol
538A  CD1E59    00341                 call get_table_index
538D  FDE1      00342                 pop iy          ;
538F  FD7200    00343                 ld (iy),d       ; restore byte
5392  78        00344                 ld a,b          ; move result to a
5393  FEFF      00345                 cp 0ffh
5395  CA7253    00346                 jp z,$lpG   ; if not prep hit, repeat
5398  00        00347                 nop             ; hit a preposition
5399  21D555    00348                 ld hl,word3
539C  229556    00349                 ld (copydest),hl
539F  CD8E54    00350                 call store_word
53A2  329D56    00351                 ld (sentence+2),a
53A5  3E01      00352                 ld a,1
53A7  329F56    00353                 ld (prep_found),a 
53AA  CD2B54    00354                 call move_to_next ; find next word
53AD  E1        00355 $xG             pop hl
53AE  D1        00356                 pop de
53AF  C1        00357                 pop bc
53B0  F1        00358                 pop af
53B1  C9        00359                 ret
                00360 
                00361 ;if the word between ix and iy is a prep, the 
                00362 ;word is stuck on the end of word 1 and ix,iy
                00363 ;are moved to bracket the next word
                00364 ;and word 2 is zeroed out.
                00365 *MOD
                00366 handle_prep
53B2  F5        00367         push af
53B3  C5        00368         push bc
53B4  D5        00369         push de
53B5  E5        00370         push hl
53B6  FDE5      00371         push iy
53B8  FD5600    00372         ld d,(iy) ; save char at end of word1
53BB  FD360000  00373         ld (iy),0 ; null terminate word for string cmp
53BF  FD210000  00374         ld iy,prep_table
parser.asm(127): undefined symbol
53C3  CD1E59    00375         call get_table_index    
53C6  FDE1      00376         pop iy
53C8  78        00377         ld a,b
53C9  FEFF      00378         cp 0ffh ; found?
53CB  CADA53    00379         jp z,$xH ; exit on not found
                00380 ;       ld hl,DbgPF
                00381 ;       call OUTLIN
53CE  CDE253    00382         call move_prep ; doesn't change ix,iy
53D1  FD7200    00383         ld (iy),d       ; restore null or space
53D4  CD2B54    00384         call move_to_next ; move to next word
53D7  C3DD53    00385         jp $yH
53DA  FD7200    00386 $xH     ld (iy),d       ; restore null or space
53DD  E1        00387 $yH     pop hl
53DE  D1        00388         pop de
53DF  C1        00389         pop bc
53E0  F1        00390         pop af
53E1  C9        00391         ret
                00392 
                00393 ;moves word pointed to by ix
                00394 ;to the end of the word1 buffer
                00395 move_prep
53E2  DDE5      00396                 push ix                                 ; 2nd word was a prep
53E4  FDE5      00397                 push iy
53E6  D5        00398                 push de
53E7  3A9956    00399                 ld a,(hit_end)  ; save old flag
53EA  57        00400                 ld d,a
53EB  FD219555  00401                 ld iy,word1
53EF  CD5854    00402                 call move_to_end
53F2  3E20      00403                 ld a,20h ; space
53F4  FD7700    00404                 ld (iy),a ; overwrite null with space
53F7  FD23      00405                 inc iy    ;move past space
53F9  CDF059    00406                 call strcpyi
53FC  7A        00407                 ld a,d
53FD  329956    00408                 ld (hit_end),a
5400  D1        00409                 pop de
5401  FDE1      00410                 pop iy
5403  DDE1      00411                 pop ix
5405  C9        00412                 ret
                00413 
                00414 
                00415                 
                00416 ;clears the variables where the words are stored
                00417 clear_buffers
5406  3E00      00418                 ld a,0                          ; clear the 
5408  329F56    00419                 ld (prep_found),a
540B  3EFF      00420                 ld a,0ffh
540D  329B56    00421                 ld (sentence),a
5410  329C56    00422                 ld (sentence+1),a
5413  329D56    00423                 ld (sentence+2),a
5416  329E56    00424                 ld (sentence+3),a
5419  0600      00425                 ld b, 0
541B  DD219456  00426                 ld ix,copydest-1
541F  DD7000    00427 $lp     ld (ix),b
5422  DD2B      00428                 dec ix
5424  3D        00429                 dec a
5425  FE00      00430                 cp 0
5427  C21F54    00431                 jp nz,$lp
542A  C9        00432                 ret
                00433                 
                00434 ;brackets the next word with ix,iy              
                00435 move_to_next
542B  FDE5      00436         push iy ; move ix to end of last word
542D  DDE1      00437         pop ix
542F  DD7E00    00438         ld a,(ix)
5432  FE00      00439         cp 0  ; null?
5434  C8        00440         ret z   
5435  CD3C54    00441         call move_to_start ; move to start of text
5438  CD5854    00442         call move_to_end ; move to start of text
543B  C9        00443         ret
                00444         
                00445 ;skips over spaces until ix points
                00446 ;to a non space
                00447 ;uses a,ix      
                00448 *MOD
                00449 move_to_start
543C  F5        00450                 push af
543D  DD7E00    00451 $_lp    ld a,(ix)
5440  FE20      00452                 cp 20h          ; space?
5442  CA4D54    00453                 jp z,$cntI      ; quit
5445  FE00      00454                 cp 0            ; null?
5447  CA4D54    00455                 jp z,$cntI      ; quit
544A  C35254    00456                 jp $xI
544D  DD23      00457 $cntI   inc ix          ;next char
544F  C33D54    00458                 jp $_lp         ;repeat
5452  DDE5      00459 $xI             push ix ;copy ix to iy
5454  FDE1      00460                 pop iy  ;iy needs to catch up
5456  F1        00461                 pop af
5457  C9        00462                 ret
                00463 
                00464 ;moves iy to the 1st space or null at the end of 
                00465 ;a word.  Assumes iy is already pointing to the
                00466 ;start of the word
                00467 ;uses iy
                00468 ;if null is hit, hit_end is set to 1
                00469 move_to_end
5458  F5        00470                         push af
5459  FD7E00    00471 $_lpI           ld a,(iy)       ; get char
545C  CD385A    00472                         call atoupper
545F  FD7700    00473                         ld (iy),a
5462  FE20      00474                         cp 20h          ; space?
5464  CA7654    00475                         jp z, $_x
5467  FE00      00476                         cp 0            ; null
5469  CA7154    00477                         jp z, _heI
546C  FD23      00478                         inc iy
546E  C35954    00479                         jp $_lpI
5471  3E01      00480 _heI            ld a,1
5473  329956    00481                         ld (hit_end),a
5476  F1        00482 $_x                     pop af
5477  C9        00483                         ret
                00484 ;read do
                00485 *MOD    
                00486 read_dobj
5478  3A9956    00487         ld a,(hit_end)
547B  FE01      00488         cp 1
547D  C8        00489         ret z
                00490         ;       call skip_article  ; call skip_article
547E  21B555    00491         ld hl,word2
5481  229556    00492         ld (copydest),hl
5484  CD3C54    00493         call move_to_start
5487  CD5854    00494         call move_to_end
548A  CD8E54    00495         call store_word
548D  C9        00496         ret
                00497                         
                00498 ;copies from (iy-ix) chars from ix to copydest
                00499 store_word 
548E  C5        00500                 push bc
548F  D5        00501                 push de
5490  E5        00502                 push hl
5491  37        00503                 scf     ;clear the carry flag by setting it...
5492  3F        00504                 ccf ;then flipping it
5493  FDE5      00505                 push iy ; copy iy to hl
5495  E1        00506                 pop hl
5496  DDE5      00507                 push ix ; copy ix to bc
5498  C1        00508                 pop bc
5499  ED42      00509                 sbc hl,bc
549B  E5        00510                 push hl ; byte count to bc
549C  C1        00511                 pop bc
549D  DDE5      00512                 push ix  ; ix->hl       
549F  E1        00513                 pop hl
54A0  ED5B9556  00514                 ld de,(copydest)
54A4  EDB0      00515                 ldir            ; (hl)->(de) until bc=0
54A6  E1        00516                 pop hl
54A7  D1        00517                 pop de
54A8  C1        00518                 pop bc
54A9  C9        00519                 ret
                00520 
                00521 
                00522 *MOD
                00523 ;Checks to see that io and do were succesfully mapped
                00524 ;to visible objects.  This has to be done because the
                00525 ;parser may recognize a word, but it doesn't refer to
                00526 ;a visible object.
                00527 ;If validate fails, subroutine calls print_ret_dont_see
                00528 ;pops the stack and returns to the parsing loop
                00529 *MOD
                00530 validate_encode
54AA  3AB555    00531                 ld a,(word2) ; is the word blank(null)
54AD  FE00      00532                 cp 0
54AF  CAD454    00533                 jp z,$xL
54B2  3A9C56    00534                 ld a,(sentence+1)
54B5  FEFF      00535                 cp 255
54B7  C2BF54    00536                 jp nz,$w4L
54BA  33        00537                 inc sp
54BB  33        00538                 inc sp
54BC  C31564    00539                 jp print_ret_dont_see
54BF  3AF555    00540 $w4L    ld a,(word4)  ; is there an io?
54C2  FE00      00541                 cp 0
54C4  CAD454    00542                 jp z,$xL
54C7  3A9E56    00543                 ld a,(sentence+3)
54CA  FEFF      00544                 cp 255
54CC  C2D454    00545                 jp nz,$xL
54CF  33        00546                 inc sp
54D0  33        00547                 inc sp
54D1  C31564    00548                 jp print_ret_dont_see   
54D4  C9        00549 $xL             ret
                00550                 
                00551 ;validates that the io and do exist in the tables               
                00552 *MOD
                00553 validate_words
54D5  3EFF      00554                 ld a,255
54D7  329B56    00555                 ld (sentence),a
54DA  32A156    00556                 ld (doWordId),a
54DD  32A256    00557                 ld (ioWordId),a
54E0  00        00558                 nop ; there is always a verb
54E1  CD9659    00559                 call get_verbs_id 
54E4  FEFF      00560                 cp 0ffh
54E6  C2EE54    00561                 jp nz,$doM
54E9  33        00562                 inc sp  ; return from caller
54EA  33        00563                 inc sp
54EB  C3D363    00564                 jp print_ret_bad_verb
54EE  329B56    00565 $doM    ld (sentence),a ; store verb
54F1  3AB555    00566                 ld a,(word2) ; is there a 1st word?
54F4  FE00      00567                 cp 0
54F6  CA3655    00568                 jp z,$xM
54F9  DD21B555  00569                 ld ix,word2
54FD  FD210000  00570                 ld iy,dictionary
parser.asm(323): undefined symbol
5501  CD1E59    00571                 call get_table_index ; result in a
5504  78        00572                 ld a,b
5505  32A156    00573                 ld (doWordId),a
5508  FEFF      00574                 cp 0ffh  ; was it found
550A  C21455    00575                 jp nz,$ioM
550D  00        00576                 nop ; look up obj and store it in sentence+1
550E  33        00577                 inc sp
550F  33        00578                 inc sp
5510  C3E963    00579                 jp print_ret_bad_do ; returns
5513  00        00580                 nop ; now validate io
5514  3AF555    00581 $ioM    ld a,(word4) ; is there a 1st word
5517  FE00      00582                 cp 0
5519  CA3655    00583                 jp z,$xM
551C  DD21F555  00584                 ld ix,word4
5520  FD210000  00585                 ld iy,dictionary
parser.asm(338): undefined symbol
5524  CD1E59    00586                 call get_table_index ; result in a
5527  78        00587                 ld a,b
5528  32A256    00588                 ld (ioWordId),a
552B  FEFF      00589                 cp 0ffh  ; was it found
552D  C23655    00590                 jp nz,$xM
5530  00        00591                 nop ; look up obj and store it in sentence+1
5531  33        00592                 inc sp
5532  33        00593                 inc sp
5533  C3FF63    00594                 jp print_ret_bad_io ; returns
5536  C9        00595 $xM             ret             
                00596 
                00597 ;attempts to find an object that matches the word
                00598 ;entered by the user.  If no visible objects match,
                00599 ;FF is returned.        
                00600 *MOD
                00601 lkp_directobj
5537  F5        00602                 push af
5538  C5        00603                 push bc
5539  3AA156    00604                 ld a,(doWordId)
553C  47        00605                 ld b,a
553D  CD4B59    00606                 call get_obj_id ; 'get the object with that word'
5540  78        00607                 ld a,b
5541  329C56    00608                 ld (sentence+1),a ; copy of b
5544  C1        00609                 pop bc
5545  F1        00610                 pop af
5546  C9        00611                 ret
                00612                 
                00613                 
                00614 *MOD
                00615 lkp_indirectobj
5547  F5        00616                 push af
5548  C5        00617                 push bc
5549  3AA256    00618                 ld a,(ioWordId)
554C  47        00619                 ld b,a
554D  CD4B59    00620                 call get_obj_id ; 'get the object with that word'
5550  78        00621                 ld a,b
5551  329E56    00622                 ld (sentence+3),a ; copy of b
5554  C1        00623                 pop bc
5555  F1        00624                 pop af
5556  C9        00625                 ret
                00626 
                00627 ;
                00628 ;looks at each word in sentence and
                00629 ;tries to convert it to an object or verb id
                00630 encode
5557  F5        00631                 push af
5558  3AB555    00632                 ld a,(word2) ; is the an d.o?
555B  FE00      00633                 cp 0
555D  CA6F55    00634                 jp z,$xO
5560  CD3755    00635                 call lkp_directobj
5563  00        00636                 nop ; prep is already stored by parser
5564  3AF555    00637                 ld a,(word4) ; is the an i.o?
5567  FE00      00638                 cp 0
5569  CA6F55    00639                 jp z,$xO
556C  CD4755    00640                 call lkp_indirectobj
556F  F1        00641 $xO             pop af
5570  C9        00642                 ret
                00643         
                00644 
                00645         
5571  4442473A  00646 DbgPF DB "DBG:PREP FOUND",0h            
      50 52 45 50 20 46 4F 55
      4E 44 00               
5580  4442473A  00647 DbgSA DB "DBG:SKIPPING ARTICLE",0h              
      53 4B 49 50 50 49 4E 47
      20 41 52 54 49 43 4C 45
      00                     
                00648                 
5595            00649 word1 DS 32
55B5            00650 word2 DS 32
55D5            00651 word3 DS 32
55F5            00652 word4 DS 32
5615            00653 word5 DS 32
5635            00654 word6 DS 32
5655            00655 word7 DS 32
5675            00656 word8 DS 32
5695  0000      00657 copydest DW 0000h
5697  0000      00658 prepaddr DW 0000h
5699  00        00659 hit_end DB 0
569A  00        00660 word_count DB 0
569B            00661 sentence DS 4
                00662 
569F  00        00663 prep_found DB 0
56A0  00        00664 parse_err DB 0
                00665 
56A1  FF        00666 doWordId DB 255
56A2  FF        00667 ioWordId DB 255
                00668 *INCLUDE look.asm
                00669 ;look.asm
                00670 
                00671 *MOD
                00672 look_sub
56A3  C5        00673                 push bc
56A4  D5        00674                 push de
56A5  E5        00675                 push hl
56A6  DDE5      00676                 push ix
56A8  111300    00677                 ld de,OBJ_ENTRY_SIZE
56AB  00        00678                 nop ; can the player see?
56AC  CD6B57    00679                 call player_has_light
56AF  FE01      00680                 cp 1
56B1  CABD56    00681                 jp z,$yP
56B4  213364    00682                 ld hl,pitchdark
                00683                 ;call OUTLIN
                00684                 ;call printcr
56B7  CD9A52    00685                 call OUTLINCR
56BA  C3FE56    00686                 jp $xP
56BD  CDAB5E    00687 $yP             call get_player_room
56C0  CDBA58    00688                 call print_obj_name
56C3  CD0E59    00689                 call printcr
56C6  47        00690                 ld b,a
56C7  CD0457    00691                 call print_obj_desc
56CA  67        00692                 ld h,a
56CB  00        00693                 nop ; now print all visible objects
56CC  DD210000  00694                 ld ix,obj_table
look.asm(26): undefined symbol
56D0  DD7E00    00695 $lpP    ld a,(ix);get id
56D3  FE00      00696                 cp 0            ; skip offscreen
56D5  CAF956    00697                 jp z,$cP
56D8  FE01      00698                 cp 1            ; skip player
56DA  CAF956    00699                 jp z,$cP
56DD  FEFF      00700                 cp 0ffh
56DF  CAFE56    00701                 jp z,$xP
56E2  DDCB1146  00702                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)
56E6  C2F956    00703                 jp nz,$cP
                00704 ;               nop ; is this object in this room?
56E9  DD7E01    00705                 ld a,(ix+HOLDER) ; get holder byte
56EC  B8        00706                 cp b
56ED  C2F956    00707                 jp nz,$cP
56F0  DD7E00    00708                 ld a,(ix) ; reload obj id byte
56F3  C5        00709                 push bc
56F4  47        00710                 ld b,a ; 
56F5  CC1D57    00711                 call z,list_object ; look at id 'b'
56F8  C1        00712                 pop bc
56F9  DD19      00713 $cP             add ix,de ; skip object
56FB  C3D056    00714                 jp $lpP
56FE  DDE1      00715 $xP             pop ix
5700  E1        00716                 pop hl
5701  D1        00717                 pop de
5702  C1        00718                 pop bc
5703  C9        00719                 ret
                00720 
                00721 ;prints description of obj in 'b'
                00722 print_obj_desc
5704  F5        00723         push af
5705  C5        00724         push bc
5706  DDE5      00725         push ix
5708  0E03      00726         ld c,DESC_ID
570A  CD105E    00727         call get_obj_attr ; res to 'a'
570D  47        00728         ld b,a
570E  DD210000  00729         ld ix,string_table
look.asm(61): undefined symbol
5712  CD8D58    00730         call print_table_entry
5715  CD0E59    00731         call printcr
5718  DDE1      00732         pop ix
571A  C1        00733         pop bc
571B  F1        00734         pop af
571C  C9        00735         ret
                00736                 
                00737 ;prints the initial description for object in b
                00738 ;if it has one. Otherwise it defaults to "THERE IS A ____ HERE"
                00739 ;the contents of the object are also printed.
                00740 ;ix contains addr of object in table
                00741 *MOD
                00742 list_object
571D  F5        00743         push af
571E  C5        00744         push bc
571F  D5        00745         push de
5720  DDE5      00746         push ix
5722  FDE5      00747         push iy
5724  DDE5      00748         push ix ; put obj addr in iy
5726  FDE1      00749         pop iy
5728  50        00750         ld d,b ; save obj
5729  0E02      00751         ld c,INITIAL_DESC_ID
572B  CD105E    00752         call get_obj_attr 
572E  FEFF      00753         cp 0ffh         
5730  CA4157    00754         jp z,$nQ                        
5733  47        00755         ld b,a
5734  DD210000  00756         ld ix,string_table
look.asm(88): undefined symbol
5738  CD8D58    00757         call print_table_entry ; uses b and ix
573B  CD0E59    00758         call printcr
573E  C35657    00759         jp $xQ 
5741  217B58    00760 $nQ     ld hl,thereisa
5744  C5        00761         push bc
5745  CD7C52    00762     call OUTLIN
5748  C1        00763         pop bc
5749  78        00764         ld a,b
574A  CDBA58    00765         call print_obj_name
574D  218758    00766         ld hl,here
5750  CD7C52    00767         call OUTLIN
5753  CD0E59    00768         call printcr
5756  7A        00769 $xQ     ld a,d
5757  CD5960    00770     call indent_more
575A  CD3E58    00771         call print_contents_header ;  of object in 'a'
575D  CD315F    00772         call print_contents  ; of object in 'a'
5760  CD6560    00773         call indent_less
5763  FDE1      00774         pop iy
5765  DDE1      00775         pop ix
5767  D1        00776         pop de
5768  C1        00777         pop bc
5769  F1        00778         pop af
576A  C9        00779         ret
                00780         
                00781 
                00782                 
                00783 ;player has light       
                00784 ;player has light result in 'a'
                00785 *MOD
                00786 player_has_light
576B  C5        00787                 push bc
576C  D5        00788                 push de
576D  E5        00789                 push hl
576E  DDE5      00790                 push ix
                00791                 ;is the room emitting light?
5770  CDAB5E    00792                 call get_player_room 
5773  47        00793                 ld b,a
5774  57        00794                 ld d,a
5775  0E0E      00795                 ld c,EMITTING_LIGHT
5777  CD525E    00796                 call get_obj_prop
577A  FE01      00797                 cp 1
577C  CAAD57    00798                 jp z,$yR
577F  211300    00799                 ld hl,OBJ_ENTRY_SIZE
5782  DD210000  00800                 ld ix,obj_table ;loop over every object. if its a child of player
look.asm(132): undefined symbol
5786  DD7E00    00801 $lpR    ld a,(ix) ;and not inside a closed container return true
5789  5F        00802                 ld e,a ;save obj id
578A  FEFF      00803                 cp 0ffh ;hit end? jump out
578C  CAB257    00804                 jp z,$nR
578F  00        00805                 nop ; is it emitting light?
5790  47        00806                 ld b,a  ; put obj id in 'b'
5791  0E0E      00807                 ld c,EMITTING_LIGHT
5793  CD525E    00808                 call get_obj_prop
5796  FE00      00809                 cp 0    
5798  CAA557    00810                 jp z,$skpR      ; if it's not 'lit' we don't care about it
579B  42        00811                 ld b,d ; player room
579C  4B        00812                 ld c,e ; object id
579D  CDE857    00813                 call b_visible_to_c ; is it a in same room as player
57A0  FE01      00814                 cp 1    
57A2  CAAD57    00815                 jp z,$yR        ; if it's not 'lit' we don't care about it
57A5  011300    00816 $skpR   ld bc,OBJ_ENTRY_SIZE
57A8  DD09      00817                 add ix,bc ; skip to next object
57AA  C38657    00818                 jp $lpR ;repeat
57AD  3E01      00819 $yR             ld a,1
57AF  C3B457    00820                 jp $xR
57B2  3E00      00821 $nR             ld a,0          
57B4  DDE1      00822 $xR             pop ix
57B6  E1        00823                 pop hl
57B7  D1        00824                 pop de
57B8  C1        00825                 pop bc
57B9  C9        00826                 ret
                00827 
                00828 *MOD
                00829 count_visible_objects
57BA  F5        00830                 push af
57BB  DDE5      00831                 push ix
57BD  3E00      00832                 ld a,0
57BF  FEFF      00833 $lpS    cp 0ffh
57C1  CAC757    00834                 jp z,$xS
57C4  C31F54    00835                 jp $lp
57C7  DDE1      00836 $xS             pop ix
57C9  F1        00837                 pop af
57CA  C9        00838                 ret
                00839 
                00840 look_at_sub
57CB  F5        00841                 push af
57CC  C5        00842                 push bc
57CD  DDE5      00843                 push ix
57CF  3A9C56    00844                 ld a,(sentence+1)
57D2  47        00845                 ld b,a
57D3  0E03      00846                 ld c,DESC_ID
57D5  CD105E    00847                 call get_obj_attr
57D8  47        00848                 ld b,a
57D9  DD210000  00849                 ld ix,string_table
look.asm(181): undefined symbol
57DD  CD8D58    00850                 call print_table_entry
57E0  CD0E59    00851                 call printcr
57E3  DDE1      00852                 pop ix
57E5  C1        00853                 pop bc
57E6  F1        00854                 pop af
57E7  C9        00855                 ret
                00856 
                00857                 
                00858 ;is b is an ancestor of c
                00859 ;and c can 'see' b
                00860 ;1 or 0 is returned in 'a'
                00861 *MOD
                00862 b_visible_to_c
57E8  C5        00863                 push bc
57E9  D5        00864                 push de
57EA  DDE5      00865                 push ix
57EC  FDE5      00866                 push iy
57EE  50        00867                 ld d,b  ; save parent
57EF  78        00868 $lpT    ld a,b
57F0  B9        00869                 cp c  ;if two objects are equal, we suceeded.
57F1  CA3558    00870                 jp z,$yT 
57F4  FE00      00871                 cp 0
57F6  CA3058    00872                 jp z,$nT  ; hit top of table
57F9  DD210000  00873                 ld ix,obj_table
look.asm(205): undefined symbol
                00874                 ;get child
57FD  0613      00875                 ld b,OBJ_ENTRY_SIZE
57FF  CDDA5E    00876                 call bmulc
5802  DD09      00877                 add ix,bc
                00878                 ;get parent
5804  DD4601    00879                 ld b,(ix+HOLDER_ID)
5807  78        00880                 ld a,b
5808  BA        00881                 cp d    ; is the parent the 'ancestor'
5809  CA3558    00882                 jp z,$yT
580C  FE01      00883                 cp PLAYER_ID    ; is the parent the 'ancestor'          
580E  CA3558    00884                 jp z,$yT
5811  58        00885                 ld e,b  ; save parent
5812  0E13      00886                 ld c,OBJ_ENTRY_SIZE
5814  CDDA5E    00887                 call bmulc
5817  DD210000  00888                 ld ix,obj_table
look.asm(220): undefined symbol
581B  DD09      00889                 add ix,bc  
                00890                 ;is parent_a_closed_container
581D  DDCB114E  00891                 bit SUPPORTER_BIT,(IX+PROPERTY_BYTE_1) ; supporter?
5821  C22B58    00892                 jp nz,$cT
5824  DDCB116E  00893                 bit OPEN_BIT,(IX+PROPERTY_BYTE_1) ; must be a container
5828  CA3058    00894                 jp z,$nT  ; closed, return 0
582B  42        00895 $cT             ld b,d   ; restore parent
582C  4B        00896                 ld c,e   ; parent is new child
582D  C3EF57    00897                 jp $lpT
5830  3E00      00898 $nT             ld a,0   ;parent is closed container    
5832  C33758    00899                 jp $xT
5835  3E01      00900 $yT             ld a,1
5837  FDE1      00901 $xT             pop iy
5839  DDE1      00902                 pop ix
583B  D1        00903                 pop de
583C  C1        00904                 pop bc
583D  C9        00905                 ret             
                00906 ;iy contains addr of objects
                00907 *MOD
                00908 print_contents_header
583E  F5        00909         push af
583F  C5        00910         push bc
5840  E5        00911         push hl
5841  FD7E00    00912         ld a,(iy)
5844  CD845F    00913         call has_contents
5847  FE00      00914         cp 0
5849  CA7658    00915         jp z,$xU
584C  FDCB1156  00916         bit CONTAINER_BIT,(iy+PROPERTY_BYTE_1)
5850  CA6658    00917         jp z,$sU ; if not check if supporter
5853  FDCB116E  00918         bit OPEN_BIT,(iy+PROPERTY_BYTE_1)
5857  CA7658    00919         jp z,$xU
585A  210161    00920         ld hl,initis
585D  CD7C52    00921         call OUTLIN
5860  CD0E59    00922         call printcr
5863  C37658    00923         jp $xU
5866  FDCB114E  00924 $sU     bit SUPPORTER_BIT,(iy+PROPERTY_BYTE_1)
586A  CA7658    00925         jp z,$xU
586D  21F560    00926         ld hl,onitis
                00927         ;call OUTLIN
                00928         ;call printcr   
5870  CD9A52    00929         call OUTLINCR
5873  C37658    00930         jp $xU
5876  E1        00931 $xU pop hl
5877  C1        00932         pop bc
5878  F1        00933         pop af
5879  C9        00934         ret
                00935                 
587A  00        00936 visobjs DB 0            
587B  54484552  00937 thereisa DB  "THERE IS A ",0h
      45 20 49 53 20 41 20 00
5887  48455245  00938 here DB "HERE.",0h              
      2E 00                  
                00939         
                00940 *INCLUDE tables.asm
                00941 ;z80 table searching routines
                00942 
                00943 
                00944 ;prints an entry in the table
                00945 ;b contains the number of the string to print
                00946 ;ix contains table address
                00947 *MOD
                00948 print_table_entry
588D  F5        00949         push af
588E  C5        00950         push bc
588F  D5        00951         push de
5890  E5        00952         push hl
5891  DDE5      00953         push ix
5893  3E00      00954         ld a,0d ; lp counter 
5895  B8        00955 _lp     cp b    ; compare accumulator to a
5896  C2A458    00956         jp nz,_sk ; skip this entry
5899  DD23      00957         inc ix  ; skip length byte
589B  DDE5      00958         push ix ; move string addr to hl
589D  E1        00959         pop hl
589E  CD7C52    00960         call OUTLIN
58A1  C3B358    00961         jp _x
58A4  3C        00962 _sk     inc a           ; increment loop counter
58A5  DD5E00    00963         ld      e,(ix+0) ; load length byte
58A8  1600      00964         ld d,0
58AA  DD19      00965         add ix,de  ; add it to ix (skip string)
58AC  DD23      00966         inc ix     ; add 1 to skip length byte
58AE  DD23      00967         inc ix     ; add 1 to skip null terminator
58B0  C39558    00968         jp _lp
58B3  DDE1      00969 _x      pop ix
58B5  E1        00970         pop hl
58B6  D1        00971         pop de
58B7  C1        00972         pop bc
58B8  F1        00973         pop af
58B9  C9        00974         ret
                00975 
                00976 ;prints the name of the object whose
                00977 ;id is supplied in register 'a'
                00978 *MOD
                00979 print_obj_name
58BA  F5        00980                 push af
58BB  C5        00981                 push bc
58BC  D5        00982                 push de
58BD  DDE5      00983                 push ix
58BF  DD210000  00984                 ld ix,obj_word_table
tables.asm(44): undefined symbol
58C3  110400    00985                 ld de,4         ; step amount through table
58C6  FE00      00986 _lp$    cp 0            ; done?
58C8  CAD158    00987                 jp z,_out$
58CB  DD19      00988                 add ix,de
58CD  3D        00989                 dec a           ; dec loop counter              
58CE  C3C658    00990                 jp _lp$
58D1  DD23      00991 _out$   inc ix          ; skip past the id byte to the words
58D3  0600      00992                 ld b,0
58D5  78        00993 _l2$    ld a,b
58D6  FE03      00994                 cp 3            ; hit 3 word max?
58D8  CAFA58    00995                 jp z,_xW
58DB  DD7E00    00996                 ld a,(ix)       ; get word id
58DE  FEFF      00997                 cp 255d         ; done (empty entry)?
58E0  CAFA58    00998                 jp z,_xW        
58E3  C5        00999                 push bc         ;save loop counter
58E4  47        01000                 ld b,a          ; put word id in b
58E5  DDE5      01001                 push ix         ; save ix
58E7  DD210000  01002                 ld ix,dictionary        
tables.asm(62): undefined symbol
58EB  CD8D58    01003                 call print_table_entry
58EE  CD0059    01004                 call print_space
58F1  DDE1      01005                 pop ix          ; restore ix (our table index)
58F3  DD23      01006                 inc ix          ; move to next word id
58F5  C1        01007                 pop bc          ; restore loop counter
58F6  04        01008                 inc b
58F7  C3D558    01009                 jp _l2$ 
58FA  DDE1      01010 _xW             pop ix
58FC  D1        01011                 pop de
58FD  C1        01012                 pop bc
58FE  F1        01013                 pop af
58FF  C9        01014                 ret
                01015         
                01016 ;prints a space (registers are preserved)
                01017 print_space
5900  C5        01018         push bc
5901  D5        01019         push de
5902  FDE5      01020         push iy
5904  3E20      01021         ld a,20h        ; ascii space
5906  CD3300    01022         call CRTBYTE
5909  FDE1      01023         pop iy
590B  D1        01024         pop de
590C  C1        01025         pop bc
590D  C9        01026         ret
                01027 
                01028 ;prints a space (registers are preserved)
                01029 printcr
590E  F5        01030         push af
590F  C5        01031         push bc
5910  D5        01032         push de
5911  FDE5      01033         push iy
5913  3E0D      01034         ld a,0dh ; carriage return
5915  CD3300    01035         call CRTBYTE
5918  FDE1      01036         pop iy
591A  D1        01037         pop de
591B  C1        01038         pop bc
591C  F1        01039         pop af
591D  C9        01040         ret     
                01041 
                01042 ;get table index
                01043 ;returns the table index in the word in b (or ff if not found)
                01044 ;ix contains the address of the word to find
                01045 ;iy contains the address of the table to search
                01046 ;c is clobbered
                01047 *MOD
                01048 get_table_index
591E  D5        01049                 push de
591F  0600      01050                 ld b,0
5921  FD7E00    01051 $_lpX   ld a,(iy)
5924  FEFF      01052                 cp 255 ; hit end
5926  CA4759    01053                 jp z,$_nfX
5929  FD23      01054                 inc     iy ; skip len byte
592B  CD105A    01055                 call streq ; test equality - result in a
592E  FE01      01056                 cp 1    ; done - b contains index
5930  CA4959    01057                 jp z,$_xX       ;jump if found
5933  04        01058                 inc b           ;update loop counter (index)
5934  FD2B      01059                 dec iy          ;back up an get length byte
5936  1600      01060                 ld d,0
5938  FD5E00    01061                 ld e,(iy)
593B  FD19      01062                 add iy,de       ; skip to next string
593D  FD23      01063                 inc iy          ; skip length byte
593F  FD23      01064                 inc iy          ; skip null
5941  C32159    01065                 jp $_lpX        ;repeat
5944  C34959    01066                 jp $_xX
5947  06FF      01067 $_nfX   ld b,255                
5949  D1        01068 $_xX    pop de
594A  C9        01069                 ret
                01070         
                01071 ;returns the object id for the object whose
                01072 ;'word' is supplied in b
                01073 ;the value replaces the parameter
                01074 ;only visible objects will be considered
                01075 ;c is clobbered
                01076 *MOD
                01077 get_obj_id
594B  F5        01078                 push af
594C  D5        01079                 push de
594D  DDE5      01080                 push ix
594F  50        01081                 ld d,b ; word id to 'd'
5950  CDAB5E    01082                 call get_player_room
5953  47        01083                 ld b,a ; save it in b
5954  DD210000  01084                 ld ix,obj_word_table
tables.asm(144): undefined symbol
5958  DD7E00    01085 $lpY    ld a,(ix)       ; hit end of table?
595B  FEFF      01086                 cp 255
595D  CA8F59    01087                 jp z,$nfY
5960  4F        01088                 ld c,a ; the current object
5961  CDB95E    01089                 call b_ancestor_of_c  ; reslt->a. Note this should really check visibility
5964  FE00      01090                 cp 0
5966  CA7E59    01091                 jp z,$cY    ; can't see it - go to next obj
5969  DD7E01    01092                 ld a,(ix+1)     ;  get word entry
596C  BA        01093                 cp d            ;  equal to supplied word?
596D  CA8959    01094                 jp z, $_yY
5970  DD7E02    01095                 ld a,(ix+2)             ; get lp counter
5973  BA        01096                 cp d            ;  equal to supplied word?
5974  CA8959    01097                 jp z, $_yY
5977  DD7E03    01098                 ld a,(ix+3)     ;get object's word entry
597A  BA        01099                 cp d            ;  equal to supplied word?
597B  CA8959    01100                 jp z, $_yY
597E  DD23      01101 $cY             inc ix          ; not found. increment ix to next entry
5980  DD23      01102                 inc ix          
5982  DD23      01103                 inc ix          
5984  DD23      01104                 inc ix          
5986  C35859    01105                 jp $lpY ; go to next object
5989  DD4600    01106 $_yY    ld b,(ix)       ; they match! back up put the id in b
598C  C39159    01107                 jp $_xY
598F  06FF      01108 $nfY    ld b,255        ; not found code
5991  DDE1      01109 $_xY    pop ix
5993  D1        01110                 pop de
5994  F1        01111                 pop af
5995  C9        01112                 ret
                01113 
                01114 
                01115 ;get_verb_id
                01116 ;the verb is assumed to be in word1
                01117 ;returns the id # of the verb in a
                01118 *MOD
                01119 get_verbs_id
5996  C5        01120                 push bc
5997  D5        01121                 push de
5998  E5        01122                 push hl
5999  DDE5      01123                 push ix
599B  FDE5      01124                 push iy
599D  FD219555  01125                 ld iy,word1
59A1  DD210000  01126                 ld ix,verb_table
tables.asm(186): undefined symbol
59A5  DD7E00    01127 $lpZ    ld a,(ix)       ;save the id byte
59A8  47        01128                 ld b,a
59A9  FEFF      01129                 cp 0ffh 
59AB  CACA59    01130                 jp z, $xZ               ; hit end of table
59AE  1600      01131                 ld d,0                  ; set up de with len
59B0  DD23      01132                 inc ix
59B2  DD5E00    01133                 ld e,(ix)               ; get length byte
59B5  DD23      01134                 inc ix                  ;ix now at text
59B7  CD105A    01135                 call streq
59BA  FE01      01136                 cp 1   
59BC  CACA59    01137                 jp z,$xZ
59BF  DDE5      01138                 push ix         ;move ix to hl
59C1  E1        01139                 pop hl
59C2  19        01140                 add hl,de       ; skip text (add length)
59C3  23        01141                 inc hl          ; skip null
59C4  E5        01142                 push hl         ;transfer back to 2
59C5  DDE1      01143                 pop ix  ; ix is always 2 bytes past hl
59C7  C3A559    01144                 jp $lpZ
59CA  78        01145 $xZ             ld a,b
59CB  FDE1      01146                 pop iy
59CD  DDE1      01147                 pop ix
59CF  E1        01148                 pop hl
59D0  D1        01149                 pop de
59D1  C1        01150                 pop bc
59D2  C9        01151                 ret
                01152                 
                01153 *INCLUDE strings.asm
                01154 ;z80 parser
                01155 ;returns len of str in hl in bc
                01156 *MOD
                01157 strlen
59D3  F5        01158                 push af
59D4  E5        01159                 push hl
59D5  010000    01160                 ld bc,0
59D8  7E        01161 $lpBA   ld a,(hl)
59D9  03        01162                 inc bc  ; inc char to copy
59DA  23        01163                 inc hl  ; inc index
59DB  FE00      01164                 cp 0d  ; hit null?
59DD  CAE359    01165                 jp z,$xBA
59E0  C3D859    01166                 jp $lpBA
59E3  E1        01167 $xBA            pop hl
59E4  F1        01168                 pop af
59E5  C9        01169                 ret
                01170  
                01171 ;moves the string from hl to de
                01172 *MOD
                01173 strcpy
59E6  F5        01174         push af
59E7  C5        01175         push bc
59E8  CDD359    01176         call strlen ; puts len in bc
59EB  EDB0      01177         ldir            ; copy bc chars from hl to de
59ED  C1        01178         pop bc
59EE  F1        01179         pop af
59EF  C9        01180         ret
                01181         
                01182 ;copies string in ix
                01183 ;to iy
                01184 strcpyi
59F0  F5        01185         push af
59F1  DDE5      01186         push ix
59F3  FDE5      01187         push iy
59F5  DD7E00    01188 lpBB ld a,(ix)
59F8  FD7700    01189         ld (iy),a
59FB  FE00      01190         cp 0            ; null?
59FD  CA0A5A    01191         jp z,$_xBB
5A00  DD23      01192         inc ix
5A02  FD23      01193         inc iy
5A04  CA0A5A    01194         jp z,$_xBB
5A07  C3F559    01195         jp lpBB
5A0A  FDE1      01196 $_xBB   pop iy
5A0C  DDE1      01197         pop ix
5A0E  F1        01198         pop af
5A0F  C9        01199         ret     
                01200 
                01201 ;compares string in ix and iy
                01202 ;returns 1 or 0 in a
                01203 *MOD
                01204 streq
5A10  C5        01205         push bc
5A11  DDE5      01206         push ix
5A13  FDE5      01207         push iy
5A15  DD7E00    01208 $lpBC ld a,(ix) ; get a byte
5A18  DD23      01209         inc ix
5A1A  FD4600    01210         ld b,(iy) ; compare it
5A1D  FD23      01211         inc iy
5A1F  B8        01212         cp b
5A20  C2305A    01213         jp nz,$nBC
5A23  FE00      01214         cp 0; they were equal. hit end$
5A25  CA2B5A    01215         jp z,$yBC
5A28  C3155A    01216         jp $lpBC ; repeat       
5A2B  3E01      01217 $yBC  ld a,1
5A2D  C3325A    01218     jp $xBC     
5A30  3E00      01219 $nBC    ld a,0
5A32  FDE1      01220 $xBC    pop iy
5A34  DDE1      01221         pop ix
5A36  C1        01222         pop bc
5A37  C9        01223         ret 
                01224 
                01225 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                01226 ;Converts a to upper case
                01227 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                01228 *MOD
                01229 atoupper
5A38  FE61      01230         cp 97
5A3A  FA445A    01231         jp m,$xBD
5A3D  FE7A      01232         cp 122
5A3F  F2445A    01233         jp p,$xBD
5A42  D620      01234         sub 32
5A44  C9        01235 $xBD    ret
                01236 
                01237 *INCLUDE checksZ80.asm
                01238 ;check rules for z80 shell
                01239 
    = 0000      01240 ID equ 0
                01241 HOLDER equ 1
    = 0011      01242 OBJ_ATTRS_SIZE equ 17
    = 0013      01243 OBJ_SIZE equ 19
                01244 
                01245 ;returns 1 or 0 in register a
                01246 ;not sure we need this check anympre
                01247 check_see_dobj
                01248 ;       push af
                01249 ;       push bc
                01250 ;       push hl
                01251 ;   call get_player_room
                01252 ;       ld b,a
                01253 ;       ld a,(sentence+1)
                01254 ;       ld c,a
                01255 ;       call b_ancestor_of_c
                01256 ;       cp 1
                01257 ;       jp z,$y?;
                01258 ;       ld hl,nosee
                01259 ;       call OUTLIN
                01260 ;       call printcr
                01261 ;       jp $x?
                01262 ;$y?    pop hl
                01263 ;       pop bc
                01264 ;       pop af
5A45  C9        01265         ret
                01266 
                01267 
                01268 ;returns 1 or 0 in register a
                01269 check_see_iobj
5A46  C9        01270         ret
                01271 
                01272 check_dobj_supplied
5A47  C9        01273         ret
                01274 
                01275 check_iobj_supplied
5A48  C9        01276         ret
                01277 
                01278 
                01279 *MOD
                01280 check_dobj_portable
5A49  3A9C56    01281         ld a,(sentence+1)
5A4C  47        01282         ld b,a  
5A4D  0E09      01283         ld c,PORTABLE
5A4F  CD525E    01284         call get_obj_prop
5A52  FE01      01285         cp 1
5A54  CA625A    01286         jp z,$xBE
5A57  210D61    01287         ld hl,notportable
5A5A  CD7C52    01288         call OUTLIN
5A5D  CD0E59    01289         call printcr
5A60  33        01290         inc sp
5A61  33        01291         inc sp
5A62  C9        01292 $xBE    ret
                01293         
                01294 *MOD
                01295 check_have_dobj 
5A63  0601      01296         ld b,PLAYER_ID
5A65  3A9C56    01297         ld a,(sentence+1)
5A68  4F        01298         ld c,a
5A69  CDB95E    01299         call b_ancestor_of_c
5A6C  FE01      01300         cp 1
5A6E  CA7C5A    01301         jp z,$xBF
5A71  215964    01302         ld hl,donthave
5A74  CD7C52    01303         call OUTLIN
5A77  CD0E59    01304         call printcr
5A7A  33        01305         inc sp
5A7B  33        01306         inc sp
5A7C  C9        01307 $xBF    ret
                01308 
                01309 *MOD
                01310 check_dont_have_dobj 
5A7D  0601      01311         ld b,PLAYER_ID
5A7F  3A9C56    01312         ld a,(sentence+1)
5A82  4F        01313         ld c,a
5A83  CDB95E    01314         call b_ancestor_of_c
5A86  FE00      01315         cp 0
5A88  CA965A    01316         jp z,$xBG
5A8B  212561    01317         ld hl,alreadyhave
5A8E  CD7C52    01318         call OUTLIN
5A91  CD0E59    01319         call printcr
5A94  33        01320         inc sp
5A95  33        01321         inc sp
5A96  C9        01322 $xBG    ret
                01323 
                01324 *MOD    
                01325 check_dobj_opnable
5A97  3A9C56    01326         ld a,(sentence+1)
5A9A  47        01327         ld b,a  
5A9B  0E05      01328         ld c,OPENABLE
5A9D  CD525E    01329         call get_obj_prop
5AA0  FE01      01330         cp 1
5AA2  CAB05A    01331         jp z,$xBH
5AA5  21FB5D    01332         ld hl,notopenable
5AA8  CD7C52    01333         call OUTLIN
5AAB  CD0E59    01334         call printcr
5AAE  33        01335         inc sp
5AAF  33        01336         inc sp
5AB0  C9        01337 $xBH    ret
                01338 
                01339 *MOD    
                01340 check_dobj_open
5AB1  3A9C56    01341         ld a,(sentence+1)
5AB4  47        01342         ld b,a  
5AB5  0E06      01343         ld c,OPEN
5AB7  CD525E    01344         call get_obj_prop
5ABA  FE01      01345         cp 1
5ABC  CACA5A    01346         jp z,$xBI
5ABF  212B63    01347         ld hl,closed
5AC2  CD7C52    01348         call OUTLIN
5AC5  CD0E59    01349         call printcr
5AC8  33        01350         inc sp
5AC9  33        01351         inc sp
5ACA  C9        01352 $xBI    ret
                01353 
                01354 
                01355 *MOD
                01356 check_dobj_unlocked
5ACB  3A9C56    01357         ld a,(sentence+1)
5ACE  47        01358         ld b,a  
5ACF  0E08      01359         ld c,LOCKED
5AD1  CD525E    01360         call get_obj_prop
5AD4  FE00      01361         cp 0
5AD6  CAE45A    01362         jp z,$xBJ
5AD9  21B05D    01363         ld hl,itslocked
5ADC  CD7C52    01364         call OUTLIN
5ADF  CD0E59    01365         call printcr
5AE2  33        01366         inc sp
5AE3  33        01367         inc sp
5AE4  C9        01368 $xBJ    ret
                01369 
                01370 *MOD
                01371 check_dobj_locked
5AE5  3A9C56    01372         ld a,(sentence+1)
5AE8  47        01373         ld b,a  
5AE9  0E08      01374         ld c,LOCKED
5AEB  CD525E    01375         call get_obj_prop
5AEE  FE01      01376         cp 1
5AF0  CAFE5A    01377         jp z,$xBK
5AF3  21715B    01378         ld hl,notlocked
5AF6  CD7C52    01379         call OUTLIN
5AF9  CD0E59    01380         call printcr
5AFC  33        01381         inc sp
5AFD  33        01382         inc sp
5AFE  C9        01383 $xBK    ret
                01384 
                01385 *MOD
                01386 check_dobj_closed
5AFF  3A9C56    01387                 ld a,(sentence+1)
5B02  47        01388                 ld b,a  
5B03  0E06      01389                 ld c,OPEN
5B05  CD525E    01390                 call get_obj_prop
5B08  FE00      01391                 cp 0
5B0A  CA185B    01392                 jp z,$xBL
5B0D  21BD5D    01393                 ld hl,alreadyopen
5B10  CD7C52    01394                 call OUTLIN
5B13  CD0E59    01395                 call printcr
5B16  33        01396                 inc sp
5B17  33        01397                 inc sp
5B18  C9        01398 $xBL            ret
                01399 
                01400 ;checks if the do is a child of the io  
                01401 *MOD
                01402 check_not_self_or_child
                01403 
5B19  C9        01404 $xBM    ret
                01405 
                01406 ;checks if the do is a child of the io  
                01407 ;returns 1 or 0 in 'a'
                01408 ;1 means the containership is invalid
                01409 *MOD
                01410 check_nested_containership
5B1A  C5        01411         push bc
5B1B  00        01412         nop ; check self
5B1C  3A9C56    01413         ld a,(sentence+1)
5B1F  47        01414         ld b,a
5B20  3A9E56    01415         ld a,(sentence+3)
5B23  B8        01416         cp b
5B24  CA355B    01417         jp z,$nBN
5B27  00        01418         nop ; check contains
5B28  CDB95E    01419         call b_ancestor_of_c
5B2B  FE01      01420         cp 1
5B2D  CA355B    01421         jp z,$nBN; 
5B30  3E00      01422         ld a,0
5B32  C3405B    01423         jp $xBN
5B35  219E63    01424 $nBN ld hl,impossible
5B38  CD7C52    01425         call OUTLIN
5B3B  CD0E59    01426         call printcr
5B3E  3E00      01427         ld a,0
5B40  C1        01428 $xBN    pop bc
5B41  C9        01429         ret
                01430 
                01431 *MOD
                01432 check_prep_supplied
5B42  C9        01433         ret
                01434 
                01435 *MOD
                01436 check_light
5B43  CD6B57    01437         call player_has_light
5B46  FE01      01438         cp 1
5B48  C3565B    01439         jp $xBP
5B4B  213364    01440         ld hl,pitchdark
5B4E  CD7C52    01441         call OUTLIN
5B51  CD0E59    01442         call printcr
5B54  33        01443         inc sp
5B55  33        01444         inc sp
5B56  C9        01445 $xBP    ret
                01446         
                01447 
                01448 *MOD
                01449 check_iobj_container
5B57  3A9E56    01450                 ld a,(sentence+3)
5B5A  47        01451                 ld b,a  
5B5B  0E11      01452                 ld c,PROPERTY_BYTE_1
5B5D  CD525E    01453                 call get_obj_prop
5B60  E606      01454                 and CONTAINER_MASK + SUPPORTER_MASK
5B62  C2705B    01455                 jp nz,$xBQ
5B65  216263    01456                 ld hl,notcontainer
5B68  CD7C52    01457                 call OUTLIN
5B6B  CD0E59    01458                 call printcr
5B6E  33        01459                 inc sp
5B6F  33        01460                 inc sp
5B70  C9        01461 $xBQ            ret
                01462         
5B71  594F5520  01463 notlocked DB "YOU DON'T SEE THAT.",0h   
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
5B85  594F5520  01464 nosee DB "YOU DON'T SEE THAT.",0h
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
                01465         
                01466         
                01467 *INCLUDE sentencesZ80.asm
                01468 ;sentences running routines
                01469 *MOD
                01470 run_sentence
                01471                 ;run checks (these return if not met)           
5B99  DD210000  01472                 ld ix,check_table
sentencesZ80.asm(5): undefined symbol
5B9D  DD7E00    01473 $lpBR   ld a,(ix)
5BA0  FEFF      01474                 cp 255
5BA2  CAC65B    01475                 jp z,$dBR
5BA5  3A9B56    01476                 ld a,(sentence)
5BA8  DDBE00    01477                 cp (ix) ; compare to verb
5BAB  C2BD5B    01478                 jp nz,$cBR
5BAE  DD23      01479                 inc ix
5BB0  21BB5B    01480                 ld hl,$nxtBR
5BB3  E5        01481                 push hl  ; "call" to check rountine
5BB4  DD6E00    01482                 ld l,(ix)
5BB7  DD6601    01483                 ld h,(ix+1)
5BBA  E9        01484                 jp (hl)
5BBB  DD2B      01485 $nxtBR  dec ix
5BBD  DD23      01486 $cBR            inc ix  ; skip to next entry
5BBF  DD23      01487                 inc ix
5BC1  DD23      01488                 inc ix
5BC3  C39D5B    01489                 jp $lpBR
5BC6  00        01490 $dBR            nop;
                01491                 ;return before
5BC7  DD210000  01492                 ld ix,preactions_table
sentencesZ80.asm(25): undefined symbol
5BCB  CDE55B    01493                 call run_actions
                01494                 ;run instead
5BCE  DD210000  01495                 ld ix,actions_table
sentencesZ80.asm(28): undefined symbol
5BD2  CDE55B    01496                 call run_actions
5BD5  3A625C    01497                 ld a,(action_run)
5BD8  FE01      01498                 cp 1
5BDA  C4635C    01499                 call nz,run_default_sentence
                01500                 ;run 'after' actions
5BDD  DD210000  01501                 ld ix,postactions_table
sentencesZ80.asm(34): undefined symbol
5BE1  CDE55B    01502                 call run_actions
5BE4  C9        01503                 ret
                01504 
                01505 ;actions table in ix
                01506 ;post condition: action_run = 1
                01507 ;if a sentence was run
                01508 
                01509 *MOD
                01510 run_actions
5BE5  DDE5      01511         push ix
5BE7  FDE5      01512         push iy
5BE9  FD219B56  01513         ld iy,sentence
5BED  CD045C    01514         call run_actions_
5BF0  3A625C    01515         ld a,(action_run)
5BF3  FE01      01516         cp 1
5BF5  CAFF5B    01517         jp z,$xBS
5BF8  FD21C85C  01518         ld iy,wildcards
5BFC  CD045C    01519         call run_actions_       
5BFF  FDE1      01520 $xBS    pop iy
5C01  DDE1      01521         pop ix
5C03  C9        01522         ret
                01523 
                01524 *MOD
                01525 run_actions_
5C04  C5        01526                 push bc
5C05  D5        01527                 push de
5C06  E5        01528                 push hl
5C07  DDE5      01529                 push ix 
5C09  FDE5      01530                 push iy 
5C0B  3E00      01531                 ld a,0                          ; clear flag
5C0D  32625C    01532                 ld (action_run),a
                01533 ;               ld iy,sentence
5C10  110600    01534                 ld de,6         ;size of entry
5C13  DD7E00    01535 @lpBT   ld a,(ix)       ; load verb from table
5C16  FEFF      01536                 cp 0ffh         ; hit end of table
5C18  CA5A5C    01537                 jp z,$xBT 
5C1B  FDBE00    01538                 cp (iy)         ; verb match
5C1E  C2555C    01539                 jp nz,$cBT
5C21  DD7E01    01540                 ld a,(ix+1)
5C24  FDBE01    01541                 cp (iy+1)                               
5C27  C2555C    01542                 jp nz,$cBT                      ; d.o.'s don't match
5C2A  DD7E02    01543                 ld a,(ix+2)
5C2D  FDBE02    01544                 cp (iy+2)               
5C30  C2555C    01545                 jp nz,$cBT                      ; preps don't match
5C33  DD7E03    01546                 ld a,(ix+3)
5C36  FDBE03    01547                 cp (iy+3)               
5C39  C2555C    01548                 jp nz,$cBT                      ; i.o. 's don't match
5C3C  DDE5      01549                 push ix ; ix -> hl
5C3E  E1        01550                 pop hl
5C3F  23        01551                 inc hl  ; move 4 bytes to sub routine
5C40  23        01552                 inc hl
5C41  23        01553                 inc hl
5C42  23        01554                 inc hl
5C43  5E        01555                 ld e,(hl)
5C44  23        01556                 inc hl
5C45  56        01557                 ld d,(hl)
5C46  D5        01558                 push de ; de -> hl
5C47  E1        01559                 pop hl
5C48  014D5C    01560         ld bc,$nxtBT      ; push return addr on stack
5C4B  C5        01561                 push bc
5C4C  E9        01562                 jp (hl)                 ; return will pop stack
5C4D  3E01      01563 $nxtBT  ld a,1
5C4F  32625C    01564                 ld (action_run),a
5C52  C35A5C    01565                 jp $xBT                         ; done 
5C55  DD19      01566 $cBT            add ix,de                       ; skip to next entry 
5C57  C3135C    01567                 jp @lpBT
5C5A  FDE1      01568 $xBT            pop iy
5C5C  DDE1      01569                 pop ix
5C5E  E1        01570                 pop hl
5C5F  D1        01571                 pop de
5C60  C1        01572                 pop bc
5C61  C9        01573                 ret
                01574 
5C62  00        01575 action_run DB 0
                01576 *MOD
                01577 run_default_sentence
5C63  C5        01578                 push bc
5C64  D5        01579                 push de
5C65  E5        01580                 push hl
5C66  DD211B65  01581                 ld ix,sentence_table
5C6A  110300    01582 $lpBU   ld de,3         ; reload de
5C6D  DD7E00    01583                 ld a,(ix)
5C70  FEFF      01584                 cp 0ffh ; end?
5C72  CA925C    01585                 jp z,$xBU
5C75  219B56    01586                 ld hl,sentence
5C78  BE        01587                 cp (hl)         ; equal to verb?
5C79  C28D5C    01588                 jp nz,$cBU
5C7C  DDE5      01589                 push ix ; ix -> hl
5C7E  E1        01590                 pop hl
5C7F  23        01591                 inc hl          ;skip 1 byte to function address
5C80  5E        01592                 ld e,(hl)
5C81  23        01593                 inc hl
5C82  56        01594                 ld d,(hl)
5C83  D5        01595                 push de ; de -> hl
5C84  E1        01596                 pop hl
5C85  018A5C    01597         ld bc,$nxtBU      ; push return addr on stack
5C88  C5        01598                 push bc
5C89  E9        01599                 jp (hl)                 ; return will pop stack
5C8A  110300    01600 $nxtBU  ld de,3         ; reload de
5C8D  DD19      01601 $cBU            add ix,de               ;skip to next
5C8F  C36A5C    01602                 jp $lpBU
5C92  E1        01603 $xBU            pop hl
5C93  D1        01604                 pop de
5C94  C1        01605                 pop bc
5C95  C9        01606                 ret
                01607 
                01608 ;replaces io and do with 254 (ANY_OBJECT)
                01609 *MOD            
                01610 wildcardize
5C96  3A9B56    01611         ld a,(sentence) ; copy verb
5C99  32C85C    01612         ld (wildcards),a
5C9C  3A9D56    01613         ld a,(sentence+2) ; copy prep
5C9F  32CA5C    01614         ld (wildcards+2),a
5CA2  3EFF      01615         ld a,255                ;store do
5CA4  32C95C    01616         ld (wildcards+1),a
5CA7  3A9C56    01617         ld a,(sentence+1)
5CAA  FEFF      01618         cp 255                  ;was do blank?
5CAC  CAB45C    01619         jp z,$nBV
5CAF  3EFE      01620         ld a,ANY_OBJECT ;no, store '*'
5CB1  32C95C    01621         ld (wildcards+1),a
5CB4  00        01622 $nBV    nop ; repeat for io
5CB5  3EFF      01623         ld a,255                ;store io
5CB7  32CB5C    01624         ld (wildcards+3),a
5CBA  3A9E56    01625         ld a,(sentence+3)
5CBD  FEFF      01626         cp 255                  ;was do blank?
5CBF  CAC75C    01627         jp z,$oBV
5CC2  3EFE      01628         ld a,ANY_OBJECT ;no, store '*'
5CC4  32CB5C    01629         ld (wildcards+3),a
5CC7  C9        01630 $oBV    ret
                01631         
5CC8  00000000  01632 wildcards DB 0,0,0,0
                01633 *INCLUDE movementZ80.asm
                01634 ;movement.asm
                01635 ;puts move dir in a
                01636 
                01637 *MOD
                01638 move_player
5CCC  C5        01639                 push bc
5CCD  D5        01640                 push de
5CCE  DDE5      01641                 push ix
                01642                 ;convert the verb to a direction
5CD0  CDAB5E    01643                 call get_player_room
5CD3  47        01644                 ld b,a ; save room
5CD4  CD5B5D    01645                 call get_move_dir
5CD7  4F        01646                 ld c,a  ;direction code
5CD8  CD105E    01647                 call get_obj_attr ; dir in 'a'->
5CDB  57        01648                 ld d,a  ; save 'door' for later
5CDC  FE80      01649                 cp 128  ; ? is it positive or negative
5CDE  FAF15C    01650                 jp m,$goBW
5CE1  ED44      01651                 neg             ; flip accumulator (2's complement)
5CE3  47        01652                 ld b,a
5CE4  DD210000  01653                 ld ix,nogo_table
movementZ80.asm(20): undefined symbol
5CE8  CD8D58    01654                 call print_table_entry
5CEB  CD0E59    01655                 call printcr
5CEE  C32F5D    01656                 jp $xBW
5CF1  00        01657 $goBW   nop ; is 'a' a door?
5CF2  5F        01658                 ld e,a
5CF3  47        01659                 ld b,a
5CF4  0E0F      01660                 ld c,DOOR
5CF6  CD525E    01661                 call get_obj_prop
5CF9  FE01      01662                 cp 1 
5CFB  7B        01663                 ld a,e  
5CFC  C2255D    01664                 jp nz,$go2BW   ; not a door- just go
5CFF  00        01665                 nop ; is it closed?
5D00  0E06      01666                 ld c,OPEN ; b still contains obj id
5D02  CD525E    01667                 call get_obj_prop
5D05  FE01      01668                 cp 1                    
5D07  C2195D    01669                 jp nz,$dcBW     ; not closed
5D0A  00        01670                 nop ; load the door's  direction attr into 'a'
5D0B  CD5B5D    01671                 call get_move_dir ; dir in 'a'->
5D0E  4F        01672                 ld c,a  ; direction
5D0F  CD105E    01673                 call get_obj_attr ; dir in 'a'->
5D12  42        01674                 ld b,d   ; door
5D13  CD105E    01675                 call get_obj_attr  ; get dir a leave in 'a'
5D16  C3255D    01676                 jp $go2BW
5D19  21805D    01677 $dcBW   ld hl,doorclosed
5D1C  CD7C52    01678                 call OUTLIN
5D1F  CD0E59    01679                 call printcr
5D22  C32F5D    01680                 jp $xBW 
5D25  0601      01681 $go2BW  ld b,PLAYER_ID          ; move player to location
5D27  0E01      01682                 ld c,HOLDER_ID
5D29  CD315E    01683                 call set_obj_attr       
5D2C  CDA356    01684                 call look_sub
5D2F  DDE1      01685 $xBW            pop ix
5D31  D1        01686                 pop de
5D32  C1        01687                 pop bc
5D33  C9        01688                 ret
                01689 
                01690 *MOD
                01691 enter_sub
5D34  C5        01692                 push bc
5D35  E5        01693                 push hl
5D36  00        01694                 nop ; is the dobj enterable
5D37  3A9C56    01695                 ld a,(sentence+1)
5D3A  47        01696                 ld b,a
5D3B  0E0E      01697                 ld c,ENTER
5D3D  CD105E    01698                 call get_obj_attr
5D40  FEFF      01699                 cp 255
5D42  C24E5D    01700                 jp nz,$yBX
5D45  21945D    01701             ld hl,noenter;
5D48  CD9A52    01702                 call OUTLINCR
5D4B  C3585D    01703                 jp $xBX
5D4E  0601      01704 $yBX    ld b,PLAYER_ID
5D50  0E01      01705                 ld c,HOLDER_ID
5D52  CD315E    01706                 call set_obj_attr
5D55  CDA356    01707                 call look_sub
5D58  E1        01708 $xBX            pop hl
5D59  C1        01709                 pop bc
5D5A  C9        01710                 ret
                01711         
                01712 ;puts move dir (attr) in a      
                01713 *MOD
                01714 get_move_dir
5D5B  D5        01715                 push de
5D5C  DDE5      01716                 push ix
5D5E  DD21735D  01717                 ld ix,direction_map
5D62  3A9B56    01718                 ld a,(sentence) ; get verb
5D65  D600      01719                 sub n_verb_id
movementZ80.asm(86): undefined symbol
5D67  1600      01720                 ld d,0
5D69  5F        01721                 ld e,a
5D6A  DD19      01722                 add ix,de
5D6C  DD7E00    01723                 ld a,(ix)       
5D6F  DDE1      01724                 pop ix
5D71  D1        01725                 pop de
5D72  C9        01726                 ret
                01727 
                01728 ;direction table
                01729 ;maps direction verb id to the attribute numbers
                01730 direction_map
5D73  04        01731         DB 4 ; N
5D74  05        01732         DB 5 ; SOUTH
5D75  06        01733         DB 6 ; EAST
5D76  07        01734         DB 7 ; WEST 
5D77  08        01735         DB 8 ; NORTHEAST 
5D78  09        01736         DB 9 ; SOUTHEAST 
5D79  0A        01737         DB 10 ;SOUTHWEST
5D7A  0B        01738         DB 11 ;NORTHWEST
5D7B  0C        01739         DB 12 ;UP 
5D7C  0D        01740         DB 13 ;DOWN 
5D7D  0E        01741         DB 14 ;ENTER 
5D7E  0F        01742         DB 15 ;OUT 
5D7F  FF        01743         DB 0ffh
                01744         
5D80  54484520  01745 doorclosed DB "THE DOOR IS CLOSED.",0h  
      44 4F 4F 52 20 49 53 20
      43 4C 4F 53 45 44 2E 00
5D94  594F5520  01746 noenter DB "YOU CAN'T ENTER THAT.",0h
      43 41 4E 27 54 20 45 4E
      54 45 52 20 54 48 41 54
      2E 00                  
                01747 *INCLUDE containersZ80.asm
                01748 ;container routines
                01749 *MOD
                01750  
                01751                 
5DAA  444F4E45  01752 done DB "DONE.",0h
      2E 00                  
5DB0  49542753  01753 itslocked DB "IT'S LOCKED.",0h
      20 4C 4F 43 4B 45 44 2E
      00                     
5DBD  49542753  01754 alreadyopen DB "IT'S ALREADY OPEN.",0h
      20 41 4C 52 45 41 44 59
      20 4F 50 45 4E 2E 00   
5DD0  49542753  01755 alreadyclosed DB "IT'S ALREADY CLOSED.",0h
      20 41 4C 52 45 41 44 59
      20 43 4C 4F 53 45 44 2E
      00                     
5DE5  54484154  01756 notcloseable DB "THAT'S NOT CLOSEABLE.",0h
      27 53 20 4E 4F 54 20 43
      4C 4F 53 45 41 42 4C 45
      2E 00                  
5DFB  54484154  01757 notopenable DB "THAT'S NOT OPENABLE.",0h
      27 53 20 4E 4F 54 20 4F
      50 45 4E 41 42 4C 45 2E
      00                     
                01758 
                01759 *INCLUDE routinesZ80.asm
                01760 ;z80 routines
                01761 
                01762 ;returns property c of object b in register a
                01763 *MOD
                01764 get_obj_attr
5E10  C5        01765                 push bc
5E11  D5        01766                 push de
5E12  E5        01767                 push hl
5E13  DDE5      01768                 push ix
5E15  61        01769                 ld h,c  ; save attr in h
5E16  0E13      01770                 ld c,OBJ_ENTRY_SIZE
5E18  CDDA5E    01771                 call bmulc
5E1B  C5        01772                 push bc ; bc->de
5E1C  D1        01773                 pop de
5E1D  DD210000  01774                 ld ix,obj_table
routinesZ80.asm(15): undefined symbol
5E21  DD19      01775                 add ix,de        ; add attr offset to ix
5E23  1600      01776                 ld d,0           ; create the attr offset
5E25  5C        01777                 ld e,h  
5E26  DD19      01778                 add ix,de        ; add attr offset to ix
5E28  DD7E00    01779                 ld a,(ix)    ; finally get the byte
5E2B  DDE1      01780                 pop ix
5E2D  E1        01781                 pop hl
5E2E  D1        01782                 pop de
5E2F  C1        01783                 pop bc
5E30  C9        01784                 ret
                01785 
                01786 *MOD
                01787 ;set property c of object b to register a
                01788 set_obj_attr
5E31  C5        01789                 push bc
5E32  D5        01790                 push de
5E33  E5        01791                 push hl
5E34  DDE5      01792                 push ix
5E36  61        01793                 ld h,c
5E37  0E13      01794                 ld c,OBJ_ENTRY_SIZE
5E39  CDDA5E    01795                 call bmulc
5E3C  C5        01796                 push bc
5E3D  D1        01797                 pop de
5E3E  DD210000  01798                 ld ix,obj_table
routinesZ80.asm(39): undefined symbol
5E42  DD19      01799                 add ix,de        ; add table offset to ix
5E44  1600      01800                 ld d,0
5E46  5C        01801                 ld e,h
5E47  DD19      01802                 add ix,de        ; move to byte
5E49  DD7700    01803                 ld (ix),a    ; finally get the byte
5E4C  DDE1      01804                 pop ix
5E4E  E1        01805                 pop hl
5E4F  D1        01806                 pop de
5E50  C1        01807                 pop bc
5E51  C9        01808                 ret             
                01809                 
                01810 ;returns property c of object b in register a
                01811 ;the property should be 0-15 inclusive
                01812 *MOD
                01813 get_obj_prop
5E52  C5        01814                 push bc
5E53  D5        01815                 push de
5E54  1611      01816                 ld d,PROPERTY_BYTE_1
5E56  79        01817                 ld a,c ; get the correct byte
5E57  59        01818                 ld e,c ; save the prop to get (we need it later) 
5E58  FE08      01819                 cp 8
5E5A  FA5E5E    01820                 jp m,$sCC ;jump on minus
5E5D  14        01821                 inc d   ; property is in the next byte
5E5E  4A        01822 $sCC            ld c,d  ; move byte to get to c
5E5F  CD105E    01823                 call get_obj_attr ; put attr byte 'c' in 'a'
5E62  43        01824             ld b,e      ; put prop to test in 'b'
5E63  CD945E    01825                 call make_prop_mask ; puts mask from pop 'b' in 'b'
5E66  A0        01826                 and b ; test the bit in the mask (and leave result in 'a')
5E67  FE00      01827                 cp 0            ;it it's a zero, leave it
5E69  CA6E5E    01828                 jp z,$xCC
5E6C  3E01      01829                 ld a,1          ;conver non zero value to 1
5E6E  D1        01830 $xCC            pop de
5E6F  C1        01831                 pop bc
5E70  C9        01832                 ret
                01833 
                01834 ;sets property c of object b to val in register 'a'
                01835 ;the property should be 0-15 inclusive
                01836 *MOD
                01837 set_obj_prop
5E71  C5        01838                 push bc
5E72  D5        01839                 push de
5E73  E5        01840                 push hl
5E74  6F        01841                 ld l,a ; save val
5E75  1611      01842                 ld d,PROPERTY_BYTE_1
5E77  79        01843                 ld a,c ; get the correct byte
5E78  59        01844                 ld e,c ; save the prop to get (we need it later) 
5E79  FE08      01845                 cp 8
5E7B  FA7F5E    01846                 jp m,$sCD ;jump on minus
5E7E  14        01847                 inc d   ; property is in the next byte
5E7F  4A        01848 $sCD            ld c,d  ; move byte to get to c
5E80  CD105E    01849                 call get_obj_attr ; put attr byte 'c' in 'a'
5E83  60        01850                 ld h,b  ; save 'b' (the object)
5E84  43        01851                 ld b,e  ; put prop to test in 'b'
5E85  CD945E    01852                 call make_prop_mask ; puts mask from pop 'b' in 'b'
5E88  B0        01853                 or b ; test the bit in the mask (and leave result in 'a')
5E89  44        01854                 ld b,h          ; put obj in 'b'
                01855                 ;ld a,b         ; now set it back (val->a)
5E8A  3E01      01856                 ld a,1
5E8C  4A        01857                 ld c,d          ;the byte to store
5E8D  CD315E    01858                 call set_obj_attr ;  put a
5E90  E1        01859 $xCD            pop hl
5E91  D1        01860                 pop de
5E92  C1        01861                 pop bc
5E93  C9        01862                 ret
                01863                 
                01864                 
                01865 ;looks up the mask for the property number in b
                01866 ;mask is returned in 'b'
                01867 ;c is not changed
                01868 make_prop_mask
5E94  D5        01869         push de
5E95  E5        01870         push hl
5E96  FDE5      01871         push iy
5E98  FD21F95E  01872         ld iy,mask_table 
5E9C  1600      01873         ld d,0  
5E9E  58        01874         ld e,b
5E9F  FD19      01875         add iy,de
5EA1  FD2B      01876         dec iy 
5EA3  FD4600    01877         ld b,(iy)       ; load mask from table
5EA6  FDE1      01878         pop iy
5EA8  E1        01879         pop hl
5EA9  D1        01880         pop de
5EAA  C9        01881         ret
                01882 
                01883 ;player room in 'a'
                01884 get_player_room
5EAB  C5        01885                 push bc
5EAC  0601      01886                 ld b,PLAYER_ID  
5EAE  0E01      01887                 ld c,HOLDER_ID
5EB0  CD105E    01888                 call get_obj_attr
5EB3  32D95E    01889                 ld (player_room),a
5EB6  C1        01890                 pop bc
5EB7  C9        01891                 ret
                01892 
                01893 inside_closed_container
5EB8  C9        01894                 ret
                01895                 
                01896 ;put 1 or 0 in a if b is an ancestor of c               
                01897 *MOD
                01898 b_ancestor_of_c
5EB9  C5        01899                 push bc
5EBA  D5        01900                 push de
5EBB  50        01901                 ld d,b ; save parent
5EBC  41        01902                 ld b,c ; child object
5EBD  0E01      01903                 ld c,HOLDER_ID
5EBF  CD105E    01904 $lpCE   call get_obj_attr ; puts holder in a
5EC2  BA        01905                 cp d            ; ancestor found
5EC3  CAD45E    01906                 jp z,$yCE
5EC6  FE00      01907                 cp 0            ; hit top level - ancestor not found
5EC8  CACF5E    01908                 jp z,$nCE
5ECB  47        01909                 ld b,a          ; is b's parent (reg a) a descendant of c
5ECC  C3BF5E    01910                 jp $lpCE
5ECF  3E00      01911 $nCE            ld a,0
5ED1  C3D65E    01912                 jp $xCE
5ED4  3E01      01913 $yCE            ld a,1
5ED6  D1        01914 $xCE            pop de
5ED7  C1        01915                 pop bc
5ED8  C9        01916                 ret
                01917                 
5ED9  00        01918 player_room DB 0
                01919 
                01920 ;multiple b x c and puts result in bc
                01921 ;registers are preserved
                01922 *MOD
                01923 bmulc 
5EDA  F5        01924                 push af
5EDB  D5        01925                 push de
5EDC  DDE5      01926                 push ix
5EDE  1600      01927                 ld d,0 ; add c to b times
5EE0  59        01928                 ld e,c
5EE1  78        01929                 ld a,b ; use  b and loop counter
5EE2  DD210000  01930                 ld ix,0
5EE6  FE00      01931 $lpCF   cp 0
5EE8  CAF15E    01932                 jp z,$xCF
5EEB  DD19      01933                 add ix,de
5EED  3D        01934                 dec a
5EEE  C3E65E    01935                 jp $lpCF
5EF1  DDE5      01936 $xCF            push ix ; ld bc,ix
5EF3  C1        01937                 pop bc
5EF4  DDE1      01938                 pop ix
5EF6  D1        01939                 pop de
5EF7  F1        01940                 pop af
5EF8  C9        01941                 ret
                01942         
                01943 ;table of mask bytes for looking up
                01944 ;properties of objects          
                01945 mask_table
5EF9  01        01946         DB SCENERY_MASK ;equ 1 
5EFA  02        01947         DB SUPPORTER_MASK ;equ 2
5EFB  04        01948         DB CONTAINER_MASK ;equ 4
5EFC  08        01949         DB TRANSPARENT_MASK ;equ 8
5EFD  10        01950         DB OPENABLE_MASK ;equ 16
5EFE  20        01951         DB OPEN_MASK ;equ 32
5EFF  40        01952         DB LOCKABLE_MASK ;equ 64
5F00  80        01953         DB LOCKED_MASK ;equ 128
5F01  01        01954         DB PORTABLE_MASK ;equ 1
5F02  02        01955         DB BACKDROP_MASK ;equ 2
5F03  04        01956         DB DRINKABLE_MASK ;equ 4
5F04  08        01957         DB FLAMMABLE_MASK ;equ 8
5F05  10        01958         DB LIGHTABLE_MASK ;equ 16
5F06  20        01959         DB LIT_MASK ;equ 32     
5F07  40        01960         DB DOOR_MASK ;equ 64
5F08  80        01961         DB UNUSED_MASK ;equ 128
                01962 
                01963                 
                01964 *INCLUDE inventoryZ80.asm
                01965 ;inventory_sub
                01966 *MOD
                01967 inventory_sub
5F09  F5        01968                 push af
5F0A  3E01      01969                 ld a,PLAYER_ID
5F0C  CD845F    01970                 call has_contents
5F0F  FE01      01971                 cp 1
5F11  C2265F    01972                 jp nz,$nCG
5F14  21E360    01973                 ld hl,carrying
5F17  CD7C52    01974             call OUTLIN
5F1A  CD0E59    01975                 call printcr
5F1D  00        01976                 nop; recurse through child items
5F1E  3E01      01977                 ld a,PLAYER_ID
5F20  CD315F    01978                 call print_contents
5F23  C32F5F    01979                 jp $xCG         
5F26  21CD60    01980 $nCG            ld hl,noitems
5F29  CD7C52    01981             call OUTLIN
5F2C  CD0E59    01982                 call printcr
5F2F  F1        01983 $xCG            pop af
5F30  C9        01984                 ret
                01985 
                01986 ;prints name of a and it's contents of obj in 'a'
                01987 *MOD
                01988 print_contents
5F31  C5        01989                 push bc
5F32  D5        01990                 push de
5F33  E5        01991                 push hl
5F34  DDE5      01992                 push ix
5F36  47        01993                 ld b,a  ; save parent
5F37  111300    01994                 ld de,OBJ_ENTRY_SIZE
5F3A  DD210000  01995                 ld ix,obj_table
inventoryZ80.asm(31): undefined symbol
5F3E  DD7E00    01996 $lpCH   ld a,(ix)
5F41  FEFF      01997                 cp 0ffh
5F43  CA7D5F    01998                 jp z,$xCH
5F46  DD7E01    01999                 ld a,(ix+HOLDER_ID)
5F49  B8        02000                 cp b
5F4A  C2785F    02001                 jp nz,$cCH
5F4D  DDCB1146  02002                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)  ; test scenery bit
5F51  C2785F    02003                 jp nz,$cCH
5F54  DD7E00    02004                 ld a,(ix)
5F57  CD4460    02005                 call indent
5F5A  CD7160    02006                 call printa
5F5D  CDBA58    02007                 call print_obj_name
5F60  DD7E00    02008                 ld a,(ix) ; reload obj id
5F63  CD7A60    02009                 call append_adj  ; tack on providing light, being worn,...
5F66  CD0E59    02010                 call printcr
5F69  00        02011                 nop ; need to test container/supporter
5F6A  DDCB1156  02012                 bit CONTAINER_BIT,(ix+PROPERTY_BYTE_1)
5F6E  C40260    02013                 call nz,print_container_contents
5F71  DDCB114E  02014                 bit SUPPORTER_BIT,(ix+PROPERTY_BYTE_1)
5F75  C42360    02015                 call nz,print_supporter_contents
5F78  DD19      02016 $cCH            add ix,de
5F7A  C33E5F    02017                 jp $lpCH
5F7D  47        02018 $xCH            ld b,a  ; found flag->a
5F7E  DDE1      02019                 pop ix
5F80  E1        02020                 pop hl
5F81  D1        02021                 pop de
5F82  C1        02022                 pop bc          
5F83  C9        02023                 ret
                02024                 
                02025 ;if 'a' has any visible items
                02026 ;1 is returned in 'a' otherwise 0
                02027 *MOD
                02028 has_contents
5F84  C5        02029                 push bc
5F85  D5        02030                 push de
5F86  E5        02031                 push hl
5F87  DDE5      02032                 push ix
5F89  67        02033                 ld h,a
5F8A  0600      02034                 ld b,0  ; found flag
5F8C  111300    02035                 ld de,OBJ_ENTRY_SIZE
5F8F  DD210000  02036                 ld ix,obj_table
inventoryZ80.asm(72): undefined symbol
5F93  DD7E00    02037 $lpCI   ld a,(ix)
5F96  FEFF      02038                 cp 0ffh
5F98  CAB35F    02039                 jp z,$xCI
5F9B  DD7E01    02040                 ld a,(ix+HOLDER_ID)
5F9E  BC        02041                 cp h
5F9F  C2AE5F    02042                 jp nz,$cCI
5FA2  DDCB1146  02043                 bit SCENERY_BIT,(ix+PROPERTY_BYTE_1)  ; test scenery bit
5FA6  C2AE5F    02044                 jp nz,$cCI
5FA9  0601      02045                 ld b,1  ; set found flag
5FAB  C3B35F    02046                 jp $xCI
5FAE  DD19      02047 $cCI            add ix,de
5FB0  C3935F    02048                 jp $lpCI
5FB3  78        02049 $xCI            ld a,b  ; found flag->a
5FB4  DDE1      02050                 pop ix
5FB6  E1        02051                 pop hl
5FB7  D1        02052                 pop de
5FB8  C1        02053                 pop bc
5FB9  C9        02054                 ret
                02055 *MOD            
                02056 get_sub
5FBA  F5        02057                 push af
5FBB  C5        02058                 push bc
5FBC  D5        02059                 push de
5FBD  E5        02060                 push hl
5FBE  DDE5      02061                 push ix
5FC0  FDE5      02062                 push iy
                02063 ;               ld a,(sentence+1) ; get dobj
                02064 ;               ld b,a
                02065 ;               ld c,PORTABLE
                02066 ;               call get_obj_prop
                02067 ;               cp 1
                02068 ;               jp z,$y?
                02069 ;               ld hl,notportable
                02070 ;               call OUTLIN
                02071 ;               call printcr
                02072 ;               jp $x? 
                02073 ;$y?            nop ; is it a child of the player already?
                02074 ;               ld a,(sentence+1)
                02075 ;               ld c,a
                02076 ;               ld b,PLAYER_ID
                02077 ;               call b_ancestor_of_c
                02078 ;               cp 0
                02079 ;               jp z,$y1?
                02080 ;               ld hl,alreadyhave
                02081 ;               call OUTLIN
                02082 ;               call printcr
                02083 ;               jp $x?
5FC2  00        02084 $y1CJ   nop; move to player
5FC3  3A9C56    02085                 ld a,(sentence+1)  ; get dobj
5FC6  47        02086                 ld b,a
5FC7  0E01      02087                 ld c,HOLDER_ID
5FC9  3E01      02088                 ld a,PLAYER_ID
5FCB  CD315E    02089                 call set_obj_attr
5FCE  00        02090                 nop ; clear initial description
5FCF  0E02      02091                 ld c,INITIAL_DESC_ID
5FD1  3EFF      02092                 ld a,255
5FD3  CD315E    02093                 call set_obj_attr               
5FD6  21BD60    02094                 ld hl,taken
5FD9  CD7C52    02095                 call OUTLIN
5FDC  CD0E59    02096                 call printcr
5FDF  FDE1      02097 $xCJ            pop iy
5FE1  DDE1      02098                 pop ix
5FE3  E1        02099                 pop hl
5FE4  D1        02100                 pop de
5FE5  C1        02101                 pop bc
5FE6  F1        02102                 pop af
5FE7  C9        02103                 ret
                02104                 
                02105 *MOD
                02106 drop_sub
5FE8  F5        02107                 push af
5FE9  C5        02108                 push bc
                02109 ;               nop ; does player have it
                02110 ;               ld a,(sentence+1)
                02111 ;               ld c,a
                02112 ;               ld b,PLAYER_ID
                02113 ;               call b_ancestor_of_c
                02114 ;               cp 1
                02115 ;               jp z,$y?
                02116 ;               ld hl,donthave
                02117 ;               call OUTLIN
                02118 ;               call printcr
                02119 ;               jp $x?
5FEA  3A9C56    02120 $yCK            ld a,(sentence+1)
5FED  47        02121                 ld b,a
5FEE  0E01      02122                 ld c,HOLDER_ID
5FF0  CDAB5E    02123                 call get_player_room
5FF3  CD315E    02124                 call set_obj_attr
5FF6  21C460    02125                 ld hl,dropped
5FF9  CD7C52    02126                 call OUTLIN
5FFC  CD0E59    02127                 call printcr
5FFF  C1        02128 $xCK            pop bc
6000  F1        02129                 pop af
6001  C9        02130                 ret
                02131 
                02132 *MOD            
                02133 ;print contents of container in 'a'
                02134 print_container_contents
6002  C5        02135                 push bc
6003  E5        02136                 push hl
6004  47        02137                 ld b,a
6005  CD845F    02138                 call has_contents
6008  FE01      02139                 cp 1
600A  78        02140                 ld a,b
600B  C22060    02141                 jp nz,$xCL
600E  210161    02142                 ld hl,initis
6011  CD7C52    02143                 call OUTLIN
6014  CD0E59    02144                 call printcr
6017  CD5960    02145                 call indent_more
601A  CD315F    02146                 call print_contents
601D  CD6560    02147                 call indent_less
6020  E1        02148 $xCL            pop hl
6021  C1        02149                 pop bc
6022  C9        02150                 ret
                02151 
                02152 *MOD            
                02153 ;print contents of container in 'a'
                02154 print_supporter_contents
6023  C5        02155                 push bc
6024  E5        02156                 push hl
6025  47        02157                 ld b,a
6026  CD845F    02158                 call has_contents
6029  FE01      02159                 cp 1
602B  78        02160                 ld a,b
602C  C24160    02161                 jp nz,$xCM
602F  21F560    02162                 ld hl,onitis
6032  CD7C52    02163                 call OUTLIN
6035  CD0E59    02164                 call printcr
6038  CD5960    02165                 call indent_more
603B  CD315F    02166                 call print_contents
603E  CD6560    02167                 call indent_less
6041  E1        02168 $xCM            pop hl
6042  C1        02169                 pop bc
6043  C9        02170                 ret
                02171 
                02172 *MOD    
                02173 indent
6044  F5        02174                 push af
6045  C5        02175                 push bc
6046  3AB960    02176                 ld a,(indentAmt)
6049  47        02177                 ld b,a
604A  FE00      02178                 cp 0
604C  CA5660    02179                 jp z,$xCN
604F  3E20      02180                 ld a,32 ; space
6051  CD3300    02181 $lpCN   call CRTBYTE
6054  10FB      02182                 djnz $lpCN
6056  C1        02183 $xCN            pop bc
6057  F1        02184                 pop af
6058  C9        02185                 ret
                02186 
                02187 indent_more
6059  F5        02188                 push af
605A  3AB960    02189                 ld a,(indentAmt)
605D  3C        02190                 inc a
605E  3C        02191                 inc a
605F  3C        02192                 inc a
6060  32B960    02193                 ld (indentAmt),a
6063  F1        02194                 pop af
6064  C9        02195                 ret
                02196                 
                02197 indent_less
6065  F5        02198                 push af
6066  3AB960    02199                 ld a,(indentAmt)
6069  3D        02200                 dec a
606A  3D        02201                 dec a
606B  3D        02202                 dec a
606C  32B960    02203                 ld (indentAmt),a
606F  F1        02204                 pop af
6070  C9        02205                 ret
                02206 
                02207 
                02208 printa
6071  E5        02209                 push hl
6072  21BA60    02210                 ld hl,leadinga
6075  CD7C52    02211                 call OUTLIN
6078  E1        02212                 pop hl
6079  C9        02213                 ret
                02214 
                02215 ;prints adjectives for object in 'a'
                02216 *MOD
                02217 append_adj
607A  C5        02218                 push bc
607B  DDE5      02219                 push ix
607D  47        02220                 ld b,a
607E  0E13      02221                 ld c,OBJ_ENTRY_SIZE
6080  CDDA5E    02222                 call bmulc
6083  DD210000  02223                 ld ix,obj_table
inventoryZ80.asm(259): undefined symbol
6087  DD09      02224                 add ix,bc
6089  DDCB126E  02225                 bit LIT_BIT,(ix+PROPERTY_BYTE_2)
608D  CA9660    02226                 jp z,$xCO
6090  219A60    02227                 ld hl,providingLight
6093  CD7C52    02228                 call OUTLIN
6096  DDE1      02229 $xCO            pop ix
6098  C1        02230                 pop bc
6099  C9        02231                 ret
                02232 
609A  2850524F  02233 providingLight DB "(PROVIDING LIGHT)",0h
      56 49 44 49 4E 47 20 4C
      49 47 48 54 29 00      
60AC  28424549  02234 beingWorn DB "(BEING WORN)",0h
      4E 47 20 57 4F 52 4E 29
      00                     
                02235                 
60B9  00        02236 indentAmt DB 0          
60BA  412000    02237 leadinga DB "A ",0h
60BD  54414B45  02238 taken DB "TAKEN.",0h            
      4E 2E 00               
60C4  44524F50  02239 dropped DB "DROPPED.",0h
      50 45 44 2E 00         
60CD  594F5520  02240 noitems DB "YOU ARE EMPTY HANDED.",0h
      41 52 45 20 45 4D 50 54
      59 20 48 41 4E 44 45 44
      2E 00                  
60E3  594F5520  02241 carrying DB "YOU ARE CARRYING:",0h
      41 52 45 20 43 41 52 52
      59 49 4E 47 3A 00      
60F5  4F4E2049  02242 onitis DB "ON IT IS...",0h;
      54 20 49 53 2E 2E 2E 00
6101  494E2049  02243 initis DB "IN IT IS...",0h;
      54 20 49 53 2E 2E 2E 00
610D  594F5520  02244 notportable DB "YOU CAN'T PICK THAT UP.",0h
      43 41 4E 27 54 20 50 49
      43 4B 20 54 48 41 54 20
      55 50 2E 00            
6125  594F5520  02245 alreadyhave DB "YOU ALREADY HAVE THAT.",0h
      41 4C 52 45 41 44 59 20
      48 41 56 45 20 54 48 41
      54 2E 00               
                02246 
                02247 *INCLUDE open_close.asm
                02248 
                02249 ; machine generate Z80 routine from XML file
                02250 *MOD
                02251 open_sub
613C  F5        02252         push af
613D  C5        02253         push bc
613E  D5        02254         push de
613F  DDE5      02255         push ix
6141  3A9C56    02256         ld a,(sentence+1)
6144  47        02257         ld b,a
6145  0E13      02258         ld c, 19
6147  CDDA5E    02259         call bmulc
614A  DD210000  02260         ld ix,obj_table
open_close.asm(13): undefined symbol
614E  DD09      02261         add ix,bc ; jump to object
6150  011100    02262         ld bc,PROPERTY_BYTE_1 ; get prop byte
6153  DD09      02263         add ix,bc ; jump to the object's byte we need
6155  DDCB0066  02264         bit OPENABLE_BIT,(ix) ; test openable prop bit
6159  CA9B61    02265         jp z,$aCP
615C  DDCB006E  02266         bit OPEN_BIT,(ix) ; test open prop bit
6160  C28C61    02267         jp nz,$bCP
6163  DDCB007E  02268         bit LOCKED_BIT,(ix) ; test locked prop bit
6167  C27D61    02269         jp nz,$cCP
616A  DD7E00    02270         ld a,(ix)
616D  DDCB00EE  02271         set OPEN_BIT,(ix)
6171  21AA5D    02272         ld hl,done
6174  CD7C52    02273         call OUTLIN
6177  CD0E59    02274         call printcr ; newline
617A  C38861    02275         jp $dCP ; skip else 
617D  00        02276 $cCP    nop ; close ($dobj.locked == 0)
617E  00        02277         nop ; println("IT'S LOCKED.")
617F  21B05D    02278         ld hl,itslocked
6182  CD7C52    02279         call OUTLIN
6185  CD0E59    02280         call printcr ; newline
6188  00        02281 $dCP    nop ; end else
6189  C39761    02282         jp $eCP ; skip else 
618C  00        02283 $bCP    nop ; close ($dobj.open == 0)
618D  00        02284         nop ; {  println("IT'S ALREADY OPEN.")
618E  21BD5D    02285         ld hl,alreadyopen
6191  CD7C52    02286         call OUTLIN
6194  CD0E59    02287         call printcr ; newline
6197  00        02288 $eCP    nop ; end else
6198  C3A661    02289         jp $fCP ; skip else 
619B  00        02290 $aCP    nop ; close ($dobj.openable==1)
619C  00        02291         nop ; println("THAT'S NOT OPENABLE.")
619D  21FB5D    02292         ld hl,notopenable
61A0  CD7C52    02293         call OUTLIN
61A3  CD0E59    02294         call printcr ; newline
61A6  00        02295 $fCP    nop ; end else
61A7  DDE1      02296         pop ix
61A9  D1        02297         pop de
61AA  C1        02298         pop bc
61AB  F1        02299         pop af
61AC  C9        02300         ret
                02301 
                02302 
                02303 ; machine generate Z80 routine from XML file
                02304 *MOD
                02305 close_sub
61AD  F5        02306         push af
61AE  C5        02307         push bc
61AF  D5        02308         push de
61B0  DDE5      02309         push ix
61B2  3A9C56    02310         ld a,(sentence+1)
61B5  47        02311         ld b,a
61B6  0E13      02312         ld c, 19
61B8  CDDA5E    02313         call bmulc
61BB  DD210000  02314         ld ix,obj_table
open_close.asm(67): undefined symbol
61BF  DD09      02315         add ix,bc ; jump to object
61C1  011100    02316         ld bc,PROPERTY_BYTE_1 ; get prop byte
61C4  DD09      02317         add ix,bc ; jump to the object's byte we need
61C6  DDCB0066  02318         bit OPENABLE_BIT,(ix) ; test openable prop bit
61CA  CAF761    02319         jp z,$aCQ
61CD  DDCB006E  02320         bit OPEN_BIT,(ix) ; test open prop bit
61D1  CAE861    02321         jp z,$bCQ
61D4  DDCB00AE  02322         res OPEN_BIT,(ix)
                02323         ;ld a,OPEN_BIT
                02324         ;cpl 
                02325         ;and (ix) ; and (ix) into acc
                02326         ;ld (ix),a
61D8  21AA5D    02327         ld hl,done
61DB  CD7C52    02328         call OUTLIN     
61DE  CD0E59    02329         call printcr ; newline
61E1  C3E461    02330         jp $dCQ ; skip else 
61E4  00        02331 $dCQ    nop ; end else
61E5  C3F361    02332         jp $eCQ ; skip else 
61E8  00        02333 $bCQ    nop ; close ($dobj.open == 0)
61E9  00        02334         nop ; {  println("IT'S ALREADY CLOSED.")
61EA  21D05D    02335         ld hl,alreadyclosed
61ED  CD7C52    02336         call OUTLIN
61F0  CD0E59    02337         call printcr ; newline
61F3  00        02338 $eCQ    nop ; end else
61F4  C30262    02339         jp $fCQ ; skip else 
61F7  00        02340 $aCQ    nop ; close ($dobj.openable==1)
61F8  00        02341         nop ; println("THAT'S NOT CLOSEABLE.")
61F9  21E55D    02342         ld hl,notcloseable
61FC  CD7C52    02343         call OUTLIN
61FF  CD0E59    02344         call printcr ; newline
6202  00        02345 $fCQ    nop ; end else
6203  DDE1      02346         pop ix
6205  D1        02347         pop de
6206  C1        02348         pop bc
6207  F1        02349         pop af
6208  C9        02350         ret
                02351 
                02352 *MOD
                02353 lock_sub
6209  F5        02354                 push af
620A  C5        02355                 push bc
620B  D5        02356                 push de
620C  DDE5      02357                 push ix
620E  3A9C56    02358                 ld a,(sentence+1)
6211  47        02359                 ld b,a
6212  0E13      02360                 ld c, 19
6214  CDDA5E    02361                 call bmulc
6217  DD210000  02362                 ld ix,obj_table
open_close.asm(115): undefined symbol
621B  DD09      02363                 add ix,bc ; jump to object
621D  011200    02364                 ld bc,PROPERTY_BYTE_2 ; get prop byte
6220  DD09      02365                 add ix,bc ; jump to the object's byte we need
6222  DDCB0076  02366                 bit LOCKABLE_BIT,(ix) ; test openable prop bit
6226  CA3D62    02367                 jp z,$nlCR
6229  DDCB007E  02368                 bit LOCKED_BIT,(ix) ; test open prop bit
622D  CA4962    02369                 jp z,$alCR
6230  DDCB00FE  02370                 set LOCKED_BIT,(ix)
6234  21AA5D    02371                 ld hl,done
6237  CD7C52    02372                 call OUTLIN
623A  CD0E59    02373                 call printcr
623D  215962    02374 $nlCR   ld hl,notlockable
6240  CD7C52    02375                 call OUTLIN
6243  CD0E59    02376                 call printcr
6246  C35262    02377                 jp $xCR 
6249  216E62    02378 $alCR   ld hl,alreadylocked
624C  CD7C52    02379                 call OUTLIN
624F  CD0E59    02380                 call printcr
6252  DDE1      02381 $xCR            pop ix
6254  D1        02382                 pop de
6255  C1        02383                 pop bc
6256  F1        02384                 pop af
6257  C9        02385                 ret     
                02386 *MOD            
                02387 unlock_sub
6258  C9        02388         ret
                02389 
6259  54484154  02390 notlockable DB "THAT'S NOT LOCKABLE.",0h        
      27 53 20 4E 4F 54 20 4C
      4F 43 4B 41 42 4C 45 2E
      00                     
626E  49542753  02391 alreadylocked DB "IT'S ALREADY LOCKED.",0h
      20 41 4C 52 45 41 44 59
      20 4C 4F 43 4B 45 44 2E
      00                     
                02392 ;alreadyopen DB "IT'S ALREADY OPEN.",0h
                02393 
                02394 *INCLUDE put.asm
                02395 ;put.asm
                02396 
                02397 *MOD
                02398 put_sub
6283  C5        02399                 push bc
6284  D5        02400                 push de
6285  E5        02401                 push hl
6286  DDE5      02402                 push ix
6288  3A9E56    02403                 ld a,(sentence+3)
628B  FEFF      02404                 cp 0ffh  ; io supplied
628D  CAF862    02405                 jp z,$bpCT
6290  DD210000  02406                 ld ix,obj_table
put.asm(12): undefined symbol
6294  111100    02407                 ld de,PROPERTY_BYTE_1
6297  3A9E56    02408                 ld a,(sentence+3)
629A  47        02409                 ld b,a
629B  0E13      02410                 ld c,OBJ_ENTRY_SIZE
629D  CDDA5E    02411                 call bmulc
62A0  DD09      02412                 add ix,bc
62A2  DD19      02413                 add ix,de  ; ix now has container supporter byte
62A4  3A9D56    02414                 ld a,(sentence+2)
62A7  FE00      02415                 cp 0  ; 0=in
62A9  CAB462    02416                 jp z,$piCT
62AC  FE06      02417                 cp 6  ; 6=on
62AE  CAC062    02418                 jp z,$poCT
62B1  C3F862    02419                 jp $bpCT
62B4  00        02420 $piCT   nop ; is do a container?                
62B5  DDCB0056  02421                 bit CONTAINER_BIT,(ix)
62B9  CA0463    02422                 jp z,$ncCT
62BC  00        02423                 nop ; ? is it closed
62BD  C3D462    02424                 jp $mvCT
62C0  00        02425 $poCT   nop ; is do a supporter?
62C1  DDCB004E  02426                 bit SUPPORTER_BIT,(ix)
62C5  CA1C63    02427                 jp z,$nsCT
62C8  C3D462    02428                 jp $mvCT
62CB  00        02429                 nop ; check nested containership
62CC  CD1A5B    02430                 call check_nested_containership
62CF  FE01      02431                 cp 1  ; 1 = invalid (message was printed)
62D1  CA2563    02432                 jp z,$xCT
62D4  3A9C56    02433 $mvCT    ld a,(sentence+1)
62D7  47        02434                 ld b,a
62D8  0E01      02435                 ld c,HOLDER
62DA  3A9E56    02436                 ld a,(sentence+3)
62DD  CD315E    02437                 call set_obj_attr
62E0  21AA5D    02438                 ld hl,done
62E3  CD7C52    02439                 call OUTLIN
62E6  CD0E59    02440                 call printcr
62E9  C32563    02441                 jp  $xCT
62EC  213963    02442 $clsdCT  ld hl,badput
62EF  CD7C52    02443                 call OUTLIN
62F2  CD0E59    02444                 call printcr
62F5  C32563    02445                 jp $xCT
62F8  213963    02446 $bpCT   ld hl,badput
62FB  CD7C52    02447                 call OUTLIN
62FE  CD0E59    02448                 call printcr
6301  C32563    02449                 jp $xCT
6304  216263    02450 $ncCT   ld hl,notcontainer
6307  CD7C52    02451                 call OUTLIN
630A  CD0E59    02452                 call printcr            
630D  C32563    02453                 jp $xCT
6310  219E63    02454 $npCT    ld hl,impossible
6313  CD7C52    02455                 call OUTLIN
6316  CD0E59    02456                 call printcr            
6319  C32563    02457                 jp $xCT;                
631C  218063    02458 $nsCT   ld hl,notsupporter
631F  CD7C52    02459                 call OUTLIN
6322  CD0E59    02460                 call printcr            
6325  DDE1      02461 $xCT            pop ix
6327  E1        02462                 pop hl
6328  D1        02463                 pop de
6329  C1        02464                 pop bc
632A  C9        02465                 ret
                02466 
632B  49542049  02467 closed DB "IT IS CLOSED.",0h    
      53 20 43 4C 4F 53 45 44
      2E 00                  
6339  5452593A  02468 badput DB "TRY: PUT SOMETHING IN/ON SOMETHING ELSE.",0h 
      20 50 55 54 20 53 4F 4D
      45 54 48 49 4E 47 20 49
      4E 2F 4F 4E 20 53 4F 4D
      45 54 48 49 4E 47 20 45
      4C 53 45 2E 00         
6362  594F5520  02469 notcontainer DB "YOU CAN'T PUT THINGS IN THAT.",0h
      43 41 4E 27 54 20 50 55
      54 20 54 48 49 4E 47 53
      20 49 4E 20 54 48 41 54
      2E 00                  
6380  594F5520  02470 notsupporter DB "YOU FIND NO SUITABLE SURFACE.",0h
      46 49 4E 44 20 4E 4F 20
      53 55 49 54 41 42 4C 45
      20 53 55 52 46 41 43 45
      2E 00                  
639E  54484154  02471 impossible DB "THAT'S NOT PHYSICALLY POSSIBLE.",0h
      27 53 20 4E 4F 54 20 50
      48 59 53 49 43 41 4C 4C
      59 20 50 4F 53 53 49 42
      4C 45 2E 00            
                02472 *INCLUDE miscZ80.asm
                02473 
                02474 
                02475                 
                02476 quit_sub
63BE  C9        02477                 ret
                02478 *INCLUDE print_rets.asm
                02479 ;z80 - print returns
                02480 ;these are long jumped to, not 'called'
                02481 
                02482 print_ret_pardon
63BF  210365    02483         ld hl,pardon
63C2  CD7C52    02484         call OUTLIN
63C5  CD0E59    02485         call printcr
63C8  C9        02486         ret
                02487 
                02488 print_ret_no_io
63C9  21C664    02489         ld hl,missing_io 
63CC  CD7C52    02490         call OUTLIN
63CF  CD0E59    02491         call printcr
63D2  C9        02492         ret
                02493         
                02494         
                02495 print_ret_bad_verb
63D3  21AE64    02496         ld hl,badverb
63D6  CD7C52    02497         call OUTLIN
63D9  219555    02498         ld hl,word1
63DC  CD7C52    02499         call OUTLIN
63DF  210B65    02500         ld hl,period
63E2  CD7C52    02501         call OUTLIN     
63E5  CD0E59    02502         call printcr
63E8  C9        02503         ret
                02504 
                02505 print_ret_bad_do
63E9  219164    02506         ld hl,badnoun
63EC  CD7C52    02507         call OUTLIN
63EF  21B555    02508         ld hl,word2
63F2  CD7C52    02509         call OUTLIN
63F5  210B65    02510         ld hl,period
63F8  CD7C52    02511         call OUTLIN     
63FB  CD0E59    02512         call printcr
63FE  C9        02513         ret
                02514 
                02515 print_ret_bad_io
63FF  219164    02516         ld hl,badnoun
6402  CD7C52    02517         call OUTLIN
6405  21F555    02518         ld hl,word4
6408  CD7C52    02519         call OUTLIN
640B  210B65    02520         ld hl,period
640E  CD7C52    02521         call OUTLIN     
6411  CD0E59    02522         call printcr
6414  C9        02523         ret
                02524 
                02525 print_ret_dont_see
6415  214564    02526         ld hl,dontsee
6418  CD7C52    02527         call OUTLIN
641B  CD0E59    02528         call printcr
641E  C9        02529         ret     
                02530 
                02531 print_ret_donthave
641F  215964    02532         ld hl,donthave
6422  CD7C52    02533         call OUTLIN
6425  CD0E59    02534         call printcr
6428  C9        02535         ret
                02536 
                02537 print_ret_not_openable
6429  216E64    02538         ld hl,cantopen
642C  CD7C52    02539         call OUTLIN
642F  CD0E59    02540         call printcr
6432  C9        02541         ret
                02542         
                02543         
                02544         
6433  49542049  02545 pitchdark DB "IT IS PITCH DARK.",0h
      53 20 50 49 54 43 48 20
      44 41 52 4B 2E 00      
6445  594F5520  02546 dontsee  DB "YOU DON'T SEE THAT.",0h
      44 4F 4E 27 54 20 53 45
      45 20 54 48 41 54 2E 00
6459  594F5520  02547 donthave DB "YOU DON'T HAVE THAT.",0h
      44 4F 4E 27 54 20 48 41
      56 45 20 54 48 41 54 2E
      00                     
646E  54484154  02548 cantopen DB "THAT'S N0T SOMETHING YOU CAN OPEN.",0h
      27 53 20 4E 30 54 20 53
      4F 4D 45 54 48 49 4E 47
      20 59 4F 55 20 43 41 4E
      20 4F 50 45 4E 2E 00   
6491  4920444F  02549 badnoun DB "I DON'T RECOGNIZE THE WORD '",0h ; null     
      4E 27 54 20 52 45 43 4F
      47 4E 49 5A 45 20 54 48
      45 20 57 4F 52 44 20 27
      00                     
64AE  4920444F  02550 badverb DB "I DON'T KNOW THE VERB '", 0 ; null  
      4E 27 54 20 4B 4E 4F 57
      20 54 48 45 20 56 45 52
      42 20 27 00            
64C6  4954204C  02551 missing_io DB "IT LOOKS LIKE YOU ARE MISSING THE OBJECT OF THE PREPOSITION.", 0h
      4F 4F 4B 53 20 4C 49 4B
      45 20 59 4F 55 20 41 52
      45 20 4D 49 53 53 49 4E
      47 20 54 48 45 20 4F 42
      4A 45 43 54 20 4F 46 20
      54 48 45 20 50 52 45 50
      4F 53 49 54 49 4F 4E 2E
      00                     
6503  50415244  02552 pardon DB "PARDON",3fh,0 ; null
      4F 4E 3F 00            
650B  272E00    02553 period DB "'.", 0 ; null
                02554                 
                02555 *INCLUDE EventsZ80.asm
main.asm(73): unable to include file
                02556 *INCLUDE articlesZ80.asm
                02557 ;;;;;;;;;;;;;;;;;;;;;;;
                02558 ;article table
                02559 ;1st byte is length number
                02560 ;;;;;;;;;;;;;;;;;;;;;;;
                02561 article_table
650E  03        02562         DB 3
650F  544845    02563         DB "THE"
6512  00        02564         DB 0
6513  01        02565         DB 1
6514  41        02566         DB "A"
6515  00        02567         DB 0
6516  02        02568         DB 2
6517  414E      02569         DB "AN"
6519  00        02570         DB 0
651A  FF        02571         DB 255
                02572 *INCLUDE PrepTableZ80.asm
main.asm(75): unable to include file
                02573 *INCLUDE StringTableZ80.asm
main.asm(76): unable to include file
                02574 *INCLUDE DictionaryZ80.asm
main.asm(77): unable to include file
                02575 *INCLUDE VerbTableZ80.asm
main.asm(78): unable to include file
                02576 *INCLUDE ObjectTableZ80.asm
main.asm(79): unable to include file
                02577 *INCLUDE ObjectWordTableZ80.asm
main.asm(80): unable to include file
                02578 *INCLUDE NogoTableZ80.asm
main.asm(81): unable to include file
                02579 *INCLUDE BackDropTableZ80.asm
main.asm(82): unable to include file
                02580 *INCLUDE before_table_Z80.asm
main.asm(83): unable to include file
                02581 *INCLUDE instead_table_Z80.asm
main.asm(84): unable to include file
                02582 *INCLUDE after_table_Z80.asm
main.asm(85): unable to include file
                02583 *INCLUDE CheckRulesZ80.asm
main.asm(86): unable to include file
                02584 *INCLUDE sentence_tableZ80.asm
                02585 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                02586 ;sentence jump table
                02587 ;this is not machine generated
                02588 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                02589 sentence_table 
651B  00        02590         DB look_verb_id
sentence_tableZ80.asm(6): undefined symbol
651C  A356      02591         DW look_sub
651E  00        02592         DB inventory_verb_id
sentence_tableZ80.asm(8): undefined symbol
651F  095F      02593         DW inventory_sub
6521  00        02594         DB n_verb_id
sentence_tableZ80.asm(10): undefined symbol
6522  CC5C      02595         DW move_player
6524  00        02596         DB ne_verb_id
sentence_tableZ80.asm(12): undefined symbol
6525  CC5C      02597         DW move_player
6527  00        02598         DB nw_verb_id
sentence_tableZ80.asm(14): undefined symbol
6528  CC5C      02599         DW move_player  
652A  00        02600         DB s_verb_id
sentence_tableZ80.asm(16): undefined symbol
652B  CC5C      02601         DW move_player
652D  00        02602         DB e_verb_id
sentence_tableZ80.asm(18): undefined symbol
652E  CC5C      02603         DW move_player
6530  00        02604         DB w_verb_id
sentence_tableZ80.asm(20): undefined symbol
6531  CC5C      02605         DW move_player
6533  00        02606         DB se_verb_id
sentence_tableZ80.asm(22): undefined symbol
6534  CC5C      02607         DW move_player  
6536  00        02608         DB sw_verb_id
sentence_tableZ80.asm(24): undefined symbol
6537  CC5C      02609         DW move_player  
6539  00        02610         DB up_verb_id
sentence_tableZ80.asm(26): undefined symbol
653A  CC5C      02611         DW move_player  
653C  00        02612         DB down_verb_id
sentence_tableZ80.asm(28): undefined symbol
653D  CC5C      02613         DW move_player  
653F  00        02614         DB get_verb_id
sentence_tableZ80.asm(30): undefined symbol
6540  BA5F      02615         DW get_sub
6542  00        02616         DB out_verb_id
sentence_tableZ80.asm(32): undefined symbol
6543  CC5C      02617         DW move_player  
6545  00        02618         DB enter_verb_id
sentence_tableZ80.asm(34): undefined symbol
6546  345D      02619         DW enter_sub
6548  00        02620         DB drop_verb_id
sentence_tableZ80.asm(36): undefined symbol
6549  E85F      02621         DW drop_sub
654B  00        02622         DB examine_verb_id
sentence_tableZ80.asm(38): undefined symbol
654C  CB57      02623         DW look_at_sub
654E  00        02624         DB put_verb_id
sentence_tableZ80.asm(40): undefined symbol
654F  8362      02625         DW put_sub
6551  00        02626         DB open_verb_id
sentence_tableZ80.asm(42): undefined symbol
6552  3C61      02627         DW open_sub
6554  00        02628         DB close_verb_id
sentence_tableZ80.asm(44): undefined symbol
6555  AD61      02629         DW close_sub    
6557  00        02630         DB smell_verb_id
sentence_tableZ80.asm(46): undefined symbol
6558  0000      02631         DW smell_sub
sentence_tableZ80.asm(47): undefined symbol
655A  00        02632         DB listen_verb_id
sentence_tableZ80.asm(48): undefined symbol
655B  0000      02633         DW listen_sub
sentence_tableZ80.asm(49): undefined symbol
655D  00        02634         DB quit_verb_id
sentence_tableZ80.asm(50): undefined symbol
655E  BE63      02635         DW quit_sub
6560  00        02636         DB lock_verb_id
sentence_tableZ80.asm(52): undefined symbol
6561  0962      02637         DW lock_sub
6563  00        02638         DB unlock_verb_id
sentence_tableZ80.asm(54): undefined symbol
6564  5862      02639         DW unlock_sub
6566  FF        02640         DB 255
                02641         
                02642 
                02643 *INCLUDE WelcomeZ80.asm
main.asm(88): unable to include file
                02644 *INCLUDE UserVarsZ80.asm
main.asm(89): unable to include file
6567  00        02645 score DB 0
6568  00        02646 gameOver DB 0
6569  00        02647 moves DB 0
656A  00        02648 turns_without_light DB 0
656B  64        02649 health DB 100
                02650         END START


$ACP            619B  $ACQ            61F7  $ALCR           6249  
$BCP            618C  $BCQ            61E8  $BPCT           62F8  
$CBR            5BBD  $CBT            5C55  $CBU            5C8D  
$CCH            5F78  $CCI            5FAE  $CCP            617D  
$CLSDCT         62EC  $CNTI           544D  $CP             56F9  
$CT             582B  $CY             597E  $DBR            5BC6  
$DCBW           5D19  $DCP            6188  $DCQ            61E4  
$DOM            54EE  $ECP            6197  $ECQ            61F3  
$FCP            61A6  $FCQ            6202  $GO2BW          5D25  
$GOBW           5CF1  $INP?           5224  $IOM            5514  
$LP             541F  $LPB            5284  $LPBA           59D8  
$LPBC           5A15  $LPBR           5B9D  $LPBU           5C6A  
$LPC            52A2  $LPCE           5EBF  $LPCF           5EE6  
$LPCH           5F3E  $LPCI           5F93  $LPCN           6051  
$LPD            52C1  $LPG            5372  $LPP            56D0  
$LPR            5786  $LPS            57BF  $LPT            57EF  
$LPY            5958  $LPZ            59A5  $MVCT           62D4  
$NBC            5A30  $NBN            5B35  $NBV            5CB4  
$NCCT           6304  $NCE            5ECF  $NCG            5F26  
$NFY            598F  $NLCR           623D  $NPCT           6310  
$NQ             5741  $NR             57B2  $NSCT           631C  
$NT             5830  $NXTBR          5BBB  $NXTBT          5C4D  
$NXTBU          5C8A  $OBV            5CC7  $PICT           62B4  
$POCT           62C0  $SCC            5E5E  $SCD            5E7F  
$SKPR           57A5  $SU             5866  $W4L            54BF  
$XA             5263  $XB             5291  $XBA            59E3  
$XBC            5A32  $XBD            5A44  $XBE            5A62  
$XBF            5A7C  $XBG            5A96  $XBH            5AB0  
$XBI            5ACA  $XBJ            5AE4  $XBK            5AFE  
$XBL            5B18  $XBM            5B19  $XBN            5B40  
$XBP            5B56  $XBQ            5B70  $XBS            5BFF  
$XBT            5C5A  $XBU            5C92  $XBW            5D2F  
$XBX            5D58  $XC             52AF  $XCC            5E6E  
$XCD            5E90  $XCE            5ED6  $XCF            5EF1  
$XCG            5F2F  $XCH            5F7D  $XCI            5FB3  
$XCJ            5FDF  $XCK            5FFF  $XCL            6020  
$XCM            6041  $XCN            6056  $XCO            6096  
$XCR            6252  $XCT            6325  $XF             536A  
$XG             53AD  $XH             53DA  $XI             5452  
$XL             54D4  $XM             5536  $XO             556F  
$XP             56FE  $XQ             5756  $XR             57B4  
$XS             57C7  $XT             5837  $XU             5876  
$XZ             59CA  $Y1CJ           5FC2  $YA             525E  
$YBC            5A2B  $YBX            5D4E  $YCE            5ED4  
$YCK            5FEA  $YH             53DD  $YP             56BD  
$YR             57AD  $YT             5835  $_LP            543D  
$_LPI           5459  $_LPX           5921  $_NFX           5947  
$_X             5476  $_XBB           5A0A  $_XE            533D  
$_XX            5949  $_XY            5991  $_YY            5989  
@LPBT           5C13  ACTIONS_TABLE   0000  ACTION_RUN      5C62  
ALREADYCLOSED   5DD0  ALREADYHAVE     6125  ALREADYLOCKED   626E  
ALREADYOPEN     5DBD  ANY_OBJECT      00FE  APPEND_ADJ      607A  
ARTICLE_TABLE   650E  ATOUPPER        5A38  AUTHOR          0000  
BACKDROP        000A  BACKDROP_MASK   0002  BADNOUN         6491  
BADPUT          6339  BADVERB         64AE  BEINGWORN       60AC  
BMULC           5EDA  BUFSIZE         0030  B_ANCESTOR_OF_C 5EB9  
B_VISIBLE_TO_C  57E8  CANTOPEN        646E  CARRYING        60E3  
CHECK_DOBJ_CLOS 5AFF  CHECK_DOBJ_LOCK 5AE5  CHECK_DOBJ_OPEN 5AB1  
CHECK_DOBJ_OPNA 5A97  CHECK_DOBJ_PORT 5A49  CHECK_DOBJ_SUPP 5A47  
CHECK_DOBJ_UNLO 5ACB  CHECK_DONT_HAVE 5A7D  CHECK_HAVE_DOBJ 5A63  
CHECK_IOBJ_CONT 5B57  CHECK_IOBJ_SUPP 5A48  CHECK_LIGHT     5B43  
CHECK_NESTED_CO 5B1A  CHECK_NOT_SELF_ 5B19  CHECK_PREP_SUPP 5B42  
CHECK_SEE_DOBJ  5A45  CHECK_SEE_IOBJ  5A46  CHECK_TABLE     0000  
CLEAR_BUFFERS   5406  CLOSED          632B  CLOSE_SUB       61AD  
CLOSE_VERB_ID   0000  CLRBUF          52BB  CLS             01C9  
CONTAINER       0003  CONTAINER_BIT   0002  CONTAINER_MASK  0004  
COPYDEST        5695  COUNT_VISIBLE_O 57BA  CRTBYTE         0033  
DBGPF           5571  DBGSA           5580  DESC_ID         0003  
DICTIONARY      0000  DIRECTION_MAP   5D73  DONE            5DAA  
DONTHAVE        6459  DONTSEE         6445  DOOR            000F  
DOORCLOSED      5D80  DOOR_BIT        0006  DOOR_MASK       0040  
DOWN            000D  DOWN_VERB_ID    0000  DOWORDID        56A1  
DO_EVENTS       524C  DRINKABLE       000B  DRINKABLE_BIT   0002  
DRINKABLE_MASK  0004  DROPPED         60C4  DROP_SUB        5FE8  
DROP_VERB_ID    0000  EAST            0006  EDIBLE_BIT      0001  
EDIBLE_MASK     0002  EMITTING_LIGHT  000E  EMITTING_LIGHT_ 0020  
ENCODE          5557  ENTER           000E  ENTER_SUB       5D34  
ENTER_VERB_ID   0000  EXAMINE_VERB_ID 0000  E_VERB_ID       0000  
FIND_PREPOSITIO 536E  FLAMMABLE       000C  FLAMMABLE_BIT   0003  
FLAMMABLE_MASK  0008  GAMEOVER        6568  GETCOMMAND      522B  
GETLIN          5264  GET_MOVE_DIR    5D5B  GET_OBJ_ATTR    5E10  
GET_OBJ_ID      594B  GET_OBJ_PROP    5E52  GET_PLAYER_ROOM 5EAB  
GET_SUB         5FBA  GET_TABLE_INDEX 591E  GET_VERBS_ID    5996  
GET_VERB_ID     0000  HANDLE_PREP     53B2  HAS_CONTENTS    5F84  
HEALTH          656B  HERE            5887  HIT_END         5699  
HOLDER          0001  HOLDER_ID       0001  ID              0000  
IMPOSSIBLE      639E  INBUF           41E8  INDENT          6044  
INDENTAMT       60B9  INDENT_LESS     6065  INDENT_MORE     6059  
INITIAL_DESC_ID 0002  INITIS          6101  INSIDE_CLOSED_C 5EB8  
INVENTORY_SUB   5F09  INVENTORY_VERB_ 0000  IOWORDID        56A2  
ITSLOCKED       5DB0  KEYIN           0040  LEADINGA        60BA  
LIGHTABLE       000D  LIGHTABLE_BIT   0004  LIGHTABLE_MASK  0010  
LISTEN_SUB      0000  LISTEN_VERB_ID  0000  LIST_OBJECT     571D  
LIT             000E  LIT_BIT         0005  LIT_MASK        0020  
LKP_DIRECTOBJ   5537  LKP_INDIRECTOBJ 5547  LOCKABLE        0007  
LOCKABLE_BIT    0006  LOCKABLE_MASK   0040  LOCKED          0008  
LOCKED_BIT      0007  LOCKED_MASK     0080  LOCK_SUB        6209  
LOCK_VERB_ID    0000  LOOK_AT_SUB     57CB  LOOK_SUB        56A3  
LOOK_VERB_ID    0000  LPBB            59F5  MAKE_PROP_MASK  5E94  
MASK_TABLE      5EF9  MASS            0010  MISSING_IO      64C6  
MOVES           6569  MOVE_PLAYER     5CCC  MOVE_PREP       53E2  
MOVE_TO_END     5458  MOVE_TO_NEXT    542B  MOVE_TO_START   543C  
NE_VERB_ID      0000  NOENTER         5D94  NOGO_TABLE      0000  
NOITEMS         60CD  NORTH           0004  NORTHEAST       0008  
NORTHWEST       000B  NOSEE           5B85  NOTCLOSEABLE    5DE5  
NOTCONTAINER    6362  NOTLOCKABLE     6259  NOTLOCKED       5B71  
NOTOPENABLE     5DFB  NOTPORTABLE     610D  NOTSUPPORTER    6380  
NO_OBJECT       00FF  NW_VERB_ID      0000  N_VERB_ID       0000  
OBJ_ATTRS_SIZE  0011  OBJ_ENTRY_SIZE  0013  OBJ_ID          0000  
OBJ_SIZE        0013  OBJ_TABLE       0000  OBJ_WORD_TABLE  0000  
OFFSCREEN       0000  ONITIS          60F5  OPEN            0006  
OPENABLE        0005  OPENABLE_BIT    0004  OPENABLE_MASK   0010  
OPEN_BIT        0005  OPEN_CONTAINER  0009  OPEN_MASK       0020  
OPEN_SUB        613C  OPEN_VERB_ID    0000  OUT             000F  
OUTLIN          527C  OUTLINCR        529A  OUT_VERB_ID     0000  
PARDON          6503  PARSE           52CC  PARSE_ERR       56A0  
PERIOD          650B  PITCHDARK       6433  PLAYER_HAS_LIGH 576B  
PLAYER_ID       0001  PLAYER_ROOM     5ED9  PORTABLE        0009  
PORTABLE_BIT    0000  PORTABLE_MASK   0001  POSTACTIONS_TAB 0000  
PREACTIONS_TABL 0000  PREPADDR        5697  PREP_FOUND      569F  
PREP_TABLE      0000  PRINTA          6071  PRINTCR         590E  
PRINT_CONTAINER 6002  PRINT_CONTENTS  5F31  PRINT_CONTENTS_ 583E  
PRINT_OBJ_DESC  5704  PRINT_OBJ_NAME  58BA  PRINT_RET_BAD_D 63E9  
PRINT_RET_BAD_I 63FF  PRINT_RET_BAD_V 63D3  PRINT_RET_DONTH 641F  
PRINT_RET_DONT_ 6415  PRINT_RET_NOT_O 6429  PRINT_RET_NO_IO 63C9  
PRINT_RET_PARDO 63BF  PRINT_SPACE     5900  PRINT_SUPPORTER 6023  
PRINT_TABLE_ENT 588D  PROPERTY_BYTE_1 0011  PROPERTY_BYTE_2 0012  
PROVIDINGLIGHT  609A  PUT_SUB         6283  PUT_VERB_ID     0000  
QUIT_SUB        63BE  QUIT_VERB_ID    0000  READ_DOBJ       5478  
RUN_ACTIONS     5BE5  RUN_ACTIONS_    5C04  RUN_DEFAULT_SEN 5C63  
RUN_SENTENCE    5B99  SCENERY         0001  SCENERY_BIT     0000  
SCENERY_MASK    0001  SCORE           6567  SENTENCE        569B  
SENTENCE_TABLE  651B  SET_OBJ_ATTR    5E31  SET_OBJ_PROP    5E71  
SE_VERB_ID      0000  SKIP_ARTICLE    533E  SMELL_SUB       0000  
SMELL_VERB_ID   0000  SOUTH           0005  SOUTHEAST       0009  
SOUTHWEST       000A  START           5200  STORE_WORD      548E  
STRCPY          59E6  STRCPYI         59F0  STREQ           5A10  
STRING_TABLE    0000  STRLEN          59D3  SUPPORTER       0002  
SUPPORTER_BIT   0001  SUPPORTER_MASK  0002  SW_VERB_ID      0000  
S_VERB_ID       0000  TAKEN           60BD  THEREISA        587B  
TRANSPARENT     0004  TRANSPARENT_BIT 0003  TRANSPARENT_MAS 0008  
TURNS_WITHOUT_L 656A  UNLOCK_SUB      6258  UNLOCK_VERB_ID  0000  
UNUSED          0010  UNUSED_BIT      0007  UNUSED_MASK     0080  
UP              000C  UP_VERB_ID      0000  VALIDATE_ENCODE 54AA  
VALIDATE_WORDS  54D5  VERB_TABLE      0000  VERSION         0000  
VISOBJS         587A  WELCOME         0000  WEST            0007  
WILDCARDIZE     5C96  WILDCARDS       5CC8  WORD1           5595  
WORD2           55B5  WORD3           55D5  WORD4           55F5  
WORD5           5615  WORD6           5635  WORD7           5655  
WORD8           5675  WORD_COUNT      569A  W_VERB_ID       0000  
_HEI            5471  _L2$            58D5  _LP             5895  
_LP$            58C6  _OUT$           58D1  _SK             58A4  
_X              58B3  _XW             58FA  
